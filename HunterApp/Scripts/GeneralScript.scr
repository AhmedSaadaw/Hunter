{"Type":null,"Title":"GeneralScript","Script_Code":"using System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Data.SQLite;\r\nusing System.IO;\r\nusing Newtonsoft.Json;\r\nusing System.Globalization;\r\n//############################################################################################################# Defines ##########################################################################################\r\n int delaySec,sec , min, hour,Flag,total_min ,FirstFlag;\r\n public double IrrigationSum ,AlarmedControllersSum ,OnlineControllers ,TotalPVM,TotalStation,TopMaxAlarm,TotalFZAlarms,TotalActiveFZAlarms,TotalDschFlowTotal,MaxFlowSensor ,WaterSourceFlow,TotalCurrentDraw,MASS_Command,TotalStationMax , TotalPVMMax ;\r\n double[] TopAlarmedConttrollers =new double [500];\r\n string[] TopAlarmedConttrollersName =new string [500];\r\n var Date =  DateTime.Now;\r\n var Yesterday = Date.AddDays(-1);\r\n var Las7days = Date.AddDays(-7);\r\n string ToDay = Date.ToString(\"yyyy-MM-dd\");\r\n string Month = Date.ToString(\"yyyy-MM-01\");\r\n string Year = Date.ToString(\"yyyy\");\r\n int month = Date.Month;\r\n int year = Date.Year;\r\n int day = Date.Day;\r\n int yesterdayDay = Yesterday.Day;\r\n int Las7daysDay = Las7days.Day;\r\n double DashBoadrdDay,DashBoadrdMonth,DashBoadrdWeek,DashBoadrdYear =0;\r\n string StartDate;\r\n string EndDate;\r\n //StartDate = \"'\"+Date.AddDays(-30).ToString(\"yyyy-MM-dd\")+\"'\";\r\n //EndDate = \"'\"+Date.AddDays(+1).ToString(\"yyyy-MM-dd\")+\"'\";\r\n EndDate = \"'\"+Date.ToString(\"yyyy-MM-dd\")+\"'\";\r\n public int [] AlarmAnalysisCount=new int [3];\r\n public int []totalAlarmAnalysisCount=new int [3];\r\n string SiteName;\r\n public int Rec,Runtime_Hr,Runtime_Min,Runtime_Sec;\r\n var SSDate =DateTime.Now;\r\n int SsAdMonth=SSDate.Month;\r\n int SeasonalAdj , ControlInfo_ReportMeridian,learnFlow_ReportMeridian;\r\n string Date_unix ;\r\n string con;\r\n string SwitchControllers,selectedType ;\r\n  string ControlInfo_meridian,LearnFlow_meridian;\r\n\r\n List<string> controllertype = new List<string>();\r\n List<string> controllerLabel = new List<string>();\r\n// this script should run a\r\n\r\n\r\n\r\n//###############################################################################################################################################################################################################\r\n\r\n\r\n//--------------------------------------------------------------------------------------------WeatherStation---------------------------------------------------------------------\r\nint WeatherDashBoardByNum =(int)GetValueNum(\"Weather.SelectWeatherDashBoardByNum\");\r\nSetValueStr(\"Script.WeatherDashBoardName\",GetValueStr(\"Weather.Name_\"+WeatherDashBoardByNum.ToString())) ;\r\nSetValueStr(\"DashBoard.SystemWeatherLable\",GetValueStr(\"Weather.Label_\"+WeatherDashBoardByNum.ToString())) ;\r\nstring WeatherStationName=GetValueStr(\"Script.WeatherDashBoardName\") ;\r\nif (WeatherStationName!=null)\r\n\t{\r\n\t\tdouble move;\r\n\t\tmove=(GetValueNum(WeatherStationName+\".Weather_AirTemp\")* GetValueNum(\"Botton.UnitScaleC\"))+GetValueNum(\"Botton.UnitScaleC2\");\r\n\t\tSetValueNum(\"DashBoard.SystemWeather_AirTemp\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Weather_WindDirection\");\r\n\t\tSetValueNum(\"DashBoard.SystemWeather_WindDirection\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Weather_SolarRadiation\");\r\n\t\tSetValueNum(\"DashBoard.SystemWeather_SolarRadiation\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Weather_Humidity\");\r\n\t\tSetValueNum(\"DashBoard.SystemWeather_Humidity\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Weather_WindSpeed\")*GetValueNum(\"Botton.UnitScaleMph\");\r\n\t\tSetValueNum(\"DashBoard.SystemWeather_WindSpeed\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Weather_RainFall\")*0.01*GetValueNum(\"Botton.UnitScaleInch\");\r\n\t\tSetValueNum(\"DashBoard.SystemWeather_RainFall\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Weather_AccumETO\")*GetValueNum(\"Botton.UnitScaleInch\");\r\n\t\tSetValueNum(\"DashBoard.SystemWeather_AccumETO\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Weather_PreviosDayETO\")*GetValueNum(\"Botton.UnitScaleInch\");\r\n\t\tSetValueNum(\"DashBoard.SystemWeather_PreviosDayETO\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Weather_AtmosphericPressure\");\r\n\t\tSetValueNum(\"DashBoard.SystemWeather_AtmosphericPressure\",move);\r\n\t}\r\n\r\n\r\nList<string>ControllersNamesList = Controllers();\r\nSetValueNum(\"DashBoard.SystemControllertNUM\",ControllersNamesList.Count);\r\n\r\n\r\nif (GetValueNum(\"Script.GeneralCheck\")==0)\r\n{\r\n\tSetValueNum(\"Script.GeneralCheck\",1);\r\n\t\r\nfor (int i=0; i < GetValueNum(\"DashBoard.SystemControllertNUM\");i++)   // i can get the controller num fo all sytem by get the num off the last contrler\r\n{\r\n\tstring ACC1Selected = GetValueStr(\"Script.MapControllerNameACC1\");\r\n  string index= ControllersNamesList[i];\r\n\t\r\n//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\H360\\index.txt\",index);\r\n\r\n//SetValueNum(\"Script.ReportCounter\",1);\r\n//----------------------------------------------------------------------------Hunter360 Script DashBoard ----------------------------------------------------------------------------\r\n//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n//---------------------------------------------------------------------Controller Status irrigation  --------------------------------------------------\r\n if (GetValueNum(index+\".Controller_Status\")==1)\r\n\t{\r\n\t\t\r\n\t\t\r\n\t if (controllertype[i]==\"ACC2\")\r\n\t{\r\n\t \tIrrigationSum = IrrigationSum+GetValueNum(index+\".ReportAlarmsInformation_ControllerIrrigating_Status\");\r\n\t}\r\n\telse if(controllertype[i]==\"ICC2\") \r\n\t{\r\n\t\tIrrigationSum = IrrigationSum+(GetValueNum(index+\".ReportControllerType_Station2Runtime_Status\") + GetValueNum(index+\".ReportControllerType_Station1Runtime_Status\") > 1 ? 1: 0 );\r\n\t}\r\n\telse if(controllertype[i]==\"ACC1\") \r\n\t{\r\n\t\tIrrigationSum = IrrigationSum+GetValueNum(index+\".ReportModeAlarms_ControllerIrrigating_Status\");\r\n\t}\r\n\t\r\n\t\r\n\t\t//---------------------------------------------------------------------Controllers Online Status   ---------------------------------------------------\r\n\t\t if ( GetValueNum(index+\".Controller_Status\")==1)\r\n\t\t\t{\r\n\t\t \tOnlineControllers ++;\r\n\t\t\t}\r\n//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\H360\\Tagname.txt\",index+\".Controller_Status\");\r\n//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\H360\\Counter.txt\",OnlineControllers.ToString());\r\n//----------------------------------Controllers Status Alarmed  ----------------------------------------------------\r\n//this is for dashboard sites\r\ndouble Alarms=0;\r\nif(controllertype[i]==\"ICC2\")\r\n{\t\r\nAlarms=GetValueNum(index+\".ReportModeAlarms_SmartPortError_Status\")+GetValueNum(index+\".ReportModeAlarms_DialInOffPosition_Status\")+GetValueNum(index+\".ReportModeAlarms_StationPumpOverload_Status\")+GetValueNum(index+\".ReportModeAlarms_SensorAlarm_Status\")+GetValueNum(index+\".ReportModeAlarms_ProgrammableOffActive_Status\")+(GetValueNum(index+\".ReportModeAlarms_SolarSyncETSensorCommFault_Status\")*GetValueNum(index+\".ReportControllerType_SolarSyncEnabled_Status\") + GetValueNum(index+\".ReportModeAlarms_FlowSensorAlarmDetected\")  ) ;\r\n\r\n}\r\nelse if(controllertype[i]==\"ACC2\")\r\n\t{\t\r\nAlarms = GetValueNum(index+\".ReportAlarmsInformation_CanBusFaultDetected_Status\")+GetValueNum(index+\".ReportAlarmsInformation_ClikSensorAlarm_Status\")+GetValueNum(index+\".ReportAlarmsInformation_ClikSensorRainDelayAlarm_Status\")+GetValueNum(index+\".ReportAlarmsInformation_DecoderModuleOverloaded_Status\")+GetValueNum(index+\".ReportAlarmsInformation_LowVoltageFaultDetected_Status\")+GetValueNum(index+\".ReportAlarmsInformation_MainSafeFlowZoneAlarm_Status\")+GetValueNum(index+\".ReportAlarmsInformation_MaxTransformerCurrentExceeded_Status\")+GetValueNum(index+\".ReportAlarmsInformation_NwwViolationDetected_Status\")+GetValueNum(index+\".ReportAlarmsInformation_PmvFaultDetected_Status\")+GetValueNum(index+\".ReportAlarmsInformation_PowerOutageDetected_Status\")+GetValueNum(index+\".ReportAlarmsInformation_RtcFaultDetected_Status\")+GetValueNum(index+\".ReportAlarmsInformation_SensorDecoderFault_Status\")+GetValueNum(index+\".ReportAlarmsInformation_StationFaultDetected_Status\")+GetValueNum(index+\".ReportAlarmsInformation_CanBusFaultDetected_Status\")+GetValueNum(index+\".ReportAlarmsInformation_StationFlowAlarm_Status\")+GetValueNum(index+\".ReportAlarmsInformation_WeatherSensorAlarm_Status\")+GetValueNum(index+\".ReportAlarmsInformation_WeatherSensorCommunicationsFault_Status\")+GetValueNum(index+\".ReportAlarmsInformation_WeatherSensorRainDelayAlarm_Status\");\r\n\t}\r\nelse if(controllertype[i]==\"ACC1\")\r\n\t{\t\r\nAlarms = GetValueNum(index+\".ReportModeAlarms_StationSizeZero_Status\")+GetValueNum(index+\".ReportModeAlarms_PowerOutage_Status\")+GetValueNum(index+\".ReportModeAlarms_ADMOverload_Status\")+GetValueNum(index+\".ReportModeAlarms_StationPumpOverload_Status\")+GetValueNum(index+\".ReportModeAlarms_SensorDecoderAlarmPollingStatusChanged_Status\")+GetValueNum(index+\".ReportModeAlarms_SensorAlarm_Status\")+GetValueNum(index+\".ReportModeAlarms_ETSensorCommFault_Status\")+GetValueNum(index+\".ReportModeAlarms_RTCFault_Status\")+GetValueNum(index+\".ReportModeAlarms_DecoderFailed_Status\")+GetValueNum(index+\".ReportModeAlarms_FlowAlarm_Status\");\r\n\t}\t\r\nif(Alarms >0 )\r\n{\r\n\t\r\n// to add the controllers so  any alarmed control to be counted like C00\"+index+\"--> 1,2\r\n\tSetValueNum(index+\".ControllerAlarms\",1);\r\n}\r\nelse\r\n{\r\nSetValueNum(index+\".ControllerAlarms\",0);\r\n}\r\n\r\n//------------------------- DashBoard Operation Status  ----------------------------------------------------------------\r\nif ( GetValueNum(index+\".Controller_Status\")==1)\r\n{\t\r\n\t\r\nif (controllertype[i]==\"ACC2\")\r\n{\r\ndouble PVM = GetValueNum(index+\".ReportActiveStations_Pmv1_Status\")+GetValueNum(index+\".ReportActiveStations_Pmv2_Status\")+GetValueNum(index+\".ReportActiveStations_Pmv3_Status\")+GetValueNum(index+\".ReportActiveStations_Pmv4_Status\")+GetValueNum(index+\".ReportActiveStations_Pmv5_Status\")+GetValueNum(index+\".ReportActiveStations_Pmv6_Status\");\r\nTotalPVM +=PVM;\r\nTotalPVMMax= TotalPVMMax + 6 ;\t\r\n}\r\nelse if(controllertype[i]==\"ICC2\") \r\n{\r\n\tTotalPVM = TotalPVM + GetValueNum(index+\".ReportControllerType_PumpOn_Status\") ;\r\n\tTotalPVMMax= TotalPVMMax + 1 ;\r\n}\t\r\n else if(controllertype[i]==\"ACC1\") \r\n{\r\n\tTotalPVM = TotalPVM +GetValueNum(index+\".ReportActiveStations_Pmv1_Status\")+GetValueNum(index+\".ReportActiveStations_Pmv2_Status\");\r\n\tTotalPVMMax= TotalPVMMax + 2 ;\r\n}\t\r\n\t\r\n\t\r\n\r\nif (controllertype[i]==\"ACC2\")\r\n{\r\n\tTotalStationMax = TotalStationMax + GetValueNum(index+\".ReportFieldControllerGlobals_Size_Status\") ;\r\n for(int j=1 ;j<226 ;j++)\r\n {\r\n\tTotalStation = TotalStation+ GetValueNum(index+\".ReportActiveStations_Stn\"+j.ToString()+\"_Status\");\r\n\r\n }\r\n}\r\nelse if(controllertype[i]==\"ICC2\") \r\n{\r\n\tTotalStationMax = TotalStationMax + GetValueNum(index+\".ReportControllerGlobals_Size_Status\") ;\r\n\tTotalStation = TotalStation+ (GetValueNum(index+\".ReportControllerType_Station1Runtime_Status\") > 0 ? 1: 0 )+(GetValueNum(index+\".ReportControllerType_Station2Runtime_Status\") > 0 ? 1: 0 ) ;\r\n}\r\nelse if (controllertype[i]==\"ACC1\")\r\n{\r\n\tTotalStationMax = TotalStationMax + GetValueNum(index+\".ReportControllerGlobals_Size_Status\") ;\r\n for(int j=1 ;j<= GetValueNum(index+\".ReportControllerGlobals_Size_Status\") ;j++)\r\n {\r\n\tTotalStation = TotalStation+ GetValueNum(index+\".ReportActiveStations_Stn\"+j.ToString()+\"_Status\");\r\n\r\n }\r\n}\r\n\t\r\n\t//SetValueNum(\"Script.ReportCounter\",2);//-----***************&&&&&&***\r\n}\r\n//----------------------------------- Top 10 Alarmed controllers  ----------------------------------------------------------------\r\n\r\ndouble[] boolValues=new double[0]; ;\r\nif (controllertype[i]==\"ACC2\")\r\n{\r\n boolValues = new double[] { GetValueNum(index+\".ReportAlarmsInformation_CanBusFaultDetected_Status\"),GetValueNum(index+\".ReportAlarmsInformation_ClikSensorAlarm_Status\"),GetValueNum(index+\".ReportAlarmsInformation_ClikSensorRainDelayAlarm_Status\"),GetValueNum(index+\".ReportAlarmsInformation_DecoderModuleOverloaded_Status\"),GetValueNum(index+\".ReportAlarmsInformation_LowVoltageFaultDetected_Status\"),GetValueNum(index+\".ReportAlarmsInformation_MainSafeFlowZoneAlarm_Status\"),GetValueNum(index+\".ReportAlarmsInformation_MaxTransformerCurrentExceeded_Status\"),GetValueNum(index+\".ReportAlarmsInformation_NwwViolationDetected_Status\"),GetValueNum(index+\".ReportAlarmsInformation_PmvFaultDetected_Status\"),GetValueNum(index+\".ReportAlarmsInformation_PowerOutageDetected_Status\"),GetValueNum(index+\".ReportAlarmsInformation_RtcFaultDetected_Status\"),GetValueNum(index+\".ReportAlarmsInformation_SensorDecoderFault_Status\"),GetValueNum(index+\".ReportAlarmsInformation_StationFaultDetected_Status\"),GetValueNum(index+\".ReportAlarmsInformation_CanBusFaultDetected_Status\"),GetValueNum(index+\".ReportAlarmsInformation_StationFlowAlarm_Status\"),GetValueNum(index+\".ReportAlarmsInformation_WeatherSensorAlarm_Status\"),GetValueNum(index+\".ReportAlarmsInformation_WeatherSensorCommunicationsFault_Status\"),GetValueNum(index+\".ReportAlarmsInformation_WeatherSensorRainDelayAlarm_Status\") };\r\n}\r\nif (controllertype[i]==\"ICC2\")\r\n{\r\n boolValues = new double[] { GetValueNum(index+\".ReportModeAlarms_SmartPortError_Status\"),GetValueNum(index+\".ReportModeAlarms_DialInOffPosition_Status\"),GetValueNum(index+\".ReportModeAlarms_StationPumpOverload_Status\"),GetValueNum(index+\".ReportModeAlarms_SensorAlarm_Status\"),GetValueNum(index+\".ReportModeAlarms_ProgrammableOffActive_Status\"),(GetValueNum(index+\".ReportModeAlarms_SolarSyncETSensorCommFault_Status\")*GetValueNum(index+\".ReportControllerType_SolarSyncEnabled_Status\") + GetValueNum(index+\".ReportModeAlarms_FlowSensorAlarmDetected\")  ) };\r\n}\r\nif (controllertype[i]==\"ACC1\")\r\n{\r\n boolValues = new double[] { GetValueNum(index+\".ReportModeAlarms_StationSizeZero_Status\")+GetValueNum(index+\".ReportModeAlarms_PowerOutage_Status\")+GetValueNum(index+\".ReportModeAlarms_ADMOverload_Status\")+GetValueNum(index+\".ReportModeAlarms_StationPumpOverload_Status\")+GetValueNum(index+\".ReportModeAlarms_SensorDecoderAlarmPollingStatusChanged_Status\")+GetValueNum(index+\".ReportModeAlarms_SensorAlarm_Status\")+GetValueNum(index+\".ReportModeAlarms_ETSensorCommFault_Status\")+GetValueNum(index+\".ReportModeAlarms_RTCFault_Status\")+GetValueNum(index+\".ReportModeAlarms_DecoderFailed_Status\")+GetValueNum(index+\".ReportModeAlarms_FlowAlarm_Status\")};\r\n}\t\r\n\t\r\n\r\nif (GetValueNum(\"Script.FirstTimeAlarm\")==0)// --------------------------------------------------->chreck this firstts\r\n{\r\n\t\r\n\tSetValueStr(\"Dashboard.CurrentPageName\",\"System\");\r\n\tSetValueNum(\"Botton.HeaderSelection\",1);\r\n\tSetValueNum(\"Botton.Header_SiteSelection\",2);\r\n\tSetValueNum(\"Botton.HeederCoulor\",4);\r\n\tSetValueNum(\"Botton.Controller_Num\",1);\r\n\tSetValueNum(\"Botton.Sites_Num\",1);\r\n\tSetValueNum(\"Botton.Controller_Num_Site\",1);\r\n\tSetValueNum(\"Botton.Flow Totals\",1);//FlowTotal\r\n\tSetValueNum(\"Botton.Flow TotalsICC2\",1);//ICC2 FlowTotal\t\r\n\tSetValueNum(\"Botton.Controller_Num\",1);//DashBoard ControllerPages\r\n\tSetValueNum(\"Botton.DashBoard_MassC\",0);//DashBoard Unified Commands\r\n\tSetValueStr(\"Botton.DashBoard_MassC_String\",\"ACC2\");//DashBoard Unified Commands\r\n\tStream.FileSystem.ReadTagsFromFileJson(Stream.Application.GetAppPath()+@\"\\Retn\\Counter\"+index+\".txt\");\r\n\t\r\n\tif(controllertype[i]==\"ICC2\")\r\n\t{\r\n\tSetValueNum(index+\".StartSingleManualStation_StationNumber\",1);\t//ICC2 Manual OP\r\n\tSetValueNum(index+\".ReportStationParameters_StationNumber_Command\",1);\r\n\tSetValueNum(index+\".ReportStationParameters_StationNumber_Command_memory\",1);\t\r\n\tSetValueNum(index+\".ReportFlowSetupParameters_Trigger\",1);\t// Sensor Setting\r\n\tSetValueNum(\"Botton.OperationComandICC2\",1);\t//Operation Commands\t\r\n\t\t\r\n\t}\r\n\telse \r\n\t{\r\n\tSetValueNum(index+\".ReportStationParameters_StationNumber_Command\",1);\r\n\tSetValueNum(index+\".GetItemInformation_ItemType_Command\",1);//item info\r\n\tSetValueNum(index+\".GetItemInformation_ItemID_Command\",1);//item info\r\n\tSetValueNum(\"Botton.DeviceInfoReportNum\",1);//item info Repoert\t\r\n\tSetValueNum(index+\".GetItemInformation_DeviceSelected\",1);//item info Repoert\t\t\r\n\tSetValueNum(\"Botton.ScheduleReportNum\",1);//irrigation scedule Repoert\t\t\t\r\n\tSetValueNum(index+\".ReportControllerProgramHeaderData_ProgramNumber_Command\",1);//irrigation scedule\r\n\tSetValueNum(index+\".ReportBlockParameters_BlockNumber_Command\",1);//BlockSetting\r\n\t//Select Flow Zone\t\r\n\t\tSetValueNum(\"Botton.FlowZoneSelect\",1);\r\n\t\tSetValueNum(index+\".ReportFlowZoneMonitoringData_Trigger\",1);\r\n\t\tSetValueNum(index+\".ReportFlowZoneParameters_Trigger\",1);\r\n\t//Manual operation\r\n\t\t SetValueNum(index+\".Start_RunTime_Command\",1);\r\n\t  SetValueNum(index+\".StartSingleManualEvent_DeviceType_Command\",1);\r\n\t\tSetValueNum(index+\".StartSingleManualEvent_DeviceNumber_Command\",1);\r\n\t\tSetValueStr(index+\".ManualOperation_DeviceType_String\",\"Station\");\t\r\n\t\tSetValueNum(index+\".StartManualAllStations_ProgramNumber_Command\",0);\r\n\t\tSetValueNum(index+\".StopProgram_ProgNum_Command\",0);\r\n\t\tSetValueStr(index+\".ManualOperation_ProgramNumber_String\",\"A\");\t\r\n\t\tSetValueNum(index+\".DeviceNum\",1);//ACC1 Station Manual Op\r\n\t\tSetValueNum(index+\".DeviceCalculationNum\",-1);//for statring with station station\r\n\t\tSetValueNum(index+\".StartPoint\",1);//ACC1 StartPoint Manual Op\r\n\t\tSetValueNum(index+\".StopDeleteStations_StaId_Command\",1);//ACC1 Stop Manual Op\r\n\t\t\r\n\t\tSetValueNum(index+\".ProgrammableOff_OffDays_Command\",1);//ACC1 Command\t\r\n\t\tSetValueNum(index+\".ReportStationParameters_StationID_ACC1\",1);//ACC1 Station Paramter\r\n\t}\r\n\t\r\n\tFirstFlag=1;\r\n}\r\n//SetValueNum(\"Script.ReportCounter\",3);//-----***************&&&&&&***\r\n        // Convert boolean values to an integer\r\n      int PackedInt = PackBooleansIntoInt(boolValues);\r\n\t\t\tint lastAlarms = (int)GetValueNum(index+\".LastAlarms\") ;\r\n\t\t\tint AlarmCounter = (int)GetValueNum(index+\".AlarmCounter\");\r\n\t\t\tint XorAlarm ,AndAlarm;\r\n\r\nif ((PackedInt > 0) &&(PackedInt != lastAlarms))\r\n{\r\n\tXorAlarm = PackedInt ^ lastAlarms;\r\n\tAndAlarm= XorAlarm & PackedInt;\r\n\t\r\n\tAlarmCounter +=CountSetBits(AndAlarm) ;\r\n\tlastAlarms=PackedInt;\r\n\tSetValueNum(index+\".AlarmCounter\",AlarmCounter) ;\r\n\tSetValueNum(index+\".LastAlarms\",lastAlarms) ;\r\n\tStream.FileSystem.SaveTagsToFileJson(Stream.Application.GetAppPath()+@\"\\Retn\\Counter\"+index+\".txt\",index+\".AlarmCounter,\"+index+\".LastAlarms\");\r\n\r\n}\r\nelse if ((PackedInt == 0))\r\n{\r\n\tlastAlarms=PackedInt;\r\n\tSetValueNum(index+\".LastAlarms\",lastAlarms) ;\r\n}\r\n\r\n//SetValueNum(\"Script.ReportCounter\",4);//-----***************&&&&&&***\r\n//when made all controllers should be order the values and move them to the tags and know the maxiumam (i think the max should be the sum of all contollers alarm counter )\r\n\tSetValueStr (\"AlarmAna.TagName0\",index+\"\");\r\n\tSetValueNum (\"AlarmAna.Value0\",GetValueNum(index+\".AlarmCounter\"));\r\n\r\n//----------------------------------------------------------------------------  Discharge FZ Alarmed -----------------------------------\r\ndouble FZAlarms = GetValueNum(index+\".ReportFlowZoneMonitoringData_AlarmActive_Status_FZ1\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_AlarmActive_Status_FZ2\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_AlarmActive_Status_FZ3\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_AlarmActive_Status_FZ4\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_AlarmActive_Status_FZ5\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_AlarmActive_Status_FZ6\");\r\n\r\nTotalFZAlarms=TotalFZAlarms+FZAlarms;\r\n\t\r\nMaxFlowSensor=MaxFlowSensor+6;\r\n//----------------------------------------------------------------------------Discharge Active FZ Alarmed ------------------------------------------------------------\r\n\r\ndouble ActiveFZAlarms = GetValueNum(index+\".ReportFlowZoneMonitoringData_StaRunning_Status_FZ1\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_StaRunning_Status_FZ2\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_StaRunning_Status_FZ3\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_StaRunning_Status_FZ4\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_StaRunning_Status_FZ5\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_StaRunning_Status_FZ6\");\r\n\r\n\r\nTotalActiveFZAlarms=TotalActiveFZAlarms+ActiveFZAlarms;\r\n\t\r\n\t\r\n//---------------------------------------------------------------------------- Discharge FlowTotal  -----------------------------------------------------------------------\r\n\r\ndouble DschFlowTotal =((GetValueNum(index+\".ReportCurrentFlow_FSen1FlowRate_Status\") >= 429496729.5) ? 0 : GetValueNum(index+\".ReportCurrentFlow_FSen1FlowRate_Status\")) +((GetValueNum(index+\".ReportCurrentFlow_FSen2FlowRate_Status\") >= 429496729.5) ? 0 : GetValueNum(index+\".ReportCurrentFlow_FSen2FlowRate_Status\"))+((GetValueNum(index+\".ReportCurrentFlow_FSen3FlowRate_Status\") >= 429496729.5) ? 0 : GetValueNum(index+\".ReportCurrentFlow_FSen3FlowRate_Status\"))+((GetValueNum(index+\".ReportCurrentFlow_FSen4FlowRate_Status\") >= 429496729.5) ? 0 : GetValueNum(index+\".ReportCurrentFlow_FSen4FlowRate_Status\"))+((GetValueNum(index+\".ReportCurrentFlow_FSen5FlowRate_Status\") >= 429496729.5) ? 0 : GetValueNum(index+\".ReportCurrentFlow_FSen5FlowRate_Status\"))+((GetValueNum(index+\".ReportCurrentFlow_FSen6FlowRate_Status\") >= 429496729.5) ? 0 : GetValueNum(index+\".ReportCurrentFlow_FSen6FlowRate_Status\"));\r\n\r\nSetValueNum(index+\".ControlInfo_FlowRate\",DschFlowTotal);\r\n\r\nTotalDschFlowTotal=TotalDschFlowTotal+DschFlowTotal;\r\n\t\r\n\r\n\r\n//-------------------------------------------------------------------------------------------Alarm Analysis--------------------------------------------------------------------------------------------\r\n\t/*\r\nif (GetValueNum(\"DashBoard.SystemResetAlarm_Bool\")==1)\r\n\t{\r\n\t\tSetValueStr(\"DashBoard.SystemResetAlarm_Str\",Date.AddDays(-1).ToString(\"yyyy-MM-dd\"));\r\n\t\tSetValueNum(\"DashBoard.SystemResetAlarm_Bool\",0);\r\n\t}\r\nif (GetValueStr(\"DashBoard.SystemResetAlarm_Str\")!=\"0\")\r\n\t{\r\n\t\tstring RestDate = GetValueStr(\"DashBoard.SystemResetAlarm_Str\"); \r\n\t\tStartDate = \"'\"+RestDate+\"'\";\t\r\n\t}\r\nelse\r\n\t{\r\n\t\tStartDate = \"'\"+Date.AddDays(-30).ToString(\"yyyy-MM-dd\")+\"'\";\r\n\t}\t\r\n\t\r\nAlarmAnalysisCount[0] = 0;\r\nAlarmAnalysisCount[1] = 0;\r\n\r\nstring query6 = \"SELECT State, COUNT(*) AS Count FROM AlarmDB WHERE AlarmTime BETWEEN\"+StartDate +\"AND\" + EndDate+ \"GROUP BY State;\";\r\nawait ReadFromSQL(query6,AlarmAnalysisCount);\r\ntotalAlarmAnalysisCount[0] =AlarmAnalysisCount[0];\r\ntotalAlarmAnalysisCount[1] =AlarmAnalysisCount[1];\r\n//-------------------------------------------------\r\n*/\r\n//-------------------------------------------------------------------------------------------Water Source Flow-------------------------------------------------------------------------------------------\r\n\r\n WaterSourceFlow = WaterSourceFlow + GetValueNum(index+\".InCommingFlow\");\r\n\r\n//------------------------------------------------------------------------------------------Total Current Draw-------------------------------------------------------------------------------------------\r\n\r\n TotalCurrentDraw =TotalCurrentDraw + (GetValueNum(index+\".ReportControllerCurrentDraws_XfmrCurDraw_Status\"));\r\n\t//SetValueNum(\"Script.ReportCounter\",5);//-----***************&&&&&&***\r\n\r\n//***************************************************************************DashBoard counters**********************************************************\r\n\r\nAlarmedControllersSum = AlarmedControllersSum + GetValueNum(index+\".ControllerAlarms\");//Controllers Status Alarmed\r\n//Top Alarmed controllers\r\nTopAlarmedConttrollers [i]=GetValueNum(index+\".AlarmCounter\") ;\r\n//TopAlarmedConttrollersName[i]=index;\r\nTopAlarmedConttrollersName[i]=controllerLabel[i];\r\nTopMaxAlarm+=GetValueNum(index+\".AlarmCounter\");\r\n//SetValueNum(\"Script.ReportCounter\",6);//-----***************&&&&&&***\r\n\r\n//----------------------------------------------------------------------------Hunter360 Script Control Info  Unix Date----------------------------------------------------------------------------\r\n\r\n\r\nif(controllertype[i]==\"ICC2\")\r\n{\r\n\tif (GetValueNum(\"Botton.TimeFormat\")==0)\r\n\t{\r\n\t\tDate_unix = GetValueNum(index+\".ReportControllerGlobals_YYYY_Status\").ToString() + \"-\" + GetValueNum(index+\".ReportControllerGlobals_MM_Status\").ToString(\"00\") + \"-\" + GetValueNum(index+\".ReportControllerGlobals_DD_Status\").ToString(\"00\")  + \" \" + GetValueNum(index+\".ReportControllerGlobals_Hours_Status\").ToString(\"00\")  + \":\" + GetValueNum(index+\".ReportControllerGlobals_Minutes_Status\").ToString(\"00\")  ;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tstring hours =ConvertTo12HourFormat((int)GetValueNum(index+\".ReportControllerGlobals_Hours_Status\"),ref ControlInfo_meridian,ref ControlInfo_ReportMeridian ) ;\r\n\t\tSetValueNum(index+\".Report_ControlInfo_meridian\",ControlInfo_ReportMeridian);\r\n\t\tDate_unix = GetValueNum(index+\".ReportControllerGlobals_DD_Status\").ToString() + \"-\" + GetValueNum(index+\".ReportControllerGlobals_MM_Status\").ToString() + \"-\" +GetValueNum(index+\".ReportControllerGlobals_YYYY_Status\").ToString()  + \" \" + hours  + \":\" + GetValueNum(index+\".ReportControllerGlobals_Minutes_Status\").ToString() + \" \" + ControlInfo_meridian  ;\r\n\t}\r\nSetValueStr(index+\".ReportFieldControllerGlobals_UnixTimeDate_Status\",Date_unix);\r\n}\r\nelse if(controllertype[i]==\"ACC2\")\r\n{\r\n\tif (GetValueNum(\"Botton.TimeFormat\")==0)\r\n\t{\r\nDate_unix = GetValueNum(index+\".ReportFieldControllerGlobals_UnixTimeYear_Status\").ToString() + \"-\" + GetValueNum(index+\".ReportFieldControllerGlobals_UnixTimeMonth_Status\").ToString(\"00\") + \"-\" + GetValueNum(index+\".ReportFieldControllerGlobals_UnixTimeDay_Status\").ToString(\"00\")  + \" \" + GetValueNum(index+\".ReportFieldControllerGlobals_UnixTimeHour_Status\").ToString(\"00\")  + \":\" + GetValueNum(index+\".ReportFieldControllerGlobals_UnixTimeMinute_Status\").ToString(\"00\")  ;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tstring hours =ConvertTo12HourFormat((int)GetValueNum(index+\".ReportFieldControllerGlobals_UnixTimeHour_Status\"),ref ControlInfo_meridian,ref ControlInfo_ReportMeridian ) ;\r\n\t\t\tSetValueNum(index+\".Report_ControlInfo_meridian\",ControlInfo_ReportMeridian);\r\n\t\t//\tFile.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive\\Desktop\\Work\\Hunter\\App v2.0\\H360\\test.txt\",\"thecall\"+ControlInfo_meridian);\r\n\t\tDate_unix =  GetValueNum(index+\".ReportFieldControllerGlobals_UnixTimeDay_Status\").ToString(\"00\") + \"-\" + GetValueNum(index+\".ReportFieldControllerGlobals_UnixTimeMonth_Status\").ToString(\"00\") + \"-\" + GetValueNum(index+\".ReportFieldControllerGlobals_UnixTimeYear_Status\").ToString()  + \" \" + hours + \":\" + GetValueNum(index+\".ReportFieldControllerGlobals_UnixTimeMinute_Status\").ToString(\"00\") + \" \" + ControlInfo_meridian ;\r\n\t}\r\nSetValueStr(index+\".ReportFieldControllerGlobals_UnixTimeDate_Status\",Date_unix);\r\n}\r\nelse if(controllertype[i]==\"ACC1\")\r\n{\r\n\tif (GetValueNum(\"Botton.TimeFormat\")==0)\r\n\t{\r\nDate_unix =   GetValueNum(index+\".ReportControllerGlobals_DD_Status\").ToString(\"00\")+ \"-\" + GetValueNum(index+\".ReportControllerGlobals_MM_Status\").ToString(\"00\") + \"-\" + GetValueNum(index+\".ReportControllerGlobals_YYYY_Status\").ToString()  + \" \" + GetValueNum(index+\".ReportControllerGlobals_Hours_Status\").ToString(\"00\")  + \":\" + GetValueNum(index+\".ReportControllerGlobals_Minutes_Status\").ToString(\"00\")  ;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tstring hours =ConvertTo12HourFormat((int)GetValueNum(index+\".ReportControllerGlobals_Hours_Status\"),ref ControlInfo_meridian,ref ControlInfo_ReportMeridian ) ;\r\n\t\t\tSetValueNum(index+\".Report_ControlInfo_meridian\",ControlInfo_ReportMeridian);\r\n\t\t//\tFile.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive\\Desktop\\Work\\Hunter\\App v2.0\\H360\\test.txt\",\"thecall\"+ControlInfo_meridian);\r\n\t\tDate_unix = GetValueNum(index+\".ReportControllerGlobals_YYYY_Status\").ToString() + \"-\" + GetValueNum(index+\".ReportControllerGlobals_MM_Status\").ToString(\"00\") + \"-\" + GetValueNum(index+\".ReportControllerGlobals_DD_Status\").ToString(\"00\")  + \" \" + hours + \":\" + GetValueNum(index+\".ReportControllerGlobals_Minutes_Status\").ToString(\"00\") + \" \" + ControlInfo_meridian ;\r\n\t}\r\nSetValueStr(index+\".ReportFieldControllerGlobals_UnixTimeDate_Status\",Date_unix);\r\n}\r\n\t\r\n\tint Infovalue =(int) GetValueNum(index+\".ReportControllerGlobals_RotaryKnob_Status\");\r\nswitch (Infovalue)\r\n{\r\n    case 0:\r\n        SetValueStr(index+\".Dial_Position_ACC1\",\"Unknown\");\r\n        break;\r\n    case 1:\r\n        SetValueStr(index+\".Dial_Position_ACC1\",\"RUN\");\r\n        break;\r\n    case 2:\r\n        SetValueStr(index+\".Dial_Position_ACC1\",\"DATE/TIME\");\r\n        break;\r\n    case 3:\r\n        SetValueStr(index+\".Dial_Position_ACC1\",\"START TIMES\");\r\n        break;\r\n\t  case 4:\r\n        SetValueStr(index+\".Dial_Position_ACC1\",\"RUN TIMES\");\r\n        break;\r\n    case 5:\r\n        SetValueStr(index+\".Dial_Position_ACC1\",\"DAYS TO WATER\");\r\n        break;\r\n    case 6:\r\n        SetValueStr(index+\".Dial_Position_ACC1\",\"PUMP OPERATION\");\r\n        break;\r\n\t  case 7:\r\n        SetValueStr(index+\".Dial_Position_ACC1\",\"CYCLE AND SOAK\");\r\n        break;\r\n    case 8:\r\n        SetValueStr(index+\".Dial_Position_ACC1\",\"FLOW MONITORING\");\r\n        break;\r\n    case 9:\r\n        SetValueStr(index+\".Dial_Position_ACC1\",\"SENSOR OPERATION\");\r\n        break;\r\n\t  case 10:\r\n        SetValueStr(index+\".Dial_Position_ACC1\",\"PROG OVERLAP OPTIONS\");\r\n        break;\r\n\t\tcase 11:\r\n        SetValueStr(index+\".Dial_Position_ACC1\",\"STN & PROG NAMES\");\r\n        break;\r\n\t\tcase 12:\r\n        SetValueStr(index+\".Dial_Position_ACC1\",\"HISTORICAL DATA\");\r\n        break;\r\n\t\tcase 13:\r\n        SetValueStr(index+\".Dial_Position_ACC1\",\"ADVANCED FEATURES\");\r\n        break;\r\n\t\tcase 14:\r\n        SetValueStr(index+\".Dial_Position_ACC1\",\"MANUAL OPERATION\");\r\n        break;\r\n\t\tcase 15:\r\n        SetValueStr(index+\".Dial_Position_ACC1\",\"OFF\");\r\n        break;\r\n}\r\n\r\n\t//SetValueNum(\"Script.ReportCounter\",7);//-----***************&&&&&&***\r\n\r\n\t\t\r\n//------------------------------------------------------------------------------------set Control Info\t-------------------------------------------------------------------------------------------\r\nif(controllertype[i]==\"ACC2\")\r\n{\r\n\tif (GetValueNum(\"Botton.TimeFormat\")==1)\r\n\t{\r\n\t\tdouble Modify =GetValueNum(index+\".SetControllerTimeAndDate_12Hour_Command\")+(12*GetValueNum(index+\".ControlInfo_meridian\"));\r\n\t\tif (Modify==24)\r\n\t\t{\r\n\t\t\tSetValueNum(index+\".SetControllerTimeAndDate_UnixTimeHour_Command\",0);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tSetValueNum(index+\".SetControllerTimeAndDate_UnixTimeHour_Command\",Modify);\r\n\t\t}\r\n\t}\r\n}\r\n\telse if(controllertype[i]==\"ICC2\")\r\n{\r\n\tif (GetValueNum(\"Botton.TimeFormat\")==1)\r\n\t{\r\n\t\tdouble Modify =GetValueNum(index+\".SetControllerTimeAndDate_12Hour_Command\")+(12*GetValueNum(index+\".ControlInfo_meridian\"));\r\n\t\tif (Modify==24)\r\n\t\t{\r\n\t\t\tSetValueNum(index+\".SetControllerGlobals_Hours_Command\",0);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tSetValueNum(index+\".SetControllerGlobals_Hours_Command\",Modify);\r\n\t\t}\r\n\t}\r\n}\r\nelse if(controllertype[i]==\"ACC1\")\r\n{\r\n\tif (GetValueNum(\"Botton.TimeFormat\")==1)\r\n\t{\r\n\t\tdouble Modify =GetValueNum(index+\".SetControllerTimeAndDate_12Hour_Command\")+(12*GetValueNum(index+\".ControlInfo_meridian\"));\r\n\t\tif (Modify==24)\r\n\t\t{\r\n\t\t\tSetValueNum(index+\".SetControllerGlobals_Hours_Command\",0);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tSetValueNum(index+\".SetControllerGlobals_Hours_Command\",Modify);\r\n\t\t}\r\n\t}\r\n\t\r\n}\t\r\n//------------------------------------------------------------------------------------Learn Flow\t-------------------------------------------------------------------------------------------\r\n\t\r\n\tif (GetValueNum(\"Botton.TimeFormat\")==1)\r\n\t{\r\n\t\tdouble Modify =GetValueNum(index+\".SetLearnFlowStartTime_12Hour_Command\")+(12*GetValueNum(index+\".LearnFlow_Meridian\"));\r\n\t\tif (Modify==24)\r\n\t\t{\r\n\t\t\tSetValueNum(index+\".SetLearnFlowStartTime_UnixTimeHour_Command\",0);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tSetValueNum(index+\".SetLearnFlowStartTime_UnixTimeHour_Command\",Modify);\r\n\t\t}\r\n\t\t\r\n\t\tstring hours =ConvertTo12HourFormat((int)GetValueNum(index+\".ReportLearnFlowStatusInfo_StartTime_Hour_Status\"),ref LearnFlow_meridian,ref learnFlow_ReportMeridian ) ;\r\n\t\tSetValueStr(index+\".ReportLearnFlowStatusInfo_StartTime_12Hour_Status\",hours);\r\n\t\tSetValueNum(index+\".Report_LearnFlow_Meridian\",learnFlow_ReportMeridian);\r\n\t\t\r\n\t\thours =ConvertTo12HourFormat((int)GetValueNum(index+\".ReportLearnFlowStatusInfo_LastRunTime_Hour_Status\"),ref LearnFlow_meridian,ref learnFlow_ReportMeridian ) ;\r\n\t\tSetValueStr(index+\".ReportLearnFlowStatusInfo_LastRunTime_12Hour_Status\",hours);\r\n\t\tSetValueNum(index+\".Report_LearnFlow_lastRun_Meridian\",learnFlow_ReportMeridian);\r\n\t}\r\n\t\r\n\t//------------------------------------------------------------------------------------Current Module\t-------------------------------------------------------------------------------------------\r\nif(controllertype[i]==\"ACC1\")\r\n{\r\nint CurrnettwoByteInt = (int)GetValueNum(index+\".ReportADMStatus_StatusStatus\");\r\n\r\n\r\n        // Convert the integer to binary representation\r\n      //  string binaryRepresentation3 = Convert.ToString(twoByteInt3, 2).PadLeft(16, '0');\r\n\t\t\t\t int [] Bits3 = new int [20]; \r\n\t\t\t \t\r\n\t\t\t\t//SetValueStr(\".STR\",binaryRepresentation);\r\n        // Output the binary representation\r\n        //Console.WriteLine($\"Binary representation: {binaryRepresentation}\");\r\n\r\n        // Extract and output each bit\r\n        for (int k = 15; k >= 0; k--)\r\n        {\r\n            int bit = (CurrnettwoByteInt >> k) & 1;\r\n            //Console.Write($\"{bit} \");\r\n\t\t\t\t\tBits3[k]=bit;\r\n\t\t\t\t\t//SetValueNum(index+\".Report_DOWDays_Status_\"+(17-i).ToString(),bit);\r\n        }\r\nSetValueNum(index+\".CurrentModule_Watering_Status\",Bits3[0]);\r\nSetValueNum(index+\".CurrentModule_Path_Status\",Bits3[1]);\r\nSetValueNum(index+\".CurrentModule_Overload_Status\",Bits3[2]);\r\nSetValueNum(index+\".CurrentModule_Decoder_Fault\",Bits3[4]);\r\n\r\n}\r\n\t//SetValueNum(\"Script.ReportCounter\",8);//-----***************&&&&&&***\r\n\r\n//----------------------------------------------------------------------END SCHEDUEL--------------------------------------------------------------------------------------------------------------\r\n\r\n//----------------------------------------------------------------------------Hunter360 Script Lang & Unit----------------------------------------------------------------------------\r\n//SetValueNum(\"Script.ReportCounter\",8);//-----***************&&&&&&***\r\ndouble value = GetValueNum(index+\".ReportFieldControllerGlobals_Language_Status\");\r\nswitch (value)\r\n{\r\n    case 0:\r\n        SetValueStr(index+\".ReportFieldControllerGlobals_Language_String\",\"English\");\r\n        break;\r\n    case 1:\r\n        SetValueStr(index+\".ReportFieldControllerGlobals_Language_String\",\"Spanish\");\r\n        break;\r\n    case 2:\r\n        SetValueStr(index+\".ReportFieldControllerGlobals_Language_String\",\"French\");\r\n        break;\r\n\t\tcase 3:\r\n        SetValueStr(index+\".ReportFieldControllerGlobals_Language_String\",\"German\");\r\n        break;\r\n\t\tcase 4:\r\n        SetValueStr(index+\".ReportFieldControllerGlobals_Language_String\",\"Portuguese\");\r\n        break;\r\n\t\tcase 5:\r\n        SetValueStr(index+\".ReportFieldControllerGlobals_Language_String\",\"Italian\");\r\n        break;\r\n\t\tcase 6:\r\n        SetValueStr(index+\".ReportFieldControllerGlobals_Language_String\",\"Turkish\");\r\n        break;\r\n\t\tcase 7:\r\n        SetValueStr(index+\".ReportFieldControllerGlobals_Language_String\",\"Polish\");\r\n        break;\r\n\t\tcase 8:\r\n        SetValueStr(index+\".ReportFieldControllerGlobals_Language_String\",\"Czech\");\r\n        break;\r\n\t\tcase 9:\r\n        SetValueStr(index+\".ReportFieldControllerGlobals_Language_String\",\"Chinese\");\r\n        break;\r\n\t\tcase 10:\r\n        SetValueStr(index+\".ReportFieldControllerGlobals_Language_String\",\"Russian\");\r\n        break;\r\n\t\tcase 11:\r\n        SetValueStr(index+\".ReportFieldControllerGlobals_Language_String\",\"Arabic\");\r\n        break;\r\n\r\n}\r\n\r\n//---------------------------\r\n\tif(controllertype[i]==\"ACC2\")\r\n{\r\n double value2 = GetValueNum(index+\".ReportFieldControllerGlobals_Units_Status\") ;\r\n switch (value2)\r\n {\r\n    case 0:\r\n        SetValueStr(index+\".ReportFieldControllerGlobals_Units_String\",\"English\");\r\n        break;\r\n    case 1:\r\n        SetValueStr(index+\".ReportFieldControllerGlobals_Units_String\",\"Metric\");\r\n        break;\r\n }\r\n}\r\nelse if(controllertype[i]==\"ACC1\")\r\n{\r\n\tdouble value2 = GetValueNum(index+\".ReportControllerGlobals_Units_Status\") ;\r\n switch (value2)\r\n {\r\n    case 0:\r\n        SetValueStr(index+\".ReportFieldControllerGlobals_Units_String\",\"English\");\r\n        break;\r\n    case 1:\r\n        SetValueStr(index+\".ReportFieldControllerGlobals_Units_String\",\"Metric\");\r\n        break;\r\n }\r\n\t\r\n}\r\n\r\n//----------------------------------------------------------------------------Hunter360 Script Item Info----------------------------------------------------------------------------\r\n// this if to check if there is controller selected from the map so it will take this controller and continue with it \r\n\t\t// if there is controller selected will switch the controller and switch agai later ------>X\r\n\t\r\nif (GetValueStr(\"Script.MapControllerName\")!=\"0\")  \r\n{\r\n\tSwitchControllers = index ;\r\n\t\r\n\tindex= GetValueStr(\"Script.MapControllerName\");\r\n\tint selectedIndex = ControllersNamesList.IndexOf(index); // controllerNames = list returned from Controllers()\r\n\tif (selectedIndex >= 0 && selectedIndex < controllertype.Count)\r\n    {\r\n        selectedType = controllertype[selectedIndex];\r\n       // Console.WriteLine($\"Selected controller type: {selectedType}\");\r\n    }\r\n\t\r\n}\r\n// if not will continue with the iterational contrtroller \t\r\nelse\r\n{\r\n\tSwitchControllers = index ;\r\n}\r\n double value3 = GetValueNum(index+\".GetItemInformation_ItemType_Status\") ;\r\n switch (value3)\r\n {\r\n    case 1:\r\n        SetValueStr(index+\".GetItemInformation_ItemType_String\",\"Station\");\r\n        break;\r\n    case 2:\r\n        SetValueStr(index+\".GetItemInformation_ItemType_String\",\"PMV\");\r\n        break;\r\n\t\tcase 3:\r\n        SetValueStr(index+\".GetItemInformation_ItemType_String\",\"Decoder Sensor\");\r\n        break;\r\n }\r\n\r\n\r\n//----------------------------------------------------------------------------Hunter360 Script Flow Zone ----------------------------------------------------------------------------\r\n\tstring SetAlarmFormat;\r\n\tint ReportAlarmMin;\r\n\tint SetMin,SetHour,MainMin,SetSec;\r\nfor (int j=1 ; j < 7 ; j++)\r\n{\r\nint twoByteInt3 = (int)GetValueNum(index+\".ReportFlowZoneParameters_FlowSenMap_Status_FZ\"+j.ToString());\r\nint twoByteInt4 = (int)GetValueNum(index+\".ReportFlowZoneParameters_PmvMap_Status_FZ\"+j.ToString());\r\n\r\n        // Convert the integer to binary representation\r\n      //  string binaryRepresentation3 = Convert.ToString(twoByteInt3, 2).PadLeft(16, '0');\r\n\t\t\t\t int [] Bits3 = new int [20]; \r\n\t\t\t \tint [] Bits4 = new int [20];\r\n\t\t\t\t//SetValueStr(\".STR\",binaryRepresentation);\r\n        // Output the binary representation\r\n        //Console.WriteLine($\"Binary representation: {binaryRepresentation}\");\r\n\r\n        // Extract and output each bit\r\n        for (int k = 15; k >= 0; k--)\r\n        {\r\n            int bit = (twoByteInt3 >> k) & 1;\r\n\t\t\t\t\t\tint bit2 = (twoByteInt4 >> k) & 1;\r\n            //Console.Write($\"{bit} \");\r\n\t\t\t\t\tBits3[k]=bit;\r\n\t\t\t\t\tBits4[k]=bit2;\r\n\t\t\t\t\t//SetValueNum(index+\".Report_DOWDays_Status_\"+(17-i).ToString(),bit);\t\t\t\t\t\r\n     }\r\nSetValueNum(index+\".Report_FlowSenMap_Status_FZ\"+j.ToString()+\"_1\",Bits3[0]);\r\nSetValueNum(index+\".Report_FlowSenMap_Status_FZ\"+j.ToString()+\"_2\",Bits3[1]);\r\nSetValueNum(index+\".Report_FlowSenMap_Status_FZ\"+j.ToString()+\"_3\",Bits3[2]);\r\nSetValueNum(index+\".Report_FlowSenMap_Status_FZ\"+j.ToString()+\"_4\",Bits3[3]);\r\nSetValueNum(index+\".Report_FlowSenMap_Status_FZ\"+j.ToString()+\"_5\",Bits3[4]);\r\nSetValueNum(index+\".Report_FlowSenMap_Status_FZ\"+j.ToString()+\"_6\",Bits3[5]);\r\nSetValueNum(index+\".Report_FlowSenMap_Status_FZ\"+j.ToString()+\"_7\",Bits3[6]);\r\n\r\nSetValueNum(index+\".Report_PmvMap_Status_FZ\"+j.ToString()+\"_1\",Bits4[0]);\r\nSetValueNum(index+\".Report_PmvMap_Status_FZ\"+j.ToString()+\"_2\",Bits4[1]);\r\nSetValueNum(index+\".Report_PmvMap_Status_FZ\"+j.ToString()+\"_3\",Bits4[2]);\r\nSetValueNum(index+\".Report_PmvMap_Status_FZ\"+j.ToString()+\"_4\",Bits4[3]);\r\nSetValueNum(index+\".Report_PmvMap_Status_FZ\"+j.ToString()+\"_5\",Bits4[4]);\r\nSetValueNum(index+\".Report_PmvMap_Status_FZ\"+j.ToString()+\"_6\",Bits4[5]);\r\nSetValueNum(index+\".Report_PmvMap_Status_FZZ\"+j.ToString()+\"_7\",Bits4[6]);\r\n\t\r\n//\tSetValueNum(\"Script.ReportCounter\",10);//-----***************&&&&&&***\r\n\t//-------------------------------------------Report Alarm set Delay------------------\r\n\t ReportAlarmMin = (int)Stream.Tag.GetValueNum(index+\".ReportFlowZoneParameters_AlarmSetDelay_Status_FZ\"+j.ToString());  \r\n            \r\n \tsec = (int)ReportAlarmMin % 60;\r\n \tmin = (int)ReportAlarmMin / 60;\r\n\t SetAlarmFormat = $\"{min:D2}:{sec:D2}\";\r\n\tSetValueStr(index+\".ReportFlowZoneParameters_AlarmSetDelay_String_Status_FZ\"+j.ToString(),SetAlarmFormat);\r\n\t\r\n\t//-------------------------------------------Set Alarm set Delay---------------------\r\n\t\r\n SetMin=(int) GetValueNum(index+\".SetFlow_AlarmSetDelay_Command_Min_FZ\"+j.ToString());\r\n SetSec=(int) GetValueNum(index+\".SetFlow_AlarmSetDelay_Command_Sec_FZ\"+j.ToString());\r\n MainMin  = (int)SetSec + ((int)SetMin * 60 );\r\n SetValueNum(index+\".SetFlowZoneParameters_AlarmSetDelay_Command_FZ\"+j.ToString(),MainMin); \t\r\n\t\r\n\t\r\n\t//-------------------------------------------Report Alarm Clear Delay------------------\r\n\t ReportAlarmMin = (int)Stream.Tag.GetValueNum(index+\".ReportFlowZoneParameters_AlarmClearDelay_Status_FZ\"+j.ToString());  \r\n\tif (ReportAlarmMin ==0)\r\n\t{\r\n\t\tSetValueStr(index+\".ReportFlowZoneParameters_AlarmClearDelay_String_Status_FZ\"+j.ToString(),\"Manual\");\r\n\t}\r\n\telse\r\n\t{\r\n            \r\n \tmin = ((int)ReportAlarmMin % 3600)/ 60;\r\n \thour = (int)ReportAlarmMin / 3600;\r\n\t SetAlarmFormat = $\"{hour:D2}:{min:D2}\";\r\n\tSetValueStr(index+\".ReportFlowZoneParameters_AlarmClearDelay_String_Status_FZ\"+j.ToString(),SetAlarmFormat);\r\n\t\t\r\n\t}\r\n\t\r\n\t//-------------------------------------------Set Alarm Clear Delay---------------------\r\n\t\r\n SetMin=(int) GetValueNum(index+\".SetFlow_AlarmClearDelay_Command_Min_FZ\"+j.ToString());\r\n SetSec=(int) GetValueNum(index+\".SetFlow_AlarmClearDelay_Command_Sec_FZ\"+j.ToString());\r\n MainMin  = ((int)SetSec * 60)+ ((int)SetMin * 3600 );// cause this display as hr:min and send to controller as Sec\r\n SetValueNum(index+\".SetFlowZoneParameters_AlarmClearDelay_Command_FZ\"+j.ToString(),MainMin); \t\r\n\t\r\n\r\n\r\n\t\r\n\r\n\r\n}\r\n\t\r\n\t\r\n//------------------------------------------------------------------------------------Station Setting\t-------------------------------------------------------------------------------------------\r\n\t//##ACC2 && ACC1##\r\n\tdouble StationVal=0;\r\n\tif  (selectedType ==\"ACC1\")\r\n\t{\r\n\t\tStationVal=((GetValueNum(index+\".SetStationParameters_LearnedFlow_United\"))*10)/ GetValueNum(\"Botton.UnitScaleGPM\");\r\n\t  StationVal=  Math.Round(StationVal, 1);\r\n\t  SetValueNum(index+\".SetStationParameters_LearnedFlow_Command\",StationVal);\r\n\t}\r\n\telse if ((selectedType==\"ACC2\"))\r\n\t{\r\n\t  StationVal=(GetValueNum(index+\".SetStationParameters_LearnedFlow_United\"))/ GetValueNum(\"Botton.UnitScaleGPM\");\r\n\t  StationVal=  Math.Round(StationVal, 1);\r\n\t  SetValueNum(index+\".SetStationParameters_LearnedFlow_Command\",StationVal);\r\n\t\t//Console.WriteLine($\"ACC2 = {index} value = {StationVal.ToString()}\");\r\n\t}\r\n\t//Console.WriteLine(StationVal.ToString());\r\n\tif (GetValueNum(\"Botton.StationParameter_Trigger\")==1)\r\n\t{\r\n\t\t //StationVal=(GetValueNum(index+\".SetStationParameters_LearnedFlow_United\"))/ GetValueNum(\"Botton.UnitScaleGPM\");\r\n\t  //StationVal=  Math.Round(StationVal, 1);\r\n\t\t//SetValueNum(index+\".SetStationParameters_LearnedFlow_Command\",StationVal);\r\n\t\tSetValueNum(index+\".SetStationParameters_Trigger\",1);\r\n\t\tawait Task.Delay (50);\r\n\t\tSetValueNum(index+\".ReportStationParameters_Trigger\",1);\r\n\t\tSetValueNum(\"Botton.StationParameter_Trigger\",0);\r\n\t}\r\n\t\r\n //----------------------------------------------------Set Cycle and Soak -------------------------------------- \r\n//##ACC2 && ACC1##\r\n SetMin=(int) GetValueNum(index+\".SetStationParameters_CycleTime_Min_Command\");\r\n SetHour=(int) GetValueNum(index+\".SetStationParameters_CycleTime_Hour_Command\");\r\n MainMin  = (int)SetMin + ((int)SetHour * 60 );\r\n SetValueNum(index+\".SetStationParameters_CycleTime_Command\",MainMin);\r\n\t// Soak\r\n SetMin=(int) GetValueNum(index+\".SetStationParameters_SoakTime_Min_Command\");\r\n SetHour=(int) GetValueNum(index+\".SetStationParameters_SoakTime_Hour_Command\");\r\n MainMin  = (int)SetMin + ((int)SetHour * 60 );\r\n SetValueNum(index+\".SetStationParameters_SoakTime_Command\",MainMin);\r\n\t\t\t\t\t\t\t   \t\t\t\t\t\r\n\t//----------------------------------------------------Report Cycle and Soak -------------------------------------- \r\n\t//##ACC2 && ACC1##\r\n\tstring delayFormat;\r\n\tint ReportMin = (int)Stream.Tag.GetValueNum(index+\".ReportStationParameters_CycleTime_Status\");  \r\n\tif (ReportMin > 0)\r\n\t{            \r\n \tsec = (int)ReportMin % 60;\r\n \tmin = (int)ReportMin / 60;\r\n\t delayFormat = $\"{min:D2}:{sec:D2}\";\r\n\tSetValueStr(index+\".ReportStationParameters_CycleTime_String_Status\",delayFormat);\r\n\t}\r\n\telse if (ReportMin == 0)\r\n\t{\r\n\t\tSetValueStr(index+\".ReportStationParameters_CycleTime_String_Status\",\"OFF\");\r\n\t}\r\n\t// Soak  \r\n\tReportMin = (int)Stream.Tag.GetValueNum(index+\".ReportStationParameters_SoakTime_Status\"); \r\n\tif (ReportMin > 0)\r\n\t{           \r\n \tsec = (int)ReportMin % 60;\r\n \tmin = (int)ReportMin / 60;\r\n\t delayFormat = $\"{min:D2}:{sec:D2}\";\r\n\tSetValueStr(index+\".ReportStationParameters_SoakTime_String_Status\",delayFormat);\r\n\t}\r\n\telse if (ReportMin == 0)\r\n\t{\r\n\t\tSetValueStr(index+\".ReportStationParameters_SoakTime_String_Status\",\"OFF\");\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t//----------------------------------------------------Report Flow Delay-------------------------------------- \r\n\t/*\r\n\tdelaySec = (int)Stream.Tag.GetValueNum(index+\".ReportStationParameters_FlowDelay_Status\");\r\n                \r\n \tsec = (int)delaySec % 60;\r\n \tmin = (int)delaySec / 60;\r\n\tstring delayFormat = $\"{min:D2}:{sec:D2}\";\r\n\tSetValueStr(index+\".ReportStationParameters_FlowDelay_String\",delayFormat);\r\n\t//------\r\n\tint SetDelayMin,SetDelaySec;\r\n StartWaterMin=(int) GetValueNum(index+\".Set_NWWStart_Command_Min\");\r\n StartWaterHour=(int) GetValueNum(index+\".Set_NWWStart_Command_Hour\");\r\n StartMin  = (int)StartWaterMin + ((int)StartWaterHour * 60 );\r\nSetValueNum(index+\".SetControllerProgramHeaderData_NWWStart_Command\",StartMin);\r\n*/\t\r\n\t\r\n//----------------------------------------------------Stop Station ACC1-------------------------------------- \r\n\tif (selectedType==\"ACC1\")\r\n\t{\r\n\t\tif (GetValueNum(ACC1Selected+\".StopDeleteStations_Check\")==1)\r\n\t\t{\r\n\t\t\tACC1StopStation(ACC1Selected);\r\n\t\t}\r\n\t\t\r\n\t\tif (GetValueNum(ACC1Selected + \".ControllerETUsageSettings_UseSensor_Enable\")==1)\r\n\t\t{\r\n\t\t  ACC1SolarSettingEnable(ACC1Selected);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\t\r\nindex = SwitchControllers   ;  //------>X switch back to the iterational Conntroller \r\n//----------------------------------------------------------------------------Hunter360 Script Manual Op ----------------------------------------------------------------------------\r\n//SetValueNum(\"Script.ReportCounter\",11);//-----***************&&&&&&***\r\nif(controllertype[i]==\"ICC2\")\r\n{ \r\n\tif (GetValueNum(index+\".StartSingleManualStation_StationNumber\")>0)\r\n\t{\r\n\t\tint station = (int)GetValueNum(index+\".StartSingleManualStation_StationNumber\") - 1;\r\n\t\tSetValueNum(index+\".StartSingleManualStation_StationNumber_Command\",station);\r\n\t}\r\n  double RumTimeicc2 = GetValueNum(index+\".Start_RunTime_Command\")*60;\r\n\tSetValueNum(index+\".StartSingleManualStation_RunTime_Command\",RumTimeicc2);\r\n}\r\nelse if (controllertype[i]==\"ACC2\")\r\n{\r\n\tdouble RumTime = (GetValueNum(index+\".Start_RunTime_Command\")*60) + GetValueNum(index+\".Start_RunTime_Sec_Command\");\r\n\tSetValueNum(index+\".StartSingleManualEvent_RunTime_Command\",RumTime);\r\n\t\r\n}\r\nelse if (controllertype[i]==\"ACC1\")\t\r\n{\t\r\n\tdouble RumTime = GetValueNum(index+\".Start_RunTime_Command\")*60;\r\n\tSetValueNum(index+\".StartSingleManualStation_RunTime_Command\",RumTime);\r\n\t\r\n\tint Value1 = (int)GetValueNum(index+\".StartPoint\")-1;\r\n\t\t SetValueNum(index+\".StartManualAllStations_StartPoint_Command\",Value1);\r\n\t\r\n if ((GetValueNum(index+\".DeviceID\")==0)&&(GetValueNum(index+\".DeviceNum\")>0))\r\n\t{\r\n\t\tint Value = (int)GetValueNum(index+\".DeviceNum\")-1;\r\n\t\t SetValueNum(index+\".StartSingleManualStation_StationNumber_Command\",Value);\r\n\t}\r\n else if (GetValueNum(index+\".DeviceID\")==1)\r\n\t{\r\n\t\tint Value = (int)GetValueNum(index+\".DeviceNum\")+511;\r\n\t\t SetValueNum(index+\".StartSingleManualStation_StationNumber_Command\",Value);\r\n\t}\r\n\telse if (GetValueNum(index+\".DeviceID\")==2)\r\n\t{\r\n\t\tint Value = (int)GetValueNum(index+\".DeviceNum\")+239;\r\n\t\t SetValueNum(index+\".StartSingleManualStation_StationNumber_Command\",Value);\r\n\t}\t\r\n\t\t\r\n\t\r\n}\r\n\t\r\n\t\r\n\t\t\r\n//SetValueNum(\"Script.ReportCounter\",12);//-----***************&&&&&&***\r\n//----------------------------------------------------------------------------Hunter360 Script irrigation Status ----------------------------------------------------------------------------#######\r\n\r\ndouble TotalFlowZonesj = GetValueNum(index+\".ReportFlowZoneMonitoringData_StaRunning_Status_FZ1\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_StaRunning_Status_FZ2\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_StaRunning_Status_FZ3\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_StaRunning_Status_FZ4\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_StaRunning_Status_FZ5\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_StaRunning_Status_FZ6\");\r\nSetValueNum(index+\".Toal_Active_FlowZone\",TotalFlowZonesj);\r\n\r\n\r\ndouble TotalPVMj = GetValueNum(index+\".ReportActiveStations_Pmv1_Status\")+GetValueNum(index+\".ReportActiveStations_Pmv2_Status\")+GetValueNum(index+\".ReportActiveStations_Pmv3_Status\")+GetValueNum(index+\".ReportActiveStations_Pmv4_Status\")+GetValueNum(index+\".ReportActiveStations_Pmv5_Status\")+GetValueNum(index+\".ReportActiveStations_Pmv6_Status\");\r\nSetValueNum(index+\".Total_PMV\",TotalPVMj);\r\nif (controllertype[i]==\"ACC2\")\t\r\n{\t\r\n\t\r\n double TotalStationj =0;\r\n for(int j=1 ;j<226 ;j++)\r\n {\r\n\tTotalStationj +=GetValueNum(index+\".ReportActiveStations_Stn\"+j.ToString()+\"_Status\");\r\n\r\n }\r\n SetValueNum(index+\".Total_Stations\",TotalStationj);\r\n}\r\nelse if (controllertype[i]==\"ACC1\")\t\r\n{\r\n\t\r\n//this for the flow icon \r\n\t\tif (GetValueNum(index+\".ReportCurrentFlow_FSen1FlowRate_Status\") > 1)\r\n\t{\r\n\t\tSetValueNum(index+\".ReportFlowZoneMonitoringData_StaActive_Status_FZ1\",1);\r\n\t}\r\n\telse \r\n\t{\r\n\t\tSetValueNum(index+\".ReportFlowZoneMonitoringData_StaActive_Status_FZ1\",0);\r\n\t}\r\n//----\r\n\tdouble TotalStationj =0;\r\n for(int j=1 ;j<226 ;j++)\r\n {\r\n\tTotalStationj +=GetValueNum(index+\".ReportActiveStations_Stn\"+j.ToString()+\"_Status\");\r\n\r\n }\r\n SetValueNum(index+\".Total_Stations\",TotalStationj);\t\r\n}\r\n\r\n\r\n//----------------------------------------------------------------------------Hunter360 Script Solar Sync Communication Time ----------------------------------------------------------------------------\r\n\r\nstring CommunicationTime ;\r\n\r\n\r\nCommunicationTime = GetValueNum(index+\".ReportLatestWeatherSensorData_LastCommTimeYear_Status\").ToString() + \"-\" + GetValueNum(index+\".ReportLatestWeatherSensorData_LastCommTimeMonth_Status\").ToString() + \"-\" + GetValueNum(index+\".ReportLatestWeatherSensorData_LastCommTimeDay_Status\").ToString()  + \" \" + GetValueNum(index+\".ReportLatestWeatherSensorData_LastCommTimeHour_Status\").ToString()  + \":\" + GetValueNum(index+\".ReportLatestWeatherSensorData_LastCommTimeMinute_Status\").ToString()  ;\r\n\r\nSetValueStr(index+\".ReportLatestWeatherSensorData_LastCommTimeDate_Status\",CommunicationTime);\r\n\r\n//-----------------------------------------------------------------------------TimeStamp------------------------------------------------------\r\n\r\n\r\n//\tSetValueNum(\"Script.ReportCounter\",14);//-----***************&&&&&&***\r\nif(controllertype[i]==\"ICC2\")\r\n{\r\n//----------------------------------------------------------------------------Hunter360 Script ICC2 Dial Position ----------------------------------------------------------------------------\r\n\r\n\r\nint pvalue =(int) GetValueNum(index+\".ReportControllerGlobals_RotaryKnob_Status\");\r\nswitch (pvalue)\r\n{\r\n    case 0:\r\n        SetValueStr(index+\".Dial_Position\",\"       Unknown\");\r\n        break;\r\n    case 1:\r\n        SetValueStr(index+\".Dial_Position\",\"     RUN\");\r\n        break;\r\n    case 2:\r\n        SetValueStr(index+\".Dial_Position\",\"        DATE/TIME\");\r\n        break;\r\n    case 3:\r\n        SetValueStr(index+\".Dial_Position\",\"        START TIMES\");\r\n        break;\r\n\t  case 4:\r\n        SetValueStr(index+\".Dial_Position\",\"        RUN TIMES\");\r\n        break;\r\n    case 5:\r\n        SetValueStr(index+\".Dial_Position\",\"        WATER DAYS\");\r\n        break;\r\n    case 6:\r\n        SetValueStr(index+\".Dial_Position\",\"       PUMP \");\r\n        break;\r\n\t  case 7:\r\n        SetValueStr(index+\".Dial_Position\",\"      SEASONAL ADJUST\");\r\n        break;\r\n    case 8:\r\n        SetValueStr(index+\".Dial_Position\",\"        SOLAR SYNC\");\r\n        break;\r\n    case 9:\r\n        SetValueStr(index+\".Dial_Position\",\"        MANUAL\");\r\n        break;\r\n\t  case 10:\r\n        SetValueStr(index+\".Dial_Position\",\"        SYSTEM OFF\");\r\n        break;\r\n}\r\n\r\n//SetValueNum(\"Script.ReportCounter\",15);//-----***************&&&&&&***\r\n\t\r\n//----------------------------------------------------------------------------Hunter360 ICC2 Flow ----------------------------------------------------------------------------\r\n\r\nDateTime Prev,now ;\r\n \r\nfor (int j=0 ; j<=12;j++)\r\n{\r\n\tlong epochTimestamp = (long)GetValueNum(index+\".ReportFlowRates_Timestamp_Status_\"+j.ToString());\r\n\t// Convert the epoch timestamp to a DateTime object in GMT+3\r\n     DateTime dateTime = DateTimeOffset.FromUnixTimeSeconds(epochTimestamp).AddHours(3).DateTime;\r\n\r\n\r\n}\t\r\n//----------------------------------------------------------------------------Hunter360 ICC2 Remaining RunTime ----------------------------------------------------------------------------\r\n\t//SetValueNum(\"Script.ReportCounter\",16);//-----***************&&&&&&***\r\n\tfor(int run =1 ;run <=2 ;run++)\r\n{\t\r\n\tstring runstation =run.ToString();\r\n\tint RemainingRunTime  = (int)Stream.Tag.GetValueNum(index+\".ReportControllerType_Station\"+runstation+\"Runtime_Status\");\r\n  TimeSpan timeSpan = TimeSpan.FromSeconds(RemainingRunTime);\r\n   SetValueStr(index+\".ReportControllerType_Station\"+runstation+\"Runtime_String\" ,timeSpan.ToString(@\"hh\\:mm\\:ss\"));\r\n}\r\n//------------------------------------------------------------------------------------------Mass command-------------------------------------------------------------------------------------------\r\n\r\n//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\H360\\index.txt\",\"==\"+index);\r\n\r\n} \r\n//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive\\Desktop\\Work\\Hunter\\App v2.0\\H360\\test.txt\",i.ToString());\r\n\r\n\r\n\r\nMASS_Command = GetValueNum(\"DashBoard.SystemOperationActions_Auto\")+GetValueNum(\"DashBoard.SystemOperationActions_Shutdown\")+GetValueNum(\"DashBoard.SystemOperationActions_StopIrrigation\")+GetValueNum(\"DashBoard.SystemDaysOff_Trigger\")+GetValueNum(\"DashBoard.SystemGlobalSeasAdj_Trigger\")+GetValueNum(\"DashBoard.SystemSuspend_Apply\")+GetValueNum(\"DashBoard.SystemSuspend_Cancel\")+GetValueNum(\"DashBoard.SystemPause_Apply\")+GetValueNum(\"DashBoard.SystemPause_Cancel\")+GetValueNum(\"DashBoard.SystemOperationActions_StopIrrigation_ICC2\")+GetValueNum(\"DashBoard.SystemDaysOff_Trigger_ICC2\")+GetValueNum(\"DashBoard.SystemGlobalSeasAdj_Trigger_ICC2\")+GetValueNum(\"DashBoard.SystemDaysOff_Cancel_ICC2\") + GetValueNum(\"DashBoard.SystemOperationActions_Auto_ACC1\") +GetValueNum(\"DashBoard.SystemOperationActions_StopIrrigation_ACC1\") + GetValueNum(\"DashBoard.SystemDaysOff_Trigger_ACC1\") +GetValueNum(\"DashBoard.SystemGlobalSeasAdj_Trigger_ACC1\") + GetValueNum(\"DashBoard.SystemSuspend_Apply_ACC1\") + GetValueNum(\"DashBoard.SystemSuspend_Cancel_ACC1\") + GetValueNum(\"DashBoard.SystemPause_Apply_ACC1\") + GetValueNum(\"DashBoard.SystemPause_Cancel_ACC1\") ;\r\n//-------------------------------------------------------------------------------------------END LOOP------------------------------------------------------\r\n//SetValueNum(\"Script.ReportCounter\",17);//-----***************&&&&&&***\r\n\t\r\n\t//SetValueNum(\"Script.Counter\",GetValueNum(\"Script.Counter\")+1);\r\n}\r\n} \r\nSetValueNum(\"Script.GeneralCheck\",0);\t\r\n}\r\n//*********************************************************************************************** After Loop ********************************************************************************************\r\n\r\n//-------------------------------------------------------------------------------------------Alarm Analysis--------------------------------------------------------------------------------------------\r\n//stopwatch.Restart();\r\nif (GetValueNum(\"DashBoard.SystemResetAlarm_Bool\")==1)\r\n\t{\r\n\t\tSetValueStr(\"DashBoard.SystemResetAlarm_Str\",Date.AddDays(-1).ToString(\"yyyy-MM-dd\"));\r\n\t\tSetValueNum(\"DashBoard.SystemResetAlarm_Bool\",0);\r\n\t}\r\nif (GetValueStr(\"DashBoard.SystemResetAlarm_Str\")!=\"0\")\r\n\t{\r\n\t\tstring RestDate = GetValueStr(\"DashBoard.SystemResetAlarm_Str\"); \r\n\t\tStartDate = \"'\"+RestDate+\"'\";\t\r\n\t}\r\nelse\r\n\t{\r\n\t\tStartDate = \"'\"+Date.AddDays(-30).ToString(\"yyyy-MM-dd\")+\"'\";\r\n\t}\t\r\n\t\r\n\r\nif (GetValueNum(\"Botton.schedule_Blinkup\")==0)\r\n{\r\n\tAlarmAnalysisCount[0] = 0;\r\n  AlarmAnalysisCount[1] = 0;\r\n\t\r\nstring query6 = \"SELECT State, COUNT(*) AS Count FROM AlarmDB WHERE AlarmTime BETWEEN\"+StartDate +\"AND\" + EndDate+ \"GROUP BY State;\";\r\n  ReadFromSQL(query6,AlarmAnalysisCount);\r\n\t\r\n  totalAlarmAnalysisCount[0] =AlarmAnalysisCount[0];\r\n  totalAlarmAnalysisCount[1] =AlarmAnalysisCount[1];\r\n\t\r\n\t//Console.WriteLine($\"zero= {totalAlarmAnalysisCount[0].ToString()}\");\r\n\t//Console.WriteLine($\"one= {totalAlarmAnalysisCount[1].ToString()}\");\r\n}\r\n\r\n\r\n\r\n//------------------------------------------------------------------------------------------Mass Commands-------------------------------------------------------------------------------------------\r\n//     System Operation Actions--------------------------------------------------------------------------------------> Check With ENG Adel//\r\n\t\r\n\r\n\r\nif (MASS_Command >0 )\r\n{\r\n\tif (GetValueNum(\"Botton.schedule_BlinkDown\")==0)\r\n\t{ \r\n\t\t//stopwatch.Restart();\r\n\t\tDashBoardMassCommands();\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\H360\\test.txt\",day.ToString());\r\n//---------------------------------------------------------------------------- DashBoard Flow Total  -----------------------------------------------------------------------\r\n//check if need condition at time or hour\r\n\r\n//Runs Every hour Async\r\nif (GetValueNum(\"Script.SystemDashBoardTotalFlow\")==1)\r\n{\r\nDashBoardFlowTotal();\r\n}\r\n//---------------------------------------------------------------------------- ACC2 Flow Total  -----------------------------------------------------------------------\r\nif (GetValueNum(\".test3\")==0)\r\n{\r\nFlowTotal();\r\n}\r\n//---------------------------------------------------------------------------- ICC2 Flow Total  -----------------------------------------------------------------------\r\n\r\nif (GetValueNum(\"Script.ICC2TotalFlow\")==0)\r\n{\r\nICC2FlowTotal();\r\n}\r\n\r\n\r\n//---------------------------------------------------------------------------- ICC2 Flow Rate  -----------------------------------------------------------------------\r\n\r\nif (GetValueNum(\"Script.ICC2Flow\")==0)\r\n{\r\nICC2FlowRateCalc();\r\n}\r\n\r\nif (GetValueNum(\"Script.ACC1TotalFlow\")==0)\r\n{\r\nACC1FlowTotal();\r\n}\r\n\r\n\r\n\r\n//\tFile.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\Historical\\After.txt\",\"p\" +\"---> \"+DashBoadrdDay.ToString()+Environment.NewLine);\r\n\r\n\r\n\r\nSetValueNum(\"DashBoard.SystemControllerStatus_Irrigating\",IrrigationSum);   //Controller Status irrigation\r\nSetValueNum(\"DashBoard.SystemControllersStatus_Alarmed\",AlarmedControllersSum);  //Controllers Status Alarmed \r\nSetValueNum(\"DashBoard.SystemOnlineControllers\",OnlineControllers); // Controllers Online Status          //Eng Ayman should set the Datasource with the status tag//\r\nSetValueNum(\"DashBoard.SystemTotalStations\",TotalStation); // Controllers Total Stations  \r\nSetValueNum(\"DashBoard.SystemTotalStation_Max\",TotalStationMax); // Controllers Max Stations Size  \r\nSetValueNum(\"DashBoard.SystemTotalPVM\",TotalPVM); // Controllers Total PVM  \r\nSetValueNum(\"DashBoard.SystemTotalPMV_Max\",TotalPVMMax); // Controllers Total Max PVM \r\n\r\n//Top 10 Alrmed Contollers\r\nOrderArray(TopAlarmedConttrollersName,TopAlarmedConttrollers);\r\nSetValueNum(\"AlarmAna.SystemMaxAlarms\",TopMaxAlarm);\r\nif(GetValueNum(\"AlarmAna.SystemMaxAlarms\")==0)\r\n{\r\n\tSetValueNum(\"AlarmAna.SystemMaxAlarms\",1);\r\n\tSetValueNum(\"Botton.ResetAllControllersCounters\",0);//when resetbutton is 1\r\n}\r\n\r\n\r\n for (int i=0;i<10;i++)\r\n\t{\r\n\t\tSetValueStr (\"AlarmAna.SystemTagName\"+i.ToString(),TopAlarmedConttrollersName[i]);\r\n\t\tSetValueNum (\"AlarmAna.SystemValue\"+i.ToString(),TopAlarmedConttrollers[i]);\r\n\r\n\t}\r\n\r\n//Max Flow Sensor\r\nMaxFlowSensor = 6* GetValueNum(\"DashBoard.SystemControllertNUM\");\r\ndouble Scale = GetValueNum(\"Botton.UnitScaleGPM\");\r\n\r\nSetValueNum(\"DashBoard.System_FlowZone_Alarmed\",TotalFZAlarms);       //Discharge FZ Alarmed\r\nSetValueNum(\"DashBoard.System_FlowZone_Active\",TotalActiveFZAlarms); //Discharge Active FZ Alarmed\r\nSetValueNum(\"DashBoard.System_FlowZone_TotalFlow\",TotalDschFlowTotal*Scale);//Discharge FlowTotal\r\nSetValueNum(\"DashBoard.System_FlowZone_MaxNumOFSensor\",MaxFlowSensor);//Max Flow Sensor\r\nSetValueNum(\"DashBoard.System_FlowZone_MaxFlow\",MaxFlowSensor*800);//Max FlowTotal---------------------------------------------------------> **  // Ask Aded//**\r\n/*\r\nSetValueNum(\"DashBoard.System_FlowTotal_Daily\",DashBoadrdDay);//Tolat Daily Flow \r\nSetValueNum(\"DashBoard.System_FlowTotal_Weekly\",DashBoadrdWeek);//Tolat Daily Flow \r\nSetValueNum(\"DashBoard.System_FlowTotal_Monthly\",DashBoadrdMonth);//Tolat monthly Flow \r\nSetValueNum(\"DashBoard.System_FlowTotal_Yearly\",DashBoadrdYear);//Tolat yearly Flow \r\n*/\r\nSetValueNum(\"AlarmAna.SystemActANDClrNum0\",totalAlarmAnalysisCount[0]);//Alarm anaysis the Acrive Alarms\r\nSetValueNum(\"AlarmAna.SystemActANDClrNum1\",totalAlarmAnalysisCount[1]);//Alarm anaysis the Cleared Alarms\r\nSetValueNum(\"DashBoard.SystemWaterSourceFlow\",WaterSourceFlow*Scale);//Water Source Flow\r\ndouble TotalCurrentDrawScaled =TotalCurrentDraw/1000;\r\nSetValueNum(\"DashBoard.SystemCurrentDraw_Total\",TotalCurrentDrawScaled);//CurrentDraw_Total\r\nSetValueNum(\"DashBoard.SystemCurrentDraw_Max\",4*GetValueNum(\"DashBoard.SystemControllertNUM\")); //------------------------------------------------> **  // Ask Aded//**\r\n/*\r\n//---------------------------Mass Commands------------------------------------------\r\nif (Flag==1)\r\n{\r\n\tSetValueNum(\"DashBoard.SystemOperationActions_Auto\",0);\r\n\tSetValueNum(\"DashBoard.SystemOperationActions_Shutdown\",0);\r\n\tSetValueNum(\"DashBoard.SystemOperationActions_StopIrrigation\",0);\r\n\tSetValueNum(\"DashBoard.SystemDaysOff_Trigger\",0);\r\n\tSetValueNum(\"DashBoard.SystemGlobalSeasAdj_Trigger\",0);\r\n\tSetValueNum(\"DashBoard.SystemSuspend_Apply\",0);\r\n\tSetValueNum(\"DashBoard.SystemSuspend_Cancel\",0);\r\n\tSetValueNum(\"DashBoard.SystemPause_Apply\",0);\r\n\tSetValueNum(\"DashBoard.SystemPause_Cancel\",0);\r\n\tSetValueNum(\"DashBoard.SystemOperationActions_StopIrrigation_ICC2\",0);\r\n\tSetValueNum(\"DashBoard.SystemDaysOff_Trigger_ICC2\",0);\r\n\tSetValueNum(\"DashBoard.SystemGlobalSeasAdj_Trigger_ICC2\",0);\r\n\tSetValueNum(\"DashBoard.SystemDaysOff_Cancel_ICC2\",0);\r\n\t//ACC1\r\n\tSetValueNum(\"DashBoard.SystemOperationActions_Auto_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SystemOperationActions_StopIrrigation_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SystemDaysOff_Trigger_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SystemGlobalSeasAdj_Trigger_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SystemSuspend_Apply_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SystemSuspend_Cancel_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SystemPause_Apply_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SystemPause_Cancel_ACC1\",0);\r\n\t\r\n\t\r\n\t\r\n}\r\n*/\r\n\r\n\r\n\r\n\r\n//===============================================================================================Functions===================================================================================\r\n\r\n//first num of cotrollers in the site i will take the name of contollers in the list\r\n//-------------------------------------------------------------------------------------- Contollers-------------------------------------------------------------------------\r\n\r\npublic List<string> Controllers ()\r\n{\r\n string filePath=Stream.Application.GetAppPath()+@\"\\H360\\controllers.json\";\r\n if (!File.Exists(filePath))\r\n    {\r\n     // You can handle this situation, throw an exception, or return an empty list.\r\n       return new List<string>() ;\r\n    }\r\n string json = File.ReadAllText(filePath);\r\n      \r\n\tList<Controller> controllers = JsonConvert.DeserializeObject<List<Controller>>(json);\r\n\r\n            List<string> controllerNames = new List<string>();\r\n            \r\n\r\n            foreach (Controller controller in controllers)\r\n            {\r\n                if(controller != null)\r\n                {\r\n                    controllerNames.Add(controller.ControllerName);\r\n                    controllertype.Add(controller.ControllerType);\r\n\t\t\t\t\t\t\t\t\t\tcontrollerLabel.Add(controller.ControllerLabel);\r\n                }\r\n            }\r\n\r\n\t\t\t\t\t\treturn controllerNames;\r\n\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------------------Top Alarmed controllers  --------------------------------------------------------------------------\r\n\r\nstatic int PackBooleansIntoInt(double[] boolValues)\r\n    {\r\n       \r\n        int packedInt = 0;\r\n\r\n        for (int i = 0; i < boolValues.Length; i++)\r\n        {\r\n            // Shift the existing bits to the left\r\n            packedInt <<= 1;\r\n\r\n            // Set the least significant bit based on the boolean value\r\n            if (boolValues[i]==1)\r\n            {\r\n                packedInt |= 1;\r\n            }\r\n        }\r\n\r\n        return packedInt;\r\n    }\r\nstatic int CountSetBits(int value)\r\n    {\r\n        int count = 0;\r\n\r\n        while (value != 0)\r\n        {\r\n            // Increment count if the least significant bit is set (1)\r\n            count += value & 1;\r\n\r\n            // Right shift the bits to check the next bit\r\n            value >>= 1;\r\n        }\r\n\r\n        return count;\r\n    }\r\n//-------------------------------------------------------------------------------------Alarm Analysis---------------------------------------------------------------------------------------------\r\npublic async Task ReadFromSQL (string Query,int[] Value)\r\n{\r\n\tSetValueNum(\"Botton.schedule_Blinkup\",1);\r\n\r\n        // Specify the path to the SQLite database file\r\n\t\t\t\t\t\t\t\t\tstring filePath = Stream.Application.GetAppPath()+@\"\\Historical\\Alarms.log\";\r\n                // Create a connection to the SQLite database\r\n\t\t\t\t\t\t\tif (!File.Exists(filePath))\r\n               {\r\n                    // You can handle this situation, throw an exception, or return an empty list.\r\n                     return ;\r\n               }\r\n                using (SQLiteConnection connection = new SQLiteConnection($\"Data Source={filePath};Version=3;\"))\r\n                {\r\n                    connection.Open();\r\n\r\n                    // Specify your SQL query\r\n\t\t\t\t\t\t\t\t\t\t\tstring query = Query;\r\n                 \r\n\r\n                    // Create a command object to execute the query\r\n                    using (SQLiteCommand command = new SQLiteCommand(query, connection))\r\n                    {\r\n\t\t\t\t\t\t\t\t\r\n                        // Execute the query and read data from the database\r\n                        using (SQLiteDataReader reader = command.ExecuteReader())\r\n                        {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Create a list to store the data from the query\r\n                            List<string[]> data = new List<string[]>();\r\n\r\n                            while (reader.Read())\r\n                            {\r\n                               data.Add(new string[] { reader[0].ToString(), reader[1].ToString() });\r\n                               // Console.WriteLine(reader[0] +\",\"+ reader[1] + \",\" + reader[2]);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\tSetValueStr(\".SQLTEST\",reader[0] +\",\"+ reader[1]);\r\n                            }\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Iterate over the list and print each line to the console\r\n                            for (int i = 0; i < data.Count; i++)\r\n                            {\r\n                              //  Console.WriteLine(data[i][0] + \",\" + data[i][1]);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tValue[i] += int.Parse(data[i][1]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\t\r\n\t\r\nSetValueNum(\"Botton.schedule_Blinkup\",0);\r\n        }\r\n//---------------------------------------------------------------------------------------------order the array---------------------------------------------------------------------------------\r\n void OrderArray (string[] stringArray, double[] intArray)\r\n            { \r\n\r\n            double[] orderedIntArray = new double[intArray.Length];\r\n            string[] orderedStringArray = new string[stringArray.Length];\r\n\r\n            for (int i = 0; i < intArray.Length; i++)\r\n            {\r\n                int maxIndex = i;\r\n                for (int j = i + 1; j < intArray.Length; j++)\r\n                {\r\n                    if (intArray[j] > intArray[maxIndex])\r\n                    {\r\n                        maxIndex = j;\r\n                    }\r\n                }\r\n\r\n                if (maxIndex != i)\r\n                {\r\n                    double temp = intArray[i];\r\n                    string tempString = stringArray[i];\r\n\r\n                    intArray[i] = intArray[maxIndex];\r\n                    stringArray[i] = stringArray[maxIndex];\r\n\r\n                    intArray[maxIndex] = temp;\r\n                    stringArray[maxIndex] = tempString;\r\n                }\r\n            }\r\n\r\n            orderedStringArray = stringArray;\r\n            orderedIntArray = intArray;\r\n            }\r\n\r\n\r\n//---------------------------------------------------------------------------------------------Convert 12 Hour Format--------------------------------------------------------------------------------\r\n\r\npublic string ConvertTo12HourFormat(int hour,ref string meridian,ref int ReportMeridian )\r\n    {\r\n        // Adjust hour to be in the range of 0 to 23\r\n        hour = hour % 24;\r\n\r\n        // Determine whether it's AM or PM\r\n          meridian = (hour < 12) ? \"AM\" : \"PM\";\r\n\t\t\t\t\tReportMeridian = (hour < 12) ? 0 : 1;\r\n\t\t\t\t//SetValueStr(Meridian,meridian);\r\n        // Convert hour to 12-hour format\r\n        int hour12 = (hour == 0 || hour == 12) ? 12 : hour % 12;\r\n\r\n        // Build the formatted string\r\n        string formattedHour = hour12.ToString(\"D2\");\r\n\r\n        return formattedHour;\r\n    }\r\n\r\n//---------------------------------------------------------------------------------------------DashBoard Flow Total --------------------------------------------------------------------------------\r\npublic async Task DashBoardFlowTotal ()\r\n{\r\n\t\r\nSetValueNum(\"DashBoard.System_FlowTotal_DailyMax\",100000);\r\nSetValueNum(\"DashBoard.System_FlowTotal_MonthlyMax\",1000000);\r\nSetValueNum(\"DashBoard.System_FlowTotal_WeeklyMax\",1000000);\r\nSetValueNum(\"DashBoard.System_FlowTotal_YearlyMax\",10000000);\r\ntry\r\n{\r\n\r\n\r\nList<Tag> list = new List<Tag>();\r\nlist = Stream.Application.GetTags();\r\nforeach(Tag t in list)\r\n{\r\n  \r\n\t\r\n   if(t.Name.Contains(\"ContTot_Status_Day\"+yesterdayDay.ToString()) || t.Name.Contains(\"ReportFlowTotals_FlowTotal_StatusDay_\"+yesterdayDay.ToString()) )\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tif (t.Name.Contains(\"Text\")){continue;}\r\n\t\t\t\tif (t.Name.Contains(\"Timestamp\")){continue;}\r\n\t\t\t\t//if (t.Name.Substring(15, 3) ==\"day\" )\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\tDashBoadrdDay+= GetValueNum(t.Name);\r\n\t\t\t\t\r\n\t\t\t\t\t\t//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\Historical\\Tags.txt\",\"p\" +\"---> \"+t.Name.ToString()+Environment.NewLine);\r\n\t\t\t\t\t\t\t\t\t//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\Historical\\Before.txt\",\"p\" +\"---> \"+DashBoadrdDay.ToString()+Environment.NewLine);\r\n\t\t\t}\r\n\t\t\t\t//else if (t.Name.Substring(15, 3) ==\"mon\" )\r\n\t  else if (t.Name.Contains(\"ContTot_Status_Month\"+month.ToString()) || t.Name.Contains(\"ReportFlowTotals_FlowTotal_StatusMonth_\"+month.ToString()))\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tif (t.Name.Contains(\"Text\")){continue;}\r\n\t\t\t\tif (t.Name.Contains(\"Timestamp\")){continue;}\r\n\t\t\t\t//if (t.Name.Substring(15, 3) ==\"day\" )\r\n\t\t\t\t\r\n\t\t\t\t\tDashBoadrdMonth+= GetValueNum(t.Name);\r\n\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\t//\telse if (t.Name.Substring(15, 3) ==\"yea\" )\r\n\t\t//else if (t.Name.Contains(\"Status_Year\"+year.ToString()))\r\n\t\telse if (t.Name.Contains(\"Text_Status_Year\") || t.Name.Contains(\"ReportFlowRates_Text_StatusYear\")  )\r\n\t\t\t{\r\n\t\t\t\tif (t.Name.Contains(\"ReportFlowRates_Text_StatusYear\"))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (GetValueStr(t.Name)==year.ToString())\r\n\t\t\t\t {\r\n\t\t\t\t\tstring tagVal= t.Name.Replace(\"Text\",\"FlowTotal\").Replace(\"ReportFlowRates\",\"ReportFlowTotals\");\r\n\t\t\t\t\tDashBoadrdYear+= GetValueNum(tagVal);\r\n\t\t\t\t }\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t//if (t.Name.Contains(\"Text\")){continue;}\r\n\t\t\t\t//if (t.Name.Contains(\"Timestamp\")){continue;}\r\n\t\t\t\t//if (t.Name.Substring(15, 3) ==\"day\" )\r\n\t\t\t\t if (GetValueStr(t.Name)==year.ToString())\r\n\t\t\t\t {\r\n\t\t\t\t\tstring tagVal= t.Name.Replace(\"Text\",\"ContTot\");\r\n\t\t\t\t\tDashBoadrdYear+= GetValueNum(tagVal);\r\n\t\t\t \t}\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\t\r\n\tif(t.Name.Contains(\"ContTot_Status_Day\") ||t.Name.Contains(\"ReportFlowTotals_FlowTotal_StatusDay\") )\r\n\t  {\r\n\t\t\tstring dayString ;\r\n\t\t\tint dayNumber;\r\n\t\t  int dayindex = t.Name.IndexOf(\"Day\");\r\n\t\t\r\n        if (dayindex != -1)\r\n        {\r\n\t\t\t\t\tif (t.Name.Contains(\"ReportFlowTotals_FlowTotal_StatusDay\"))\t\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Extract the substring after \"Day\" and convert it to an integer\r\n\t\t\t\t\t\tdayString = t.Name.Substring(dayindex + 4);// +4 to skip \"Day\"\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Extract the substring after \"Day\" and convert it to an integer\r\n             dayString = t.Name.Substring(dayindex + 3); // +3 to skip \"Day\"\r\n\t\t\t\t\t}\r\n             dayNumber = int.Parse(dayString);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (( dayNumber > Las7daysDay )&&(dayNumber <=day ))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDashBoadrdWeek += GetValueNum(t.Name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\r\n\t  }\r\n  \t\r\n\t\r\n\t\r\n\t\t //SetValueNum(\"DashBoard.System_FlowTotal_Daily\",DashBoadrdDay*5);\r\n \r\n\t\t\t\r\n}\r\n\t\r\nSetValueNum(\"DashBoard.System_FlowTotal_Daily\",DashBoadrdDay);//Tolat Daily Flow \r\nSetValueNum(\"DashBoard.System_FlowTotal_Weekly\",DashBoadrdWeek);//Tolat Daily Flow \r\nSetValueNum(\"DashBoard.System_FlowTotal_Monthly\",DashBoadrdMonth);//Tolat monthly Flow \r\nSetValueNum(\"DashBoard.System_FlowTotal_Yearly\",DashBoadrdYear);//Tolat yearly Flow\t\r\nSetValueNum(\"Script.SystemDashBoardTotalFlow\",0);\r\n}\r\ncatch (Exception ex)\r\n{\r\n\t\tSetValueStr(\"Script.DashBoard_DateEX\",ex.Message);\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\npublic async Task FlowTotal ()\r\n{\r\nSetValueNum(\".test3\",1);\t\r\ntry\r\n{\r\n\r\n\t//\tFile.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\Historical\\Tags.txt\",\"p\" +\"---> \"+GetValueNum(\".test3\").ToString()+Environment.NewLine);\r\nfor (int i=0; i < GetValueNum(\"DashBoard.SystemControllertNUM\");i++)   // i can get the controller num fo all sytem by get the num off the last contrler\r\n{\r\n  string index= ControllersNamesList[i];\r\n\t\r\nfloat yearTimeStamp = (float)Stream.Tag.GetValueNum(index+\".TimeStamp_Year\");   \r\nfloat monthTimeStamp = (float)Stream.Tag.GetValueNum(index+\".TimeStamp_Month\");   \r\nfloat weekTimeStamp = (float)Stream.Tag.GetValueNum(index+\".TimeStamp_Week\");   \r\nfloat dayTimeStamp = (float)Stream.Tag.GetValueNum(index+\".TimeStamp_Day\");   \r\n\r\n\r\n   // Unix timestamp is seconds past epoch\r\n    System.DateTime yearDateTime = new DateTime(1970,1,1,0,0,0,0,System.DateTimeKind.Utc);\r\n    yearDateTime = yearDateTime.AddSeconds( yearTimeStamp ).ToLocalTime();\r\n    \r\n\r\n    System.DateTime  monthDateTime = new DateTime(1970,1,1,0,0,0,0,System.DateTimeKind.Utc);\r\n    monthDateTime = monthDateTime.AddSeconds( monthTimeStamp ).ToLocalTime();\r\n\r\n    System.DateTime weekDateTime = new DateTime(1970,1,1,0,0,0,0,System.DateTimeKind.Utc);\r\n    weekDateTime = weekDateTime.AddSeconds( weekTimeStamp ).ToLocalTime();\r\n\r\n    System.DateTime dayDateTime = new DateTime(1970,1,1,0,0,0,0,System.DateTimeKind.Utc);\r\n    dayDateTime = dayDateTime.AddSeconds( dayTimeStamp ).ToLocalTime();\r\n\r\n\r\n //   string yearString = yearDateTime.ToString(\"dd MMMM yyyy hh:mm:ss tt\");\r\n\t//  string monthString = monthDateTime.ToString(\"dd MMMM yyyy hh:mm:ss tt\");\r\n//\t  string weekString = weekDateTime.ToString(\"dd MMMM yyyy hh:mm:ss tt\");\r\n//    string dayString = dayDateTime.ToString(\"dd MMMM yyyy hh:mm:ss tt\");\r\n       \r\n\t\tstring yearString = yearDateTime.ToString(\"dd MMMM yyyy\");\r\n\t  string monthString = monthDateTime.ToString(\"dd MMMM yyyy\");\r\n\t  string weekString = weekDateTime.ToString(\"dd MMMM yyyy\");\r\n    string dayString = dayDateTime.ToString(\"dd MMMM yyyy\");\r\n\r\n\r\nSetValueNum(\"Script.ReportCounter\",13);//-----***************&&&&&&***\r\n\t\tStream.Tag.SetValueStr(index+\".TimeStamp_YearText\",yearString);   \r\n\t\tStream.Tag.SetValueStr(index+\".TimeStamp_MonthText\",monthString);   \r\n\t\tStream.Tag.SetValueStr(index+\".TimeStamp_WeekText\",weekString);   \r\n\t\tStream.Tag.SetValueStr(index+\".TimeStamp_DayText\",dayString);   \r\n\r\nList<Tag> list2 = new List<Tag>();\r\nlist2 = Stream.Application.GetTags();\r\nforeach(Tag t in list2)\r\n{\r\n   if(t.Name.Contains(\"Timestamp\") && (GetValueNum(t.Name) > 0) )\r\n\t\t\t{\r\n\t\t\t\t long epochTimestamp = (long)GetValueNum(t.Name);\r\n\t\t\t\t\tstring tagtext= t.Name.Replace(\"Timestamp\",\"Text\");\r\n\r\n        // Convert the epoch timestamp to a DateTime object in GMT+3\r\n        DateTime dateTime = DateTimeOffset.FromUnixTimeSeconds(epochTimestamp).AddHours(3).DateTime;\r\n\r\n        // Format the DateTime object as a readable date\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (t.Name.Contains(\"Day\"))\r\n\t\t\t\t\t{\r\n        \t  string formattedDate = dateTime.ToString(\"yyyy-MM-dd\");\r\n\t\t\t\t\t\tSetValueStr(tagtext,formattedDate);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (t.Name.Contains(\"Month\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstring formattedDate = dateTime.ToString(\"yyyy-MM\");\r\n\t\t\t\t\t\tSetValueStr(tagtext,formattedDate);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (t.Name.Contains(\"Week\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstring formattedDate = dateTime.ToString(\"yyyy-MM-dd\");\r\n\t\t\t\t\t\tSetValueStr(tagtext,formattedDate);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (t.Name.Contains(\"Year\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstring formattedDate = dateTime.ToString(\"yyyy\");\r\n\t\t\t\t\t\tSetValueStr(tagtext,formattedDate);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\r\n\r\n\t\t\t}\r\n\r\n}\r\n}\r\n\t\r\n\tSetValueNum(\".test3\",0);\t\r\n}\r\ncatch (Exception ex)\r\n{\r\n\t\tSetValueStr(\"Script.DashBoard_DateEX\",ex.Message);\r\n}\r\n\t\r\n\t\r\n}\r\n\r\n\r\npublic async Task ICC2FlowTotal ()\r\n{\r\n\ttry\r\n{\r\n\tSetValueNum(\"Script.ICC2TotalFlow\",1);\r\n //----------------------------------------------------------------------------Hunter360 ICC2 Flow Total----------------------------------------------------------------------------\r\n\t//Daily\r\n\tstring  location = Stream.Application.GetAppPath();\r\n\t\r\nfor (int i=0; i < GetValueNum(\"DashBoard.SystemControllertNUM\");i++)   // i can get the controller num fo all sytem by get the num off the last contrler\r\n{\r\n string index= ControllersNamesList[i];\r\nif (controllertype[i]==\"ICC2\")\t\t\r\n {\r\n  var CurrentDate =DateTime.Now;\r\n  double SumDay=0;\r\n\tdouble SumMonth=0;\r\n\tdouble SumYear=0;\t\r\n\tdouble CalcFlowRate ,Freq,KFactor,Offsset ;\r\n\tdouble Pulse;\r\n\tint SampleSize =5 ;  \r\n\t \r\n\t KFactor = GetValueNum(index +\".ReportFlowSetupParameters_KFactor_Status\")/100;//Waiting tag and change the tag at the GUI\r\n\t Offsset = GetValueNum(index +\".ReportFlowSetupParameters_Offset_Status\")/100;//Waiting tag\r\n\t Pulse  = (int)GetValueNum(index +\".ReportFlowSetupParameters_Pulses_Status\");//Waiting tag\r\n\t \r\n\t \r\n\t \r\n  for (int j=0 ; j<=29;j++)\r\n  {\r\n \tlong epochTimestamp = (long)GetValueNum(index+\".ReportHourlyFlowTotals_Timestamp_Status_\"+j.ToString());\r\n\t\t\t\t\t//string tagtext= t.Name.Replace(\"Timestamp\",\"Text\");\r\n\r\n        // Convert the epoch timestamp to a DateTime object in GMT+3\r\n       // DateTime dateTime = DateTimeOffset.FromUnixTimeSeconds(epochTimestamp).AddHours(3).DateTime;\r\n\t\t\t   DateTime dateTime = DateTimeOffset.FromUnixTimeSeconds(epochTimestamp).UtcDateTime;\r\n\t\t\r\n\t\t\t\t//File.AppendAllText(location + @\"\\Historical\\Tags.txt\",\"dateTime\" +\"---> \"+dateTime.ToString()+Environment.NewLine);\r\n\t if((CurrentDate.Month==dateTime.Month)&&(CurrentDate.Day==dateTime.Day))\r\n\t\t{\r\n\t\t\tSumDay+= GetValueNum(index+\".ReportHourlyFlowTotals_HourlyFlowTotal_Status_\"+j.ToString());\r\n\t\t\t\r\n\t\t\t//File.AppendAllText(location + @\"\\Historical\\Tags.txt\",\"SumDay\" +\"---> \"+SumDay.ToString()+Environment.NewLine);\r\n\t\t}\r\n\r\n  }\r\n\t Freq = SumDay/60;\r\n\t// File.AppendAllText(location + @\"\\Historical\\Tags.txt\",\"TotalSumDay\" +\"---> \"+SumDay.ToString()+Environment.NewLine);\r\n\t //File.AppendAllText(location + @\"\\Historical\\Tags.txt\",\"Freq\" +\"---> \"+Freq.ToString()+Environment.NewLine);\r\n\t if (Pulse == 0)\r\n\t\t\t{\r\n\t\t   // CalcFlowRate = (((((((Freq*64) + Offsset)*SampleSize ) * KFactor)+ 128 )/256 )/SampleSize)/16 ;\r\n\t\t\t\tCalcFlowRate = (Freq+Offsset)*KFactor;\r\n\t\t\t//\tFile.AppendAllText(location + @\"\\Historical\\Tags.txt\",\"CalcFlowRate\" +\"---> \"+CalcFlowRate.ToString()+Environment.NewLine);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t  CalcFlowRate = Freq * Pulse ;\r\n\t\t\t}\r\n\t \r\n  SetValueNum(index+\".ReportFlowTotals_FlowTotal_StatusDay_\"+CurrentDate.Day.ToString(),CalcFlowRate);\r\n  SetValueStr(index+\".ReportFlowRates_Text_Status_\"+CurrentDate.Day.ToString(),CurrentDate.ToString(\"yyyy-MM-dd\"));\r\n\t//----------------------------------------------------------------------------------------------------------------------------//\r\n\t//Monthley\r\n\t\r\n\t for (int j=1 ; j<=31;j++)\r\n  {\r\n\t\t//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\H360\\Counter.txt\", \"Counter =\"+j.ToString()+Environment.NewLine );\r\n\t string dateString = GetValueStr(index+\".ReportFlowRates_Text_Status_\"+j.ToString());\r\n\t//\tFile.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\H360\\Counter.txt\", \"dateString =\"+dateString +Environment.NewLine);\r\n\tif (dateString != \"0\"  ) \r\n\t\t{\r\n \t   DateTime dateTime=DateTime.ParseExact(dateString, \"yyyy-MM-dd\", null); \r\n\t\t\t\t\r\n\t    if(CurrentDate.Month==dateTime.Month)\r\n\t\t  {\r\n\t\t\tSumMonth+= GetValueNum(index+\".ReportFlowTotals_FlowTotal_StatusDay_\"+j.ToString());\r\n\t\t  }\r\n\t\t}\r\n  }\r\n\t \r\n  SetValueNum(index+\".ReportFlowTotals_FlowTotal_StatusMonth_\"+CurrentDate.Month.ToString(),SumMonth);\r\n  SetValueStr(index+\".ReportFlowRates_Text_StatusMontth_\"+CurrentDate.Month.ToString(),CurrentDate.ToString(\"yyyy-MM\"));\r\n\t//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\H360\\ICC2Flow.txt\", \"Month \"+CurrentDate.Month.ToString()+\"  : \" +CurrentDate.ToString(\"yyyy-MM\") +Environment.NewLine);\r\n\t \r\n \t\r\n\t\r\n\t//----------------------------------------------------------------------------------------------------------------------------//\r\n\t//Yearly\r\n\t\r\n\t for (int j=1 ; j<=12;j++)\r\n  {\r\n\t\t//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\H360\\Counter.txt\", \"Counter =\"+j.ToString()+Environment.NewLine );\r\n\t string dateString = GetValueStr(index+\".ReportFlowRates_Text_StatusMontth_\"+j.ToString());\r\n\t//\tFile.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\H360\\Counter.txt\", \"dateString =\"+dateString +Environment.NewLine);\r\n\tif (dateString != \"0\"  ) \r\n\t\t{\r\n \t   DateTime dateTime=DateTime.ParseExact(dateString, \"yyyy-MM\", null); \r\n\t\t\t\t\r\n\t    if(CurrentDate.Year==dateTime.Year)\r\n\t\t  {\r\n\t\t\tSumYear+= GetValueNum(index+\".ReportFlowTotals_FlowTotal_StatusMonth_\"+j.ToString());\r\n\t\t  }\r\n\t\t}\r\n  }\r\n\t int difference = ((CurrentDate.Year - 2024) % 5)+1;\r\n  SetValueNum(index+\".ReportFlowTotals_FlowTotal_StatusYear_\"+difference.ToString(),SumYear);\r\n  SetValueStr(index+\".ReportFlowRates_Text_StatusYear_\"+difference.ToString(),CurrentDate.ToString(\"yyyy\"));\r\n\t//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\H360\\ICC2Flow.txt\", \"Month \"+CurrentDate.Month.ToString()+\"  : \" +CurrentDate.ToString(\"yyyy-MM\") +Environment.NewLine);\r\n\r\n\r\n\t \r\n }\t\t\r\n}\r\n\r\n\tSetValueNum(\"Script.ICC2TotalFlow\",0);\r\n}\r\ncatch (Exception ex)\r\n{\r\n\t\tSetValueStr(\"Script.DashBoard_DateEX\",ex.Message);\r\n}\r\n\t\r\n\t\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n//---------------------------------------------------------------------------------------Flow Total ACC1---------------------------------------------------------------------------------------\r\n#region \"Flow Total ACC1\"\r\n\r\npublic async Task ACC1FlowTotal ()\r\n{\r\n\ttry\r\n{\r\n\tint CuuentDayValue;\r\n\tint PreviousDayValue;\r\n\tint CuuentMonthValue;\r\n\tint PreviousMonthValue;\r\n\tint CuuentYearValue;\r\n\tint PreviousYearValue;\r\n\tint CuuentWeekValue;\r\n\tint PreviousWeekValue;\r\n\t\r\n\t\r\n\tSetValueNum(\"Script.ACC1TotalFlow\",1);\r\n\tvar CurrentDate =DateTime.Now;\r\n\tstring Today = CurrentDate.Day.ToString();\r\n\tstring Yasterday = CurrentDate.AddDays(-1).Day.ToString();\r\n\tstring TodayTimestamp = DateTime.Now.ToString(\"yyyy-MM-dd\");\r\n\tstring YesterdayTimestamp = CurrentDate.AddDays(-1).ToString(\"yyyy-MM-dd\");\r\n\t\r\n\tstring CurrentWeekTimestamp=DateTime.Now.ToString(\"yyyy-MM-dd\");\r\n\tstring PreviousWeekTimestamp=CurrentDate.AddDays(-7).ToString(\"yyyy-MM-dd\");\r\n\t\r\n\tstring CurrentMonth = CurrentDate.Month.ToString();\r\n\tstring PreviousMonth = CurrentDate.AddMonths(-1).Month.ToString();\r\n\tstring CurrentMonthTimestamp =DateTime.Now.ToString(\"yyyy-MM\");\r\n\tstring PreviousMonthTimestamp = CurrentDate.AddMonths(-1).ToString(\"yyyy-MM\");\r\n\t\r\n\tint Currentyear = ((CurrentDate.Year - 2024) % 5)+1;\r\n\tint PreviousYear= ((CurrentDate.AddYears(-1).Year - 2024) % 5)+1;\r\n\tstring CurrentYearTimestamp = DateTime.Now.ToString(\"yyyy\");\r\n\tstring PreviousYearTimestamp = CurrentDate.AddYears(-1).ToString(\"yyyy\");\r\n\t\r\n\t\r\n\tstring  location = Stream.Application.GetAppPath();\r\n\t\r\n  for (int i=0; i < GetValueNum(\"DashBoard.SystemControllertNUM\");i++)   // i can get the controller num fo all sytem by get the num off the last contrler\r\n  {\r\n   string index= ControllersNamesList[i];\r\n\t if (controllertype[i]==\"ACC1\")\t\t\r\n    {\r\n\t\t\t//Daily\r\n\t\t//\tFile.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\Value.txt\",\"CuuentDayValue\" +\"---> \"+CuuentDayValue.ToString()+Environment.NewLine);\r\n\t\t\t CuuentDayValue = (int)GetValueNum(index+\".ReportFlowTotals_TodayFlowTotal_ControllerStatus\");\r\n\t\t\t\t//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\Value.txt\",\"CuuentDayValue\" +\"---> \"+CuuentDayValue.ToString()+Environment.NewLine);\r\n\t\t\t PreviousDayValue = (int)GetValueNum(index+\".ReportFlowTotals_YesterdayFlowTotal_ControllerStatus\");\r\n\t\t\tSetValueNum(index+\".ReportFlowTotals_ContTot_Status_Day\"+Today,CuuentDayValue);\r\n\t\t\tSetValueNum(index+\".ReportFlowTotals_ContTot_Status_Day\"+Yasterday,PreviousDayValue);\t\t\r\n\t\t\tSetValueStr(index+\".ReportFlowTotals_Text_Status_Day\"+Today,TodayTimestamp);\r\n\t\t\tSetValueStr(index+\".ReportFlowTotals_Text_Status_Day\"+Yasterday,YesterdayTimestamp);\r\n\t\t\t//Weekly\r\n\t\t\t CuuentWeekValue = (int)GetValueNum(index+\".ReportFlowTotals_WtdFlowTotal_ControllerStatus\");\r\n\t\t\t PreviousWeekValue = (int)GetValueNum(index+\".ReportFlowTotals_LastWeekFlowTotal_ControllerStatus\");\r\n\t\t\tSetValueNum(index+\".ReportFlowTotals_ContTot_Status_Week1\",PreviousWeekValue);\r\n\t\t\tSetValueNum(index+\".ReportFlowTotals_ContTot_Status_Week2\",CuuentWeekValue);\r\n\t\t\tSetValueStr(index+\".ReportFlowTotals_Text_Status_Week1\",CurrentWeekTimestamp);\r\n\t\t\tSetValueStr(index+\".ReportFlowTotals_Text_Status_Week2\",PreviousWeekTimestamp);\r\n\t\t\t\r\n\t\t//\tSetValueNum(index+\".ReportFlowTotals_ContTot_Status_Month\"+CurrentMonth,CuuentMonthValue);\r\n\t\t//\tSetValueNum(index+\".ReportFlowTotals_ContTot_Status_Month\"+PreviousMonth,PreviousMonthValue);\t\t\r\n\t\t//\tSetValueStr(index+\".ReportFlowTotals_Text_Status_Month\"+CurrentMonth,CurrentMonthTimestamp);\r\n\t\t//\tSetValueStr(index+\".ReportFlowTotals_Text_Status_Month\"+PreviousMonth,PreviousMonthTimestamp);\r\n\t\t  //Monthly\r\n\t\t\t CuuentMonthValue = (int)GetValueNum(index+\".ReportFlowTotals_MtdFlowTotal_ControllerStatus\");\r\n\t\t\t PreviousMonthValue = (int)GetValueNum(index+\".ReportFlowTotals_LastMonthFlowTotal_ControllerStatus\");\r\n\t\t\tSetValueNum(index+\".ReportFlowTotals_ContTot_Status_Month\"+CurrentMonth,CuuentMonthValue);\r\n\t\t\tSetValueNum(index+\".ReportFlowTotals_ContTot_Status_Month\"+PreviousMonth,PreviousMonthValue);\t\t\r\n\t\t\tSetValueStr(index+\".ReportFlowTotals_Text_Status_Month\"+CurrentMonth,CurrentMonthTimestamp);\r\n\t\t\tSetValueStr(index+\".ReportFlowTotals_Text_Status_Month\"+PreviousMonth,PreviousMonthTimestamp);\r\n\t\t\t //Yearly\r\n\t\t\t CuuentYearValue = (int)GetValueNum(index+\".ReportFlowTotals_YtdFlowTotal_ControllerStatus\");\r\n\t\t\t PreviousYearValue = (int)GetValueNum(index+\".ReportFlowTotals_LastYearFlowTotal_ControllerStatus\");\r\n\t\t\tSetValueNum(index+\".ReportFlowTotals_ContTot_Status_Year\"+Currentyear.ToString(),CuuentYearValue);\r\n\t\t\tSetValueNum(index+\".ReportFlowTotals_ContTot_Status_Year\"+PreviousYear.ToString(),PreviousYearValue);\t\t\r\n\t\t\tSetValueStr(index+\".ReportFlowTotals_Text_Status_Year\"+Currentyear.ToString(),CurrentYearTimestamp);\r\n\t\t\tSetValueStr(index+\".ReportFlowTotals_Text_Status_Year\"+PreviousYear.ToString(),PreviousYearTimestamp);\r\n\t\t\t\r\n\t\t\t//at the end i should make this tags retentive\r\n\t\t\t\r\n    }\r\n\t\r\n   }\r\n\tSetValueNum(\"Script.ACC1TotalFlow\",0);\r\n}\r\n\tcatch (Exception ex)\r\n{\r\n\t\tSetValueStr(\"Script.DashBoard_DateEX\",ex.Message);\r\n\tSetValueNum(\"Script.ACC1TotalFlow\",0);\r\n}\r\n\t\r\n}\r\n\r\n    \r\n#endregion\r\n\r\n\r\n\r\n\r\n\r\n#region \"Weak of the month\"\r\n\r\npublic int GetWeekOfMonth()\r\n{\r\n\tDateTime date = DateTime.Now; // Get the current date\r\n  \r\n\t// Get the first day of the month\r\n        DateTime firstDayOfMonth = new DateTime(date.Year, date.Month, 1);\r\n\r\n        // Get the day of the week for the first day of the month\r\n        int offset = (int)firstDayOfMonth.DayOfWeek;\r\n\r\n        // Calculate the week number\r\n        int weekNumber = ((date.Day + offset - 1) / 7) + 1;\r\n\r\n        return weekNumber;\r\n\t\r\n}\r\n    // write code\r\n#endregion\r\n\r\n\r\n//----------------------------------------------------------------------------Hunter360 ICC2 Flow Rate calculations ----------------------------------------------------------------------------\r\npublic async Task ICC2FlowRateCalc()\r\n{\r\n\t\r\n\t SetValueNum(\"Script.ICC2Flow\",1);\r\n \r\n\t\r\n\tdouble CalcFlowRate ,Freq,KFactor,Offsset ;\r\n\tint SampleSize =5 ;\r\n\tint Pulse;\r\n  for (int i=0; i < GetValueNum(\"DashBoard.SystemControllertNUM\");i++)   // i can get the controller num fo all sytem by get the num off the last contrler\r\n  {\r\n   string index= ControllersNamesList[i];\r\n   if (controllertype[i]==\"ICC2\")\t\t\r\n    {\r\n\t\t\t//------------ PMV Copy -----------\r\n\t\t\tint PMVCopy = (int)GetValueNum(index+\".ReportControllerType_PumpOn_Status\");\r\n\t\t\tSetValueNum(index+\".ReportActiveStations_Pmv1_Status\",PMVCopy);\r\n\t\t\t\r\n\t\t\t//------------FLow-----------\r\n\t\t\t\r\n\t \t Freq = GetValueNum(index +\".ReportFlowRates_CurrentFlowRate_Status\")/60 ;\t\r\n\t\t\tKFactor = GetValueNum(index +\".ReportFlowSetupParameters_KFactor_Status\")/100;\r\n\t\t\tOffsset = GetValueNum(index +\".ReportFlowSetupParameters_Offset_Status\")/100;\r\n\t\t\tPulse  = (int)GetValueNum(index +\".ReportFlowSetupParameters_Pulses_Status\");//Waiting tag\r\n\t\t\tif (Pulse == 0)\r\n\t\t\t{\r\n\t\t   // CalcFlowRate = (((((((Freq*64) + Offsset)*SampleSize ) * KFactor)+ 128 )/256 )/SampleSize)/16 ;\r\n\t\t\t\tCalcFlowRate = (Freq+Offsset)*KFactor;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t  CalcFlowRate = Freq * Pulse ;\r\n\t\t\t}\r\n\t\t\tif (Freq > 0 )\r\n\t\t\t{\r\n\t\t\tSetValueNum(index +\".ReportCurrentFlowRate_Status\",CalcFlowRate);\r\n\t\t  SetValueNum(index +\".ReportCurrentFlow_FSen1FlowRate_Status\",CalcFlowRate);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\tSetValueNum(index +\".ReportCurrentFlowRate_Status\",0);\r\n\t\t  SetValueNum(index +\".ReportCurrentFlow_FSen1FlowRate_Status\",0);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\nint value = (int)GetValueNum(index +\".ReportFlowSetupParameters_KFactor_Status\");\r\nswitch (value)\r\n{\r\n   case 44:\r\n        SetValueStr(index +\".ReportSensorModel_String\",\"FCT100\");\r\n        break;\r\n   case 133:\r\n         SetValueStr(index +\".ReportSensorModel_String\",\"FCT150\");\r\n        break;\r\n\t case 92:\r\n         SetValueStr(index +\".ReportSensorModel_String\",\"FCT158\");\r\n        break;\r\n\t case 213:\r\n         SetValueStr(index +\".ReportSensorModel_String\",\"FCT200\");\r\n        break;\r\n\t case 172:\r\n         SetValueStr(index +\".ReportSensorModel_String\",\"FCT208\");\r\n        break;\r\n\t case 461:\r\n         SetValueStr(index +\".ReportSensorModel_String\",\"FCT300\");\r\n        break;\r\n\t case 587:\r\n         SetValueStr(index +\".ReportSensorModel_String\",\"FCT308\");\r\n        break;\r\n\t case 877:\r\n         SetValueStr(index +\".ReportSensorModel_String\",\"FCT400\");\r\n        break;\r\n\t case 0:\r\n\t\t\t\tif (GetValueNum(index +\".ReportFlowSetupParameters_Pulses_Status\")>0 && GetValueStr(index +\".SensorModel_String\")==\"0\" )\r\n\t\t\t\t{\r\n         SetValueStr(index +\".ReportSensorModel_String\",\"Pulse Meter\");\r\n\t\t\t\t}\r\n        break;\r\n\t default:\t\t\t\t\t\t\r\n         SetValueStr(index +\".ReportSensorModel_String\",\"Other\");\r\n\t\t\t\t\r\n        break;\r\n\t\r\n}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n    }\r\n\t}\r\n\tSetValueNum(\"Script.ICC2Flow\",0);\t\r\n\t\r\n}\r\n//----------------------------------------------------------------------------Hunter360 ACC1 Stop Station ----------------------------------------------------------------------------\r\npublic async Task ACC1StopStation(string ControllerName)\r\n{\r\n\tif (GetValueNum(ControllerName+\".StopDeleteStations_Check\")==1)\r\n\t{\r\n\t\tint StationNum =(int)GetValueNum(ControllerName+\".StopDeleteStations_StaId_Int\");\r\n\t\tstring StationNumString = StationNum.ToString();\r\n\t\tif (GetValueNum(ControllerName+\".ReportActiveStations_Stn\"+StationNumString+\"_Status\")==1)\r\n\t\t{\r\n\t\t\tSetValueNum(ControllerName+\".StopDeleteStations_StaId_Command\",StationNum);\r\n\t\tawait Task.Delay(100);\r\n\t\t\tSetValueNum(ControllerName+\".StopDeleteStations_Trigger\",1);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tawait Task.Delay(100);\r\n\t\t}\r\n\t\t\r\n\t\tSetValueNum(ControllerName+\".StopDeleteStations_Check\",0);\r\n\t}\r\n}\r\n\r\n\r\n//----------------------------------------------------------------------------Hunter360 ACC1 Solar Setting Enable ----------------------------------------------------------------------------\r\npublic async Task ACC1SolarSettingEnable(string ControllerName)\r\n{\r\n\tSetValueNum(ControllerName + \".ControllerETUsageSettings_UseSensor_Enable\",0);\r\n\tint Toggle = (int)GetValueNum(ControllerName + \".ConfigureControllerETUsageSettings_UseSensor_Command\");\r\n\tSetValueNum(ControllerName + \".ConfigureControllerETUsageSettings_UseSensor_Command\",1^Toggle);\r\n\t//Task.Delay(500);\r\n\tSetValueNum(ControllerName + \".ConfigureControllerETUsageSettings_ETMode_Command\",1);\r\n\t//await Task.Delay(500);\r\n\tSetValueNum(ControllerName + \".ConfigureControllerETUsageSettings_Trigger\",1);\r\n\tawait Task.Delay(1000);\r\n\tSetValueNum(ControllerName + \".ReportControllerETUsageSettings_Trigger\",1);\r\n\t\r\n}\r\n\r\n//---------------------------------------------------------------------------------------------DashBoard Mass Commands --------------------------------------------------------------------------------\r\npublic async Task DashBoardMassCommands ()\r\n{\r\n\tSetValueNum(\"Botton.schedule_BlinkDown\",1);\r\n\tfor(int P=0 ; P< GetValueNum(\"DashBoard.SystemControllertNUM\");P++)\r\n{\r\nstring index= ControllersNamesList[P];\r\n\r\n if ( GetValueNum(index+\".Controller_Status\")==1)\r\n{\r\n\tif ((GetValueNum(\"DashBoard.SystemOperationActions_Auto\")==1)&&(controllertype[P]==\"ACC2\"))\r\n\t {\r\n\t\tSetValueNum(index+\".CancelProgrammableOff_Trigger\",1);\r\n\t\t//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive\\Desktop\\Work\\Hunter\\App v2.0\\H360\\test.txt\",\"Shutown\");\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SystemOperationActions_Shutdown\")==1)&&(controllertype[P]==\"ACC2\"))\r\n\t {\r\n\t\tSetValueNum(index+\".SetProgrammableOff_OffDays_Command\",0);\r\n\t\tSetValueNum(index+\".SetProgrammableOff_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SystemOperationActions_StopIrrigation\")==1)&&(controllertype[P]==\"ACC2\"))\r\n\t {\r\n\t\tSetValueNum(index+\".StopIrrigation_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SystemOperationActions_StopIrrigation_ICC2\")==1)&&(controllertype[P]==\"ICC2\"))\r\n \t{\r\n\t\tSetValueNum(index+\".StopIrrigation_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SystemDaysOff_Trigger\")==1)&&(controllertype[P]==\"ACC2\"))\r\n\t {\r\n\t\tint Dashboarddata =(int)GetValueNum(\"DashBoard.SystemDaysOff_Num\");\r\n\t\r\n\t\tSetValueNum(index+\".SetProgrammableOff_OffDays_Command\",Dashboarddata);\r\n\t\tawait Task.Delay(50);\r\n\t\tSetValueNum(index+\".SetProgrammableOff_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SystemDaysOff_Trigger_ICC2\")==1)&&(controllertype[P]==\"ICC2\"))\r\n\t\t{\r\n\t\tSetValueNum(index+\".SetProgrammableOff_OffDays_Command\",GetValueNum(\"DashBoard.SystemDaysOff_Num_ICC2\"));\r\n\t await Task.Delay(50);\r\n\t\tSetValueNum(index+\".SetProgrammableOff_Trigger\",1);\r\n\t\tFlag=1;\r\n\t\t}\r\n\tif ((GetValueNum(\"DashBoard.SystemGlobalSeasAdj_Trigger\")==1)&&(controllertype[P]==\"ACC2\"))\r\n\t {\r\n\t\tint Dashboarddata =(int)GetValueNum(\"DashBoard.SystemGlobalSeasAdj_pres\");\r\n\t\t\r\n\t\tSetValueNum(index+\".SetSeasonalAdjustValues_GblSeasAdj_Command\",Dashboarddata);\r\n\t\tawait Task.Delay(50);\r\n\t\tSetValueNum(index+\".SetSeasonalAdjustValues_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SystemGlobalSeasAdj_Trigger_ICC2\")==1)&&(controllertype[P]==\"ICC2\"))\r\n\t {\r\n\t\tint Dashboarddata =(int)GetValueNum(\"DashBoard.SystemGlobalSeasAdj_pres_ICC2\");\r\n\t\t\r\n\t\tSetValueNum(index+\".SetGlobalSeasonalAdjust_GblSeasAdj_Command\",Dashboarddata);\r\n\t\tawait Task.Delay(50);\r\n\t\tSetValueNum(index+\".SetGlobalSeasonalAdjust_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SystemSuspend_Apply\")==1)&&(controllertype[P]==\"ACC2\"))\r\n\t {\r\n\t\tSetValueNum(index+\".SuspendIrrigation_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SystemSuspend_Cancel\")==1)&&(controllertype[P]==\"ACC2\"))\r\n\t {\r\n\t\tSetValueNum(index+\".CancelSuspend_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\t if ((GetValueNum(\"DashBoard.SystemPause_Apply\")==1)&&(controllertype[P]==\"ACC2\"))\r\n\t {\r\n\t\tSetValueNum(index+\".SetPauseMode_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SystemPause_Cancel\")==1)&&(controllertype[P]==\"ACC2\"))\r\n\t {\r\n\t\tSetValueNum(index+\".CancelPauseMode_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SystemDaysOff_Cancel_ICC2\")==1)&&(controllertype[P]==\"ICC2\"))\r\n\t {\r\n\t\tSetValueNum(index+\".CancelProgrammableOff_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\t//ACC1\r\n\t\r\n\t\r\n\tif ((GetValueNum(\"DashBoard.SystemOperationActions_Auto_ACC1\")==1)&&(controllertype[P]==\"ACC1\"))\r\n\t {\r\n\t\tSetValueNum(index+\".CancelProgrammableOff_Trigger\",1);\r\n\t\t//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive\\Desktop\\Work\\Hunter\\App v2.0\\H360\\test.txt\",\"Shutown\");\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SystemOperationActions_StopIrrigation_ACC1\")==1)&&(controllertype[P]==\"ACC1\"))\r\n\t {\r\n\t\tSetValueNum(index+\".StopIrrigation_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SystemDaysOff_Trigger_ACC1\")==1)&&(controllertype[P]==\"ACC1\"))\r\n\t {\r\n\t\tint Dashboarddata =(int)GetValueNum(\"DashBoard.SystemDaysOff_Num_ACC1\");\t\r\n\t\tSetValueNum(index+\".ProgrammableOff_OffDays_Command\",Dashboarddata);\r\n\t\tawait Task.Delay(50);\r\n\t\tSetValueNum(index+\".ProgrammableOff_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SystemGlobalSeasAdj_Trigger_ACC1\")==1)&&(controllertype[P]==\"ACC1\"))\r\n\t {\r\n\t\tint Dashboarddata =(int)GetValueNum(\"DashBoard.SystemGlobalSeasAdj_pres_ACC1\");\r\n\t\tSetValueNum(index+\".SetGlobalSeasonalAdjust_GblSeasAdj_Command\",Dashboarddata);\r\n\t\tawait Task.Delay(50);\r\n\t\tSetValueNum(index+\".SetGlobalSeasonalAdjust_Trigger\",1);\r\n\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SystemSuspend_Apply_ACC1\")==1)&&(controllertype[P]==\"ACC1\"))\r\n\t {\r\n\t\tSetValueNum(index+\".SuspendIrrigation_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SystemSuspend_Cancel_ACC1\")==1)&&(controllertype[P]==\"ACC1\"))\r\n\t {\r\n\t\tSetValueNum(index+\".CancelSuspend_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\t if ((GetValueNum(\"DashBoard.SystemPause_Apply_ACC1\")==1)&&(controllertype[P]==\"ACC1\"))\r\n\t {\r\n\t\tSetValueNum(index+\".SetPauseMode_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SystemPause_Cancel_ACC1\")==1)&&(controllertype[P]==\"ACC1\"))\r\n\t {\r\n\t\tSetValueNum(index+\".CancelPauseMode_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\t\r\n}\r\n}\r\n\t\r\n\t\r\n\tif (Flag==1)\r\n{\r\n\tSetValueNum(\"DashBoard.SystemOperationActions_Auto\",0);\r\n\tSetValueNum(\"DashBoard.SystemOperationActions_Shutdown\",0);\r\n\tSetValueNum(\"DashBoard.SystemOperationActions_StopIrrigation\",0);\r\n\tSetValueNum(\"DashBoard.SystemDaysOff_Trigger\",0);\r\n\tSetValueNum(\"DashBoard.SystemGlobalSeasAdj_Trigger\",0);\r\n\tSetValueNum(\"DashBoard.SystemSuspend_Apply\",0);\r\n\tSetValueNum(\"DashBoard.SystemSuspend_Cancel\",0);\r\n\tSetValueNum(\"DashBoard.SystemPause_Apply\",0);\r\n\tSetValueNum(\"DashBoard.SystemPause_Cancel\",0);\r\n\tSetValueNum(\"DashBoard.SystemOperationActions_StopIrrigation_ICC2\",0);\r\n\tSetValueNum(\"DashBoard.SystemDaysOff_Trigger_ICC2\",0);\r\n\tSetValueNum(\"DashBoard.SystemGlobalSeasAdj_Trigger_ICC2\",0);\r\n\tSetValueNum(\"DashBoard.SystemDaysOff_Cancel_ICC2\",0);\r\n\t//ACC1\r\n\tSetValueNum(\"DashBoard.SystemOperationActions_Auto_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SystemOperationActions_StopIrrigation_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SystemDaysOff_Trigger_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SystemGlobalSeasAdj_Trigger_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SystemSuspend_Apply_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SystemSuspend_Cancel_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SystemPause_Apply_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SystemPause_Cancel_ACC1\",0);\r\n\t\r\n\t\r\n\t\r\n}\r\n\t\r\n\t\r\n\t\r\n\t//LogPerformance(\"Mass Commands\");\r\n\tSetValueNum(\"Botton.schedule_BlinkDown\",0);\r\n}\r\n\r\n \t\r\n\r\n//===============================================================================================Classes===================================================================================\r\n\r\n\r\npublic class Controller\r\n    {\r\n        public int X { get; set; }\r\n        public int Y { get; set; }\r\n        public Dictionary<string, string> DynamicProps { get; set; }\r\n        public string ControllerName { get; set; }\r\n        public string ControllerLabel { get; set; }\r\n        public string ControllerType { get; set; }\r\n        public object ControllerIPAddress { get; set; }\r\n        public string SiteName { get; set; }\r\n    }\r\n\r\nif (FirstFlag==1)\r\n{\r\n\tSetValueNum(\"Script.FirstTimeAlarm\",1);//--------------------------------------------------------------------> this for the firt time part\r\n}","IsCylic":true,"IsEvent":false,"Cyclic_timer":3000,"IsValidated":false,"IsScriptEnabled":true,"IsRunOnceAtStartup":false,"EnableTag":"","DllFolderPath":"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\Scripts\\Dlls\\","strReferencePaths_csv":"","IncludeReferencesUnderScripts_Ref_Folder":true,"RunScriptInStandbyMode":false,"Data_3":null,"Data_4":null,"Data_5":null,"Data_6":null,"ver":"4.18.10.2","last_save":"2025-05-06 16:05:00"}