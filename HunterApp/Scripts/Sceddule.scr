{"Type":null,"Title":"Sceddule","Script_Code":"using System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.IO;\r\nusing Newtonsoft.Json;\r\nusing System.Globalization;\r\n\r\n//############################################################################################################# Defines ##########################################################################################\r\n int delaySec,sec , min, hour,Flag,total_min ,FirstFlag;\r\n public double IrrigationSum ,AlarmedControllersSum ,OnlineControllers ,TotalPVM,TotalStation,TopMaxAlarm,TotalFZAlarms,TotalActiveFZAlarms,TotalDschFlowTotal,MaxFlowSensor ,WaterSourceFlow,TotalCurrentDraw,MASS_Command;\r\n double[] TopAlarmedConttrollers =new double [100];\r\n string[] TopAlarmedConttrollersName =new string [100];\r\n var Date =  DateTime.Now;\r\n string ToDay = Date.ToString(\"yyyy-MM-dd\");\r\n string Month = Date.ToString(\"yyyy-MM-01\");\r\n string Year = Date.ToString(\"yyyy\");\r\n int month = Date.Month;\r\n int year = Date.Year;\r\n int day = Date.Day;\r\n double DashBoadrdDay,DashBoadrdMonth,DashBoadrdWeek,DashBoadrdYear =0;\r\n string StartDate;\r\n string EndDate;\r\n StartDate = \"'\"+Date.AddDays(-30).ToString(\"yyyy-MM-dd\")+\"'\";\r\n EndDate = \"'\"+Date.AddDays(+1).ToString(\"yyyy-MM-dd\")+\"'\";\r\n public int [] AlarmAnalysisCount=new int [3];\r\n public int []totalAlarmAnalysisCount=new int [3];\r\n string SiteName;\r\n public int Rec,Runtime_Hr,Runtime_Min,Runtime_Sec;\r\n var SSDate =DateTime.Now;\r\n int SsAdMonth=SSDate.Month;\r\n int SeasonalAdj;\r\n string Date_unix ;\r\n string con,StartTime_ReportMeridian;\r\n string index= GetValueStr(\"Script.MapControllerName\");\r\n\r\n\r\n\r\n\r\n\r\n//----------------------------------------------------------------------------------scedule program num------------------------------------------------\r\nint ProgNum= (int)GetValueNum(index+\".ReportControllerProgramHeaderData_ProgramNumber_Command\");\r\nSetValueNum(index+\".ReportControllerProgramEventRuntimeData_ProgramNumber_Command\",ProgNum);\r\nSetValueNum(index+\".SetControllerProgramEventRuntimeData_ProgramNumber_Command\",ProgNum);\r\n\r\n\r\n//----------------------------------------------------------------------------Hunter360 Script Scedule EventDelay ----------------------------------------------------------------------------\r\n//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\ndelaySec = (int)Stream.Tag.GetValueNum(index+\".ReportControllerProgramHeaderData_EventDelay_Status\");\r\n                \r\n sec = (int)delaySec % 60;\r\n min = (int)delaySec / 60;\r\n hour = (int)min / 60;\r\n min = min % 60;\r\n Stream.Tag.SetValueNum(index+\".REPORT_EventDelay_Sec\",sec);\r\n Stream.Tag.SetValueNum(index+\".REPORT_EventDelay_Min\",min);\r\n Stream.Tag.SetValueNum(index+\".REPORT_EventDelay_Hour\",hour);\r\n//----------------------------------------------------------------------------Hunter360 RunTime && Seasonal Adj.R.T----------------------------------------------------------------------------\r\n\r\n\r\nint SSvalue = (int)GetValueNum(index+\".ReportControllerProgramHeaderData_SeasAdjSource_Status\");\r\n\tswitch (SSvalue)\r\n\t{\r\n\t\t\tcase 0:\r\n        SeasonalAdj=(int)GetValueNum(index+\".ReportControllerProgramHeaderData_SeasonalAdjust_Status\");\r\n    \t    break;\r\n  \t  case 1:\r\n         SeasonalAdj=(int)GetValueNum(index+\".ReportSeasonalAdjustValues_GblSeasAdj_Status\");\r\n    \t    break;\r\n    \tcase 2:\r\n         SeasonalAdj=(int)GetValueNum(index+\".ReportSeasonalAdjustValues_Month\"+SsAdMonth.ToString() +\"SeasAdj_Status\");\r\n      \t  break;\r\n\t\t\tcase 3:\r\n         SeasonalAdj=(int)GetValueNum(index+\".ReportSolarSyncEtData_SSAdjust_Status\");\r\n      \t  break;\r\n\t}\r\n\r\n\r\nfor (int j=1 ;j <65 ;j++ )\t\r\n\t{\r\n/*\r\n\t\tRec = (int)Stream.Tag.GetValueNum(index+\".ReportControllerProgramEventRuntimeData_EventRunTime_Status_\"+i.ToString());\r\n                \r\n \t\tRuntime_Sec = (int)Rec % 60;\r\n \t\tRuntime_Min = (int)Rec / 60;\r\n\t\t Runtime_Hr = (int)Runtime_Min / 60;\r\n \t\tRuntime_Min = Runtime_Min % 60;\r\n \t\tStream.Tag.SetValueNum(index+\".EventRunTime_Sec_\"+i.ToString(),Runtime_Sec);\r\n\t\t Stream.Tag.SetValueNum(index+\".EventRunTime_Min_\"+i.ToString(),Runtime_Min);\r\n \t\tStream.Tag.SetValueNum(index+\".EventRunTime_Hour_\"+i.ToString(),Runtime_Hr);\r\n\r\n*/\r\n\t\t\t\t// Your duration in seconds\r\n        int durationInSeconds = (int)Stream.Tag.GetValueNum(index+\".ReportControllerProgramEventRuntimeData_EventRunTime_Status_\"+j.ToString());\r\n\t\t\t\tint SSAdjustdurationInSeconds = (int)Stream.Tag.GetValueNum(index+\".ReportControllerProgramEventRuntimeData_EventRunTime_Status_\"+j.ToString())* SeasonalAdj/100;\r\n\r\n\r\n        // Create a TimeSpan object with the given duration in seconds\r\n        TimeSpan timeSpan = TimeSpan.FromSeconds(durationInSeconds);\r\n\t\t\t\tTimeSpan SSAtimeSpan = TimeSpan.FromSeconds(SSAdjustdurationInSeconds);\r\n\r\n        // Format the TimeSpan as \"HH:mm:ss\"\r\n        string formattedDuration = $\"{(int)timeSpan.TotalHours:D2}:{timeSpan.Minutes:D2}:{timeSpan.Seconds:D2}\";\r\n\t\t\t\tstring SSAformattedDuration = $\"{(int)SSAtimeSpan.TotalHours:D2}:{SSAtimeSpan.Minutes:D2}:{SSAtimeSpan.Seconds:D2}\";\r\n\r\n\t\t\t\tStream.Tag.SetValueStr(index+\".EventRunTime_String_\"+j.ToString(),formattedDuration);\r\n\t \t\t Stream.Tag.SetValueStr(index+\".Report_SeasonalAdjust_String_\"+j.ToString(),SSAformattedDuration);\r\n\t\t\t\r\n\r\n\t}\r\n\r\n//----------------------------------------------------------------------------Hunter360  No Water Window----------------------------------------------------------------------------\r\n\r\nint StartdurationInMinutes = (int)Stream.Tag.GetValueNum(index+\".ReportControllerProgramHeaderData_NWWStart_Status\");\r\nint EnddurationInMinutes = (int)Stream.Tag.GetValueNum(index+\".ReportControllerProgramHeaderData_NWWEnd_Status\");\r\n        // Create a TimeSpan object with the given duration in seconds\r\n        TimeSpan StarttimeSpan = TimeSpan.FromMinutes(StartdurationInMinutes);\r\n\t\t\t\tTimeSpan EndtimeSpan = TimeSpan.FromMinutes(EnddurationInMinutes);\r\n        // Format the TimeSpan as \"HH:mm:ss\"\r\n        string StartformattedDuration = $\"{(int)StarttimeSpan.TotalHours:D2}:{StarttimeSpan.Minutes:D2}\";\r\n\t\t\t\tstring EndformattedDuration = $\"{(int)EndtimeSpan.TotalHours:D2}:{EndtimeSpan.Minutes:D2}\";\r\n\t\t\t\tStream.Tag.SetValueStr(index+\".Report_NWWStart_String\",StartformattedDuration);\r\n\t\t\t\tStream.Tag.SetValueStr(index+\".Report_NWWEnd_String\",EndformattedDuration);\r\n\r\n//----------------------------------------------------------------------------Hunter360  No Water Window Set Command ----------------------------------------------------------------------------\r\n// Start\r\nint StartWaterMin,StartWaterHour,StartMin;\r\n StartWaterMin=(int) GetValueNum(index+\".Set_NWWStart_Command_Min\");\r\n StartWaterHour=(int) GetValueNum(index+\".Set_NWWStart_Command_Hour\");\r\n StartMin  = (int)StartWaterMin + ((int)StartWaterHour * 60 );\r\nSetValueNum(index+\".SetControllerProgramHeaderData_NWWStart_Command\",StartMin);\r\n//End\r\nint EndWaterMin,EndWaterHour,EndMin;\r\n EndWaterMin=(int) GetValueNum(index+\".Set_NWWEnd_Command_Min\");\r\n EndWaterHour=(int) GetValueNum(index+\".Set_NWWEnd_Command_Hour\");\r\n EndMin  = (int)EndWaterMin + ((int)EndWaterHour * 60 );\r\nSetValueNum(index+\".SetControllerProgramHeaderData_NWWEnd_Command\",EndMin);\r\n//----------------------------------------------------------------------------Hunter360 Script Water Days----------------------------------------------------------------------------\r\n\r\n\r\n\r\n// Example 2-byte integer\r\n        int twoByteInt = (int)GetValueNum(index+\".ReportControllerProgramHeaderData_DOWDays_Status\");\r\n\r\n        // Convert the integer to binary representation\r\n        string binaryRepresentation = Convert.ToString(twoByteInt, 2).PadLeft(16, '0');\r\n\t\t\t\t int [] Bits = new int [20]; \r\n\t\t\t\t//SetValueStr(\".STR\",binaryRepresentation);\r\n        // Output the binary representation\r\n        //Console.WriteLine($\"Binary representation: {binaryRepresentation}\");\r\n\r\n        // Extract and output each bit\r\n        for (int j = 15; j >= 0; j--)\r\n        {\r\n            int bit = (twoByteInt >> j) & 1;\r\n            //Console.Write($\"{bit} \");\r\n\t\t\t\t\tBits[j]=bit;\r\n\t\t\t\t\t//SetValueNum(index+\".Report_DOWDays_Status_\"+(17-i).ToString(),bit);\r\n        }\r\nSetValueNum(index+\".Report_DOWDays_Status_1\",Bits[0]);\r\nSetValueNum(index+\".Report_DOWDays_Status_2\",Bits[1]);\r\nSetValueNum(index+\".Report_DOWDays_Status_3\",Bits[2]);\r\nSetValueNum(index+\".Report_DOWDays_Status_4\",Bits[3]);\r\nSetValueNum(index+\".Report_DOWDays_Status_5\",Bits[4]);\r\nSetValueNum(index+\".Report_DOWDays_Status_6\",Bits[5]);\r\nSetValueNum(index+\".Report_DOWDays_Status_7\",Bits[6]);\r\n//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\nint twoByteInt1 = (int)GetValueNum(index+\".ReportControllerProgramHeaderData_IntervalDays_Status\");\r\n\r\n        // Convert the integer to binary representation\r\n        string binaryRepresentation1 = Convert.ToString(twoByteInt1, 2).PadLeft(16, '0');\r\n\t\t\t\t int [] Bits1 = new int [20]; \r\n\t\t\t\t//SetValueStr(\".STR\",binaryRepresentation);\r\n        // Output the binary representation\r\n        //Console.WriteLine($\"Binary representation: {binaryRepresentation}\");\r\n\r\n        // Extract and output each bit\r\n        for (int j = 15; j >= 0; j--)\r\n        {\r\n            int bit = (twoByteInt1 >> j) & 1;\r\n            //Console.Write($\"{bit} \");\r\n\t\t\t\t\tBits1[j]=bit;\r\n\t\t\t\t\t//SetValueNum(index+\".Report_DOWDays_Status_\"+(17-i).ToString(),bit);\r\n        }\r\nSetValueNum(index+\".Report_IntervalDays_Status_1\",Bits1[0]);\r\nSetValueNum(index+\".Report_IntervalDays_Status_2\",Bits1[1]);\r\nSetValueNum(index+\".Report_IntervalDays_Status_3\",Bits1[2]);\r\nSetValueNum(index+\".Report_IntervalDays_Status_4\",Bits1[3]);\r\nSetValueNum(index+\".Report_IntervalDays_Status_5\",Bits1[4]);\r\nSetValueNum(index+\".Report_IntervalDays_Status_6\",Bits1[5]);\r\nSetValueNum(index+\".Report_IntervalDays_Status_7\",Bits1[6]);\r\n\r\n//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\nint twoByteInt2 = (int)GetValueNum(index+\".ReportControllerProgramHeaderData_OddEvenDays_Status\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \r\n        // Convert the integer to binary representation\r\n       string binaryRepresentation2 = Convert.ToString(twoByteInt2, 2).PadLeft(16, '0');\r\n\t\t\t\tint [] Bits2 = new int [20]; \r\n\t\t\t\tSetValueStr(\".STR\",binaryRepresentation2);\r\n        // Output the binary representation\r\n        //Console.WriteLine($\"Binary representation: {binaryRepresentation}\");\r\n\r\n        // Extract and output each bit\r\n        for (int j = 15; j >= 0; j--)\r\n        {\r\n            int bit = (twoByteInt2 >> j) & 1;\r\n            //Console.Write($\"{bit} \");\r\n\t\t\t\t\tBits2[j]=bit;\r\n\t\t\t\t\t//SetValueNum(index+\".Report_DOWDays_Status_\"+(17-i).ToString(),bit);\r\n        }\r\nSetValueNum(index+\".Report_OddEvenDays_Status_1\",Bits2[0]);\r\nSetValueNum(index+\".Report_OddEvenDays_Status_2\",Bits2[1]);\r\nSetValueNum(index+\".Report_OddEvenDays_Status_3\",Bits2[2]);\r\nSetValueNum(index+\".Report_OddEvenDays_Status_4\",Bits2[3]);\r\nSetValueNum(index+\".Report_OddEvenDays_Status_5\",Bits2[4]);\r\nSetValueNum(index+\".Report_OddEvenDays_Status_6\",Bits2[5]);\r\nSetValueNum(index+\".Report_OddEvenDays_Status_7\",Bits2[6]);\r\nSetValueNum(index+\".Report_OddEvenDays_Status_8\",Bits2[7]);\r\nSetValueNum(index+\".Report_OddEvenDays_Status_9\",Bits2[8]);\r\nSetValueNum(index+\".Report_OddEvenDays_Status_10\",Bits2[9]);\r\n\r\n//----------------------------------------------------------------------------Hunter360 Script Irrigation Schedule Set ----------------------------------------------------------------------------\r\ndouble WaterDaysMapDOW, WaterDaysMapOddEven ,WaterDaysMapInterval;\r\n\r\n//For irrigation schudel water days Bit Map\r\n\r\ndouble Setvalue = GetValueNum(index+\".SetControllerProgramHeaderData_ScheduleType_Command\");\r\nswitch (Setvalue)\r\n{\r\n    case 0:\r\n         WaterDaysMapDOW = ( GetValueNum(index+\".Set_DOWDays_Command_1\")* 1 + (GetValueNum(index+\".Set_DOWDays_Command_2\")* 2 )+   (GetValueNum(index+\".Set_DOWDays_Command_3\")* 4)+(GetValueNum(index+\".Set_DOWDays_Command_4\")* 8)+(GetValueNum(index+\".Set_DOWDays_Command_5\")* 16)+(GetValueNum(index+\".Set_DOWDays_Command_6\")* 32)+(GetValueNum(index+\".Set_DOWDays_Command_7\")* 64));\r\n\t\t\t\tSetValueNum(index+\".SetControllerProgramHeaderData_DOWDays_Command\",WaterDaysMapDOW);\r\n\r\n        break;\r\n\t\tcase 1:\r\n         WaterDaysMapOddEven =( GetValueNum(index+\".Set_OddEvenDays_Command_1\")* 1 + (GetValueNum(index+\".Set_OddEvenDays_Command_2\")* 2 )+   (GetValueNum(index+\".Set_OddEvenDays_Command_3\")* 4)+(GetValueNum(index+\".Set_OddEvenDays_Command_4\")* 8)+(GetValueNum(index+\".Set_OddEvenDays_Command_5\")* 16)+(GetValueNum(index+\".Set_OddEvenDays_Command_6\")* 32)+(GetValueNum(index+\".Set_OddEvenDays_Command_7\")* 64)+(GetValueNum(index+\".Set_OddEvenDays_Command_8\")* 128)+(GetValueNum(index+\".Set_OddEvenDays_Command_9\")* 256)+(GetValueNum(index+\".Set_OddEvenDays_Command_10\")* 512));\r\n\t\t\t\tSetValueNum(index+\".SetControllerProgramHeaderData_OddEvenDays_Command\",WaterDaysMapOddEven);\r\n        break;\r\n\r\n    case 2:\r\n         WaterDaysMapInterval =( GetValueNum(index+\".Set_IntervalDays_Command_1\")* 1 + (GetValueNum(index+\".Set_IntervalDays_Command_2\")* 2 )+   (GetValueNum(index+\".Set_IntervalDays_Command_3\")* 4)+(GetValueNum(index+\".Set_IntervalDays_Command_4\")* 8)+(GetValueNum(index+\".Set_IntervalDays_Command_5\")* 16)+(GetValueNum(index+\".Set_IntervalDays_Command_6\")* 32)+(GetValueNum(index+\".Set_IntervalDays_Command_7\")* 64));\r\n\t\t\t\tSetValueNum(index+\".SetControllerProgramHeaderData_IntervalDays_Command\",WaterDaysMapInterval);\r\n        break;\r\n}\r\n\r\n//----------------------------------------------------------------------------Hunter360 Script Irrigation Schedule Delay Clear the ID ----------------------------------------------------------------------------\r\n\r\n\r\nfor (int j=1 ;j <65 ;j++ )\t\r\n{\r\n\tstring indexj = j.ToString();\r\n\tif (GetValueNum(index+\".SetControllerProgramEventRuntimeData_EventType_Command_\"+indexj)==4)\r\n\t{\r\n\t\tSetValueNum(index+\".SetControllerProgramEventRuntimeData_EventId_Command_\"+indexj,0);\r\n\t}\r\n}\r\n\r\n//-----------------------------------------------------------------------------------------------REPORT StartTime-------------------------------------------------------\r\nfor (int j = 1; j <= 10; j++)\r\n      {                       \r\n         string indexj = j.ToString();\r\n    \r\n\r\n               total_min = (int)Stream.Tag.GetValueNum(index+\".ReportControllerProgramHeaderData_StartTime\"+indexj+\"_Status\");\r\n               min  = (int)total_min % 60;\r\n\t\t\t\t\t\t\tif (GetValueNum(\"Botton.TimeFormat\")==0||(GetValueNum(index+\".ReportControllerProgramHeaderData_StartTime\"+indexj+\"_Status\")==65535))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\thour = (int)total_min / 60;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\thour = (int)total_min / 60;\r\n\t\t\t\t\t\t\t\thour=ConvertTo12HourFormat(hour,ref StartTime_ReportMeridian);\r\n\t\t\t\t\t\t\t\tSetValueStr(index+\".Report_Scedule_meridian_StartTime_\"+indexj,StartTime_ReportMeridian);\r\n\t\t\t\t\t\t\t}\r\n               \r\n          \t\t Stream.Tag.SetValueNum(index+\".REPORT_StartTime_Min\"+indexj,min);\r\n               Stream.Tag.SetValueNum(index+\".REPORT_StartTime_Hour\"+indexj,hour); \r\n\t\t\t\t\t\t\t/* \r\n\t\t\t\t//-----------------------------------------------ICC2---------------------------------------------------------\r\n\t\t\t\t\t\t\t total_min = (int)Stream.Tag.GetValueNum(\"ICC2.ReportControllerProgramHeaderData_StartTime\"+indexj+\"_Status\");\r\n               min  = (int)total_min % 60;\r\n               hour = (int)total_min / 60;\r\n          \t\t Stream.Tag.SetValueNum(\"ICC2.REPORT_StartTime_Min\"+indexj,min);\r\n               Stream.Tag.SetValueNum(\"ICC2.REPORT_StartTime_Hour\"+indexj,hour);\r\n              */\r\n      }\r\n\r\n\r\n//-----------------------------------------------------------------------------------------------SET_StartTime-------------------------------------------------------\r\n\r\nfor (int j = 1; j <= 10; j++)\r\n      {                       \r\n         string indexj = j.ToString();\r\n    \r\n\r\n         min = (int)Stream.Tag.GetValueNum(index+\".SET_StartTime_Min\"+indexj);\r\n\t\t\t\tif (GetValueNum(\"Botton.TimeFormat\")==0|| (Stream.Tag.GetValueNum(index+\".SET_StartTime_Hour\"+indexj)>25))\r\n\t\t\t\t{\r\n\t\t\t\t  hour = (int)Stream.Tag.GetValueNum(index+\".SET_StartTime_Hour\"+indexj);\r\n\t\t\t\t\t\r\n\t\t\t  }\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\thour = (int)Stream.Tag.GetValueNum(index+\".SET_StartTime_Hour\"+indexj)+(12*(int)GetValueNum(index+\".Scedule_meridian_StartTime_\"+indexj));\r\n\t\t\t\t//\thour=(hour == 24) ? 0 :hour ;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n         total_min  = (int)min + ((int)hour * 60 );\r\n         Stream.Tag.SetValueNum(index+\".SetControllerProgramHeaderData_StartTime\"+indexj+\"_Command\",total_min);\r\n\t\t\t\t \r\n         /*                              \r\n\t\t\t//-----------------------------------------------ICC2---------------------------------------------------------\r\n\r\n\t\t\t\t min = (int)Stream.Tag.GetValueNum(\"ICC2.SET_StartTime_Min\"+indexj);\r\n\t\t\t\t hour = (int)Stream.Tag.GetValueNum(\"ICC2.SET_StartTime_Hour\"+indexj);\r\n         total_min  = (int)min + ((int)hour * 60 );\r\n         Stream.Tag.SetValueNum(\"ICC2.SetControllerProgramHeaderData_StartTime\"+indexj+\"_Command\",total_min);\r\n          */     \r\n      }\r\n\r\n\r\n\r\n//-----------------------------------------------------------------------------------------------Header-------------------------------------------------------\r\n\r\nint  ddelaySec;\r\n/*\r\nint startMin, endMin;\r\n\r\n\t startMin = (int)Stream.Tag.GetValueNum(index+\".SET_NWWStart_Min\") +\r\n \t(60 * (int)Stream.Tag.GetValueNum(index+\".SET_NWWStart_Hour\"));\r\n \r\n\r\n\tendMin = (int)Stream.Tag.GetValueNum(index+\".SET_NWWEnd_Min\") +\r\n\t(60 * (int)Stream.Tag.GetValueNum(index+\".SET_NWWEnd_Hour\"));\r\n\r\n*/\r\n \tddelaySec = (int)Stream.Tag.GetValueNum(index+\".SET_EventDelay_Sec\") +\r\n\t(60 *  (int)Stream.Tag.GetValueNum(index+\".SET_EventDelay_Min\")) + (3600 *  (int)Stream.Tag.GetValueNum(index+\".SET_EventDelay_Hour\"));\r\n\r\n\r\n\t// Stream.Tag.SetValueNum(index+\".SET_NWWStart\",startMin);\r\n  // Stream.Tag.SetValueNum(index+\".SET_NWWEnd\",endMin);\r\n   Stream.Tag.SetValueNum(index+\".SetControllerProgramHeaderData_EventDelay_Command\",ddelaySec);\r\n//----------------------------------------------------------------------------Hunter360 RunTime----------------------------------------------------------------------------\r\n\r\n\r\nfor (int j=1 ;j <65 ;j++ )\t\r\n\t{\r\n\r\n\t\t\t\tRec = (int)Stream.Tag.GetValueNum(index+\".Set_EventRunTime_Sec_\"+j.ToString()) +(60 *  (int)Stream.Tag.GetValueNum(index+\".Set_EventRunTime_Min_\"+j.ToString())) +(3600 *  (int)Stream.Tag.GetValueNum(index+\".Set_EventRunTime_Hour_\"+j.ToString()));\r\n\t\t\r\n\t\tSetValueNum(index+\".SetControllerProgramEventRuntimeData_EventRunTime_Command_\"+j.ToString(),Rec);\r\n\r\n\t}\r\n\r\n//----------------------------------------------------------------------------Hunter360 Count RunTimes----------------------------------------------------------------------------\r\n\r\n\r\nint RunType, ID, RunTime, Count = 0;\r\n\r\nfor (int j = 1; j <= 25; j++)\r\n    {     \r\n\t\t\t string indexj = j.ToString();\r\n                  \r\n\t\t\t RunType = (int)Stream.Tag.GetValueNum(index+\".Set_EventType_Seq\"+indexj);       \r\n\t\t\t ID = (int)Stream.Tag.GetValueNum(index+\".Set_EventID_Seq\"+indexj); \r\n\t\t\t RunTime = (int)Stream.Tag.GetValueNum(index+\".Set_EventRunTime_Seq\"+indexj);\r\n \r\n\t\t\t if ((RunType > 0) && (ID > 0)  && (RunTime > 0))\r\n\t\t\t{\r\n\t\t\t   Count = Count + 1;\r\n\t\t\t}\r\n\r\n    }\r\n\r\nStream.Tag.SetValueNum(index+\".Set_Count_Seq\",Count);\r\nStream.Tag.SetValueNum(index+\".Set_Sequence_Seq\",1);\r\n\r\n//---------------------------------------------------------------------------------------------Convert 12 Hour Format--------------------------------------------------------------------------------\r\n\r\npublic int ConvertTo12HourFormat(int hour,ref string meridian )\r\n    {\r\n        // Adjust hour to be in the range of 0 to 23\r\n        hour = hour % 24;\r\n\r\n        // Determine whether it's AM or PM\r\n          meridian = (hour < 12) ? \"AM\" : \"PM\";\r\n\t\t\t\t\tint ReportMeridian = (hour < 12) ? 0 : 1;\r\n\t\t\t\t//SetValueStr(Meridian,meridian);\r\n        // Convert hour to 12-hour format\r\n        int hour12 = (hour == 0 || hour == 12) ? 12 : hour % 12;\r\n\r\n        // Build the formatted string\r\n        string formattedHour = hour12.ToString(\"D2\");\r\n\r\n        return hour12;\r\n    }\r\n\r\n\r\n","IsCylic":true,"IsEvent":false,"Cyclic_timer":1000,"IsValidated":false,"IsScriptEnabled":true,"IsRunOnceAtStartup":false,"EnableTag":"","DllFolderPath":"C:\\Users\\ahmed\\OneDrive\\Desktop\\Work\\Hunter\\HunterApp\\Scripts\\Dlls\\","strReferencePaths_csv":"","IncludeReferencesUnderScripts_Ref_Folder":false,"RunScriptInStandbyMode":false,"Data_3":null,"Data_4":null,"Data_5":null,"Data_6":null,"ver":"4.17.20.14","last_save":"2024-04-03 16:04:36"}