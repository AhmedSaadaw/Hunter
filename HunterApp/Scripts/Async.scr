{"Type":null,"Title":"Async","Script_Code":"using System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Data.SQLite;\r\nusing System.IO;\r\n\r\nSetValueNum(\"Script.DashBoardTotalFlow\",1);\r\nSetValueNum(\"Script.SystemDashBoardTotalFlow\",1);\t\r\n\r\n\r\n\r\nList<string>WeathersNamesList = WeatherStation();\r\n\r\nfor(int w=0;w < GetValueNum(\"DashBoard.WeatherNUM\"); w++)\r\n{\r\nstring WName=WeathersNamesList[w];\r\n\t\r\n\tstring SolarRadiationAVG =@\"SELECT COALESCE(AVG(CAST(ScaledValue AS REAL)), 0) AS AvgScaledValue FROM DataDB\r\nWHERE TagName ='\" +WName+\".Weather_SolarRadiation'AND TimeStamp >= strftime('%Y-%m-%d %H:00:00', 'now', 'localtime') AND TimeStamp < strftime('%Y-%m-%d %H:00:00', 'now', 'localtime', '+1 hour')\";\r\n\r\nstring AtmosphericPressureAVG = @\"SELECT COALESCE(AVG(CAST(ScaledValue AS REAL)), 0) AS AvgScaledValue FROM DataDB\r\nWHERE TagName ='\" +WName+\".Weather_AtmosphericPressure'AND TimeStamp >= strftime('%Y-%m-%d %H:00:00', 'now', 'localtime')AND TimeStamp < strftime('%Y-%m-%d %H:00:00', 'now', 'localtime', '+1 hour')\";\r\n\r\nstring WindSpeedAVG = @\"SELECT COALESCE(AVG(CAST(ScaledValue AS REAL)), 0) AS AvgScaledValue FROM DataDB WHERE TagName = '\" +WName+\".Weather_WindSpeed' AND TimeStamp >= strftime('%Y-%m-%d %H:00:00', 'now', 'localtime')AND TimeStamp < strftime('%Y-%m-%d %H:00:00', 'now', 'localtime', '+1 hour')\";\r\n\r\nstring TempMax =@\"SELECT COALESCE (MAX(CAST(ScaledValue AS INTEGER)),0) as MaxScaledValue  FROM DataDB WHERE TagName = '\" +WName+\".Weather_AirTemp' AND strftime('%Y-%m-%d %H:00:00', TimeStamp) = strftime('%Y-%m-%d %H:00:00', 'now', 'localtime')  \";\r\n\r\nstring TempMin =@\"SELECT COALESCE (MIN(CAST(ScaledValue AS INTEGER)),0) as MaxScaledValue  FROM DataDB WHERE TagName ='\" +WName+\".Weather_AirTemp'AND strftime('%Y-%m-%d %H:00:00', TimeStamp) = strftime('%Y-%m-%d %H:00:00', 'now', 'localtime')\";\r\n\r\n\t\r\n\t\r\nvar solarRadiationTask = AVGReadFromSQLTime(SolarRadiationAVG, WName + \".Weather_SolarRadiation_AVG\");\r\nvar atmosphericPressureTask = AVGReadFromSQLTime(AtmosphericPressureAVG, WName + \".Weather_AtmosphericPressure_AVG\");\r\nvar windSpeedTask = AVGReadFromSQLTime(WindSpeedAVG, WName + \".Weather_WindSpeed_AVG\");\r\nvar tempMaxTask = AVGReadFromSQLTime(TempMax, WName + \".Weather_AirTemp_MAX\");\r\nvar tempMinTask = AVGReadFromSQLTime(TempMin, WName + \".Weather_AirTemp_Min\");\t\r\n //Await all tasks concurrently\r\n await Task.WhenAll(solarRadiationTask, atmosphericPressureTask, windSpeedTask, tempMaxTask, tempMinTask);\t\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//================================Function==================================\r\n#region \"Functions\"\r\n\r\n//-----------------------------------------------------------------------------------------------------------------------SQL----------------------------------------------\r\npublic async Task AVGReadFromSQLTime (string Query, string TagName)\r\n{\r\n\r\n        // Specify the path to the SQLite database file\r\n\t\t\t\t\t\t\t\t\tstring filePath = Stream.Application.GetAppPath()+@\"\\Historical\\WEATHER ET.log\";\r\n                // Create a connection to the SQLite database\r\n                using (SQLiteConnection connection = new SQLiteConnection($\"Data Source={filePath};Version=3;\"))\r\n                {\r\n                    connection.Open();\r\n\r\n                    // Specify your SQL query\r\n\t\t\t\t\t\t\t\t\t\t\tstring query = Query;\r\n                 \r\n\r\n                    // Create a command object to execute the query\r\n                    using (SQLiteCommand command = new SQLiteCommand(query, connection))\r\n                    {\r\n\t\t\t\t\t\t\t\t\r\n                        // Execute the query and read data from the database\r\n                        using (SQLiteDataReader reader = command.ExecuteReader())\r\n                        {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Create a list to store the data from the query\r\n                            List<string[]> data = new List<string[]>();\r\n\r\n                            while (reader.Read())\r\n                            {\r\n                               //data.Add(new string[] { reader[0].ToString(), reader[1].ToString(),reader[2].ToString(),reader[3].ToString() });\r\n                               // Console.WriteLine(reader[0] +\",\"+ reader[1] + \",\" + reader[2]);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\tSetValueStr(\".SQLTEST\",reader[0] +\",\"+ reader[1]);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\Historical\\test.txt\",TagName+\"---> \"+reader[0].ToString());\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetValueStr(TagName,reader[0].ToString());\r\n                            }\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n                            \r\n                        } \r\n                    }\r\n                }\r\n\r\n        }\r\n\r\n\r\n\r\n//---------------------------------------------------------------------------------weather Station read------------------------------------\r\n\r\npublic List<string> WeatherStation ()\r\n{\r\n\r\n string json = File.ReadAllText(Stream.Application.GetAppPath()+@\"\\H360\\weatherstations.json\");\r\n        List<Weather> weathers = JsonConvert.DeserializeObject<List<Weather>>(json);\r\n\r\n            List<string> weatherNames = new List<string>();\r\n        ;\r\n\r\n            foreach (Weather weather in weathers)\r\n            {\r\n                if(weather != null )\r\n                {\r\n                    weatherNames.Add(weather.WSName);\r\n                    \r\n                }\r\n            }\r\n\r\n\t\t\t\t\t\treturn weatherNames;\r\n\r\n\r\n       //  Console.WriteLine(\"Controller Names: \" + string.Join(\", \", controllerNames));\r\n            //Console.WriteLine(\"Number of Controller Names: \" + controllerCount);\r\n}\r\n\r\n\r\n\r\n#endregion\r\n\r\npublic class Weather\r\n    {\r\n       \r\n        public string WSName { get; set; }\r\n        public string WSLabel { get; set; }\r\n        public object WSIPAddress { get; set; }\r\n\t\t\t\tpublic string SiteLabel { get; set; }\r\n        public string SiteName { get; set; }\r\n    }\r\n\r\n","IsCylic":true,"IsEvent":false,"Cyclic_timer":300000,"IsValidated":false,"IsScriptEnabled":true,"IsRunOnceAtStartup":false,"EnableTag":"","DllFolderPath":"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\Scripts\\Dlls\\","strReferencePaths_csv":"","IncludeReferencesUnderScripts_Ref_Folder":true,"RunScriptInStandbyMode":false,"Data_3":null,"Data_4":null,"Data_5":null,"Data_6":null,"ver":"4.17.26.6","last_save":"2024-07-08 06:07:10"}