{"Type":null,"Title":"ETo","Script_Code":"//------------------------------------------------------------------------------------------------------ET--------------------------------------------------------------------------------------------------\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Data.SQLite;\r\nusing System.IO;\r\n\r\n\r\n\r\nstring GeneralPath=Stream.Application.GetAppPath();\r\nvar date =DateTime.Now;\r\nList<string>WeathersNamesList = WeatherStation();\r\n\r\npublic const double TdewSubtract = 2.0; \r\npublic const double Cp = 1.013;\r\npublic const double albedo = 0.2302;\r\n\r\n\r\n\r\nfor(int w=0;w < GetValueNum(\"DashBoard.WeatherNUM\"); w++)\r\n{\r\nstring WName=WeathersNamesList[w];\r\n\r\nif (GetValueNum(WName+\".WeatherStation_Status\")==1)\r\n\t{\r\n/*\r\nstring SolarRadiationAVG =@\"SELECT COALESCE(AVG(CAST(ScaledValue AS REAL)), 0) AS AvgScaledValue FROM DataDB\r\nWHERE TagName ='\" +WName+\".Weather_SolarRadiation'AND TimeStamp >= strftime('%Y-%m-%d %H:00:00', 'now', 'localtime') AND TimeStamp < strftime('%Y-%m-%d %H:00:00', 'now', 'localtime', '+1 hour')\";\r\n\r\nstring AtmosphericPressureAVG = @\"SELECT COALESCE(AVG(CAST(ScaledValue AS REAL)), 0) AS AvgScaledValue FROM DataDB\r\nWHERE TagName ='\" +WName+\".Weather_AtmosphericPressure'AND TimeStamp >= strftime('%Y-%m-%d %H:00:00', 'now', 'localtime')AND TimeStamp < strftime('%Y-%m-%d %H:00:00', 'now', 'localtime', '+1 hour')\";\r\n\r\nstring WindSpeedAVG = @\"SELECT COALESCE(AVG(CAST(ScaledValue AS REAL)), 0) AS AvgScaledValue FROM DataDB WHERE TagName = '\" +WName+\".Weather_WindSpeed' AND TimeStamp >= strftime('%Y-%m-%d %H:00:00', 'now', 'localtime')AND TimeStamp < strftime('%Y-%m-%d %H:00:00', 'now', 'localtime', '+1 hour')\";\r\n\r\nstring TempMax =@\"SELECT COALESCE (MAX(CAST(ScaledValue AS INTEGER)),0) as MaxScaledValue  FROM DataDB WHERE TagName = '\" +WName+\".Weather_AirTemp' AND strftime('%Y-%m-%d %H:00:00', TimeStamp) = strftime('%Y-%m-%d %H:00:00', 'now', 'localtime')  \";\r\n\r\nstring TempMin =@\"SELECT COALESCE (MIN(CAST(ScaledValue AS INTEGER)),0) as MaxScaledValue  FROM DataDB WHERE TagName ='\" +WName+\".Weather_AirTemp'AND strftime('%Y-%m-%d %H:00:00', TimeStamp) = strftime('%Y-%m-%d %H:00:00', 'now', 'localtime')\";\r\n\r\n\r\nawait AVGReadFromSQLTime(SolarRadiationAVG,WName+\".Weather_SolarRadiation_AVG\");\r\nawait AVGReadFromSQLTime(AtmosphericPressureAVG,WName+\".Weather_AtmosphericPressure_AVG\");\r\nawait AVGReadFromSQLTime(WindSpeedAVG,WName+\".Weather_WindSpeed_AVG\");\r\nawait AVGReadFromSQLTime(TempMax,WName+\".Weather_AirTemp_MAX\");\r\nawait AVGReadFromSQLTime(TempMin,WName+\".Weather_AirTemp_Min\");\r\n\r\nvar solarRadiationTask = AVGReadFromSQLTime(SolarRadiationAVG, WName + \".Weather_SolarRadiation_AVG\");\r\nvar atmosphericPressureTask = AVGReadFromSQLTime(AtmosphericPressureAVG, WName + \".Weather_AtmosphericPressure_AVG\");\r\nvar windSpeedTask = AVGReadFromSQLTime(WindSpeedAVG, WName + \".Weather_WindSpeed_AVG\");\r\nvar tempMaxTask = AVGReadFromSQLTime(TempMax, WName + \".Weather_AirTemp_MAX\");\r\nvar tempMinTask = AVGReadFromSQLTime(TempMin, WName + \".Weather_AirTemp_Min\");\t\r\n //Await all tasks concurrently\r\n await Task.WhenAll(solarRadiationTask, atmosphericPressureTask, windSpeedTask, tempMaxTask, tempMinTask);\t\r\n\t\r\n*/\r\n// Const\r\n    \r\n\t// WeatherDataConstants.Radiation =  GetValueNum(WName+\".Weather_SolarRadiation_AVG\")*0.0864;\r\n \tWeatherDataConstants.Radiation =  GetValueNum(WName+\".Weather_SolarRadiation_AVG\")*0.0864;\r\n \tWeatherDataConstants.Tmin =  GetValueNum(WName+\".Weather_AirTemp_Min\");\r\n\t WeatherDataConstants.Tmax =  GetValueNum(WName+\".Weather_AirTemp_MAX\");\r\n\tdouble humidity = GetValueNum(WName+\".Weather_Humidity\");\r\n\t \r\n//Calling\r\n\t\r\n//  File.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"Time\" +\"---> \"+date.ToString(\"yyyy-MM-dd hh:mm\")+Environment.NewLine);\r\n//  File.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"{\"+Environment.NewLine);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"Solar Radiation AVG\" +\"---> \"+WeatherDataConstants.Radiation.ToString()+Environment.NewLine);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"Tmin\" +\"---> \"+WeatherDataConstants.Tmin.ToString()+Environment.NewLine);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"Tmax\" +\"---> \"+WeatherDataConstants.Tmax.ToString()+Environment.NewLine);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"humidity\" +\"---> \"+humidity.ToString()+Environment.NewLine);\r\n\t\r\n\t\t\t\tdouble tMean = CalculateTmean();\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"tMean\" +\"---> \"+tMean.ToString()+Environment.NewLine);\r\n        double dewpoint = CalculateDewpoint();\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"dewpoint\" +\"---> \"+dewpoint.ToString()+Environment.NewLine);\r\n        int j = CalculateJ();\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"j\" +\"---> \"+j.ToString()+Environment.NewLine);\r\n        //double p = CalculateP();\r\n\t\t\t\tdouble p = GetValueNum(WName+\".Weather_AtmosphericPressure_AVG\")/1000;\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"p\" +\"---> \"+p.ToString()+Environment.NewLine);\r\n        double gamma = CalculateGamma(p);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"gamma\" +\"---> \"+gamma.ToString()+Environment.NewLine);\r\n        double delta = CalculateDelta(tMean);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"delta\" +\"---> \"+delta.ToString()+Environment.NewLine);\r\n        double deltaRad = CalculateDeltaRad();\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"deltaRad\" +\"---> \"+deltaRad.ToString()+Environment.NewLine);\r\n        double dr = CalculateDr();\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"dr\" +\"---> \"+dr.ToString()+Environment.NewLine);\r\n        double phi = CalculatePhi();\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"phi\" +\"---> \"+phi.ToString()+Environment.NewLine);\r\n        double omegaS = CalculateOmegaS(phi, deltaRad);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"omegaS\" +\"---> \"+omegaS.ToString()+Environment.NewLine);\r\n        double ra = CalculateRa(omegaS, dr, phi, deltaRad);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"ra\" +\"---> \"+ra.ToString()+Environment.NewLine);\r\n        double n = CalculateN(omegaS);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"n\" +\"---> \"+n.ToString()+Environment.NewLine);\r\n        double emin = CalculateEmin(WeatherDataConstants.Tmin);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"emin\" +\"---> \"+emin.ToString()+Environment.NewLine);\r\n        double emax = CalculateEmax(WeatherDataConstants.Tmax);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"emax\" +\"---> \"+emax.ToString()+Environment.NewLine);\r\n        double eTdew = CalculateDewpointEs(dewpoint);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"eTdew\" +\"---> \"+eTdew.ToString()+Environment.NewLine);\r\n        //double ea = CalculateEa(WeatherDataConstants.Tdew, p);\r\n\t\t\t\t  double ea = CalculateEa(humidity,emin,emax);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"ea\" +\"---> \"+ea.ToString()+Environment.NewLine);\r\n        double es = CalculateEs(emin, emax);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"es\" +\"---> \"+es.ToString()+Environment.NewLine);\r\n        double esEa = CalculateEsEa(es, ea);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"esEa\" +\"---> \"+esEa.ToString()+Environment.NewLine);\r\n        double rso = CalculateRso(ra);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"rso\" +\"---> \"+rso.ToString()+Environment.NewLine);\r\n        double rs = CalculateRs(WeatherDataConstants.Radiation,WeatherDataConstants.SunlightHours, n, WeatherDataConstants.Tmin, WeatherDataConstants.Tmax, ra);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"rs\" +\"---> \"+rs.ToString()+Environment.NewLine);\r\n        double rns = CalculateRns(rs, albedo);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"rns\" +\"---> \"+rns.ToString()+Environment.NewLine);\r\n        double rnl = CalculateRnl(rso, ea, rs, WeatherDataConstants.Tmin, WeatherDataConstants.Tmax);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"rnl\" +\"---> \"+rnl.ToString()+Environment.NewLine);\r\n        double rn = CalculateRn(rns, rnl);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"rn\" +\"---> \"+rn.ToString()+Environment.NewLine);\r\n        //double u2 = CalculateU2(2);\r\n\t\t\t\tdouble u2 = GetValueNum(WName+\".Weather_WindSpeed_AVG\");\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"u2\" +\"---> \"+u2.ToString()+Environment.NewLine);\r\n        double eto = CalculateETO(WeatherDataConstants.Latitude, WeatherDataConstants.Altitude, WeatherDataConstants.Date,\r\n        WeatherDataConstants.Tmin, WeatherDataConstants.Tmax, delta, rn, gamma, u2, esEa);\r\n//\tFile.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"eto 24\" +\"---> \"+eto.ToString()+Environment.NewLine);\r\n        double hargreavesEto = CalculateHargreavesETO(eto, tMean, WeatherDataConstants.Tmin, WeatherDataConstants.Tmax, ra);\r\n//  File.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"hargreavesEto\" +\"---> \"+hargreavesEto.ToString()+Environment.NewLine);\r\n\r\n\r\nif (date.Hour !=0 )\r\n{\r\n double etAcum = (eto/24)*0.0393701;\r\n\t\r\n//File.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"etAcum H\" +\"---> \"+etAcum.ToString()+Environment.NewLine);\r\n//File.AppendAllText(GeneralPath+@\"\\Historical\\Value.txt\",\"}\"+Environment.NewLine);\r\n\t\r\n SetValueNum(WName+\".Weather_AccumETO\",GetValueNum(WName+\".Weather_AccumETO\")+etAcum);\r\n}\r\nelse \r\n{\r\n\tif (GetValueNum(WName+\".Weather_AccumETO\") !=0)\r\n\t{\r\n\t double etAcum = (eto/24)*0.0393701;\r\n\t SetValueNum(WName+\".Weather_AccumETO\",GetValueNum(WName+\".Weather_AccumETO\")+etAcum);\t\r\n   SetValueNum(WName+\".Weather_PreviosDayETO\",GetValueNum(WName+\".Weather_AccumETO\"));\r\n   SetValueNum(WName+\".Weather_AccumETO\",0);\r\n\t}\r\n}\r\n\r\n/*\r\ndouble previousETo= GetValueNum(WName+\".Weather_PreviosDayETO\");\r\n//previousETo=(previousETo/0.3149608)*100;\r\nint Adjust_amount= (int)GetValueNum(WName+\".Site_Adjust_amount\");\r\ndouble Eto = (((5*10)+50*100*((previousETo))/(((3.2)*6+14)))/10)+Adjust_amount;\r\n\r\nSetValueNum (WName+\".ETO_Equation\",Eto);\r\n\r\n\r\n*/\r\n}\r\n}\r\n\r\nRetentive();\r\n\r\n//---------------Faunc-----\r\n\r\n\r\n\r\n    private static double CalculateTmean()\r\n    {\r\n        \r\n        if (WeatherDataConstants.Date > DateTime.MinValue)\r\n        {\r\n            return (WeatherDataConstants.Tmin + WeatherDataConstants.Tmax) / 2;\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    private static double CalculateDewpoint()\r\n    {\r\n        if (WeatherDataConstants.Date > DateTime.MinValue && WeatherDataConstants.Tdew <= WeatherDataConstants.Tmin)\r\n        {\r\n            return WeatherDataConstants.Tdew;\r\n        }\r\n        else if (WeatherDataConstants.Date > DateTime.MinValue)\r\n        {\r\n            return WeatherDataConstants.Tmin - TdewSubtract;\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    private static int CalculateJ()\r\n    {\r\n        if (WeatherDataConstants.Date > DateTime.MinValue)\r\n        {\r\n            return WeatherDataConstants.Date.DayOfYear;\r\n        }\r\n        else\r\n        {\r\n            return -1; // error or invalid date\r\n        }\r\n    }\r\n\r\n    private static double CalculateP()\r\n    {\r\n        if (WeatherDataConstants.Date > DateTime.MinValue)\r\n        {\r\n            return Math.Round(101.3 * Math.Pow((293 - 0.0065 * WeatherDataConstants.Altitude) / 293, 5.26), 2);\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    public static double CalculateGamma(double atmosphericPressure)\r\n    {\r\n        double Cp = 1.013; \r\n        double gamma = 0.0;\r\n\r\n        if (!double.IsNaN(atmosphericPressure))\r\n        {\r\n            gamma = (Cp * atmosphericPressure) / (0.622 * 2.45);\r\n\t\t\t\t\t\tgamma /= 10; // Divide by 10 to convert from kPa/C to MPa/C\r\n            //gamma /= 1000; // Divide by 1000 to convert from kPa/C to MPa/C\r\n        }\r\n\r\n        return gamma;\r\n    }\r\n\r\n    private static double CalculateDelta(double tMean)\r\n    {\r\n        return Math.Round((4098 * (0.6108 * Math.Exp((17.27 * tMean) / (tMean + 237.3)))) / Math.Pow((tMean + 237.3), 2), 4);\r\n    }\r\n\r\n    private static double CalculateDeltaRad()\r\n    {\r\n        if (WeatherDataConstants.Date != DateTime.MinValue)\r\n        {\r\n            int j = CalculateJ();\r\n            return Math.Round(0.409 * Math.Sin((2 * Math.PI / 365) * j - 1.39), 4);\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    private static double CalculateDr()\r\n    {\r\n        if (WeatherDataConstants.Date != DateTime.MinValue)\r\n        {\r\n            int j = CalculateJ();\r\n            return Math.Round(1 + 0.033 * Math.Cos((2 * Math.PI / 365) * j), 4);\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    private static double CalculatePhi()\r\n    {\r\n        if (WeatherDataConstants.Date != DateTime.MinValue)\r\n        {\r\n            return Math.Round((WeatherDataConstants.Latitude / 180) * Math.PI, 3);\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    private static double CalculateOmegaS(double phi, double deltaRad)\r\n    {\r\n        if (!double.IsNaN(phi) && !double.IsNaN(deltaRad))\r\n        {\r\n            return Math.Acos(-1 * Math.Tan(phi) * Math.Tan(deltaRad));\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    private static double CalculateRa(double omegaS, double dr, double phi, double deltaRad)\r\n    {\r\n        if (!double.IsNaN(omegaS) && !double.IsNaN(dr))\r\n        {\r\n            return ((24 * 60) / Math.PI) * 0.082 * dr * ((omegaS * Math.Sin(phi) * Math.Sin(deltaRad)) + (Math.Cos(phi) * Math.Cos(deltaRad) * Math.Sin(omegaS)));\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    private static double CalculateN(double omegaS)\r\n    {\r\n        if (!double.IsNaN(omegaS))\r\n        {\r\n            return (24 / Math.PI) * omegaS;\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    private static double CalculateEmin(double tMin)\r\n    {\r\n        if (!double.IsNaN(tMin))\r\n        {\r\n            return 0.6108 * Math.Exp(17.27 * tMin / (tMin + 237.3));\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    private static double CalculateEmax(double tMax)\r\n    {\r\n        if (!double.IsNaN(tMax))\r\n        {\r\n            return 0.6108 * Math.Exp(17.27 * tMax / (tMax + 237.3));\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    private static double CalculateEwet(double twet, double tdry, double p)\r\n    {\r\n        if (!double.IsNaN(twet) && !double.IsNaN(tdry) && !double.IsNaN(p))\r\n        {\r\n            return 0.6108 * Math.Exp(17.27 * twet / (twet + 237.3));\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    private static double CalculateEs(double eTmin, double eTmax)\r\n    {\r\n        if (!double.IsNaN(eTmin) && !double.IsNaN(eTmax))\r\n        {\r\n            return (eTmax + eTmin) / 2;\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    public static double CalculateETdew(double dewpoint)\r\n    {\r\n        if (!double.IsNaN(dewpoint))\r\n        {\r\n            return 0.6108 * Math.Exp(17.27 * dewpoint / (dewpoint + 237.3));\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    public static double CalculateDewpointEs(double Dewpoint)\r\n    {\r\n        if (!double.IsNaN(Dewpoint))\r\n        {\r\n            return 0.6108 * Math.Exp(17.27 * (Dewpoint) / (Dewpoint + 237.3));\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n\r\nprivate static double CalculateEa(double RHmean, double eTmin, double eTmax)\r\n    {\r\n        //if (RHmean >0 && eTmin >0 && eTmax >0)\r\n        //{\r\n            //return 0.6108 * Math.Exp(17.27 * tdew / (tdew + 237.3));\r\n\t\t\t\t\t\treturn(RHmean / 100.0) * ((eTmin + eTmax) / 2.0);\r\n       // }\r\n      //  else\r\n       // {\r\n       //     return double.NaN;\r\n       // }\r\n    }\r\n\r\n\r\n/*\r\n\r\n    private static double CalculateEa(double tdew, double p)\r\n    {\r\n        if (!double.IsNaN(tdew))\r\n        {\r\n            return 0.6108 * Math.Exp(17.27 * tdew / (tdew + 237.3));\r\n\t\t\t\t\t\t//return(RHmean / 100.0) * ((eTmin + eTmax) / 2.0);\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n*/\r\n\r\n    private static double CalculateEsEa(double es, double ea)\r\n    {\r\n        if (!double.IsNaN(es) && !double.IsNaN(ea))\r\n        {\r\n            return es - ea;\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n   \r\n    private static double CalculateRso(double ra)\r\n    {\r\n        double asValue = 0.25; // Assumed constant value for calculation\r\n        double bs = 0.50; // Assumed constant value for calculation\r\n        if (!double.IsNaN(ra))\r\n        {\r\n            return (asValue + bs) * ra;\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    private static double CalculateRs(double Radiation, double sunlightHours, double n, double tmin, double tmax, double ra)\r\n        {\r\n            double krs = 0.16;\r\n            double asValue = 0.25; // Define asValue somewhere in your code\r\n            double bsValue = 0.50; // Define bsValue somewhere in your code\r\n\r\n\r\n            return Radiation;\r\n\r\n\r\n            /*\r\n                if (!double.IsNaN(sunlightHours) && !double.IsNaN(n))\r\n                {\r\n                    return (asValue + bsValue * Math.Min(sunlightHours / n, 1)) * ra;\r\n                }\r\n                else if (!double.IsNaN(tmin) && !double.IsNaN(tmax) && !double.IsNaN(ra))\r\n                {\r\n                    return krs * Math.Sqrt(tmax - tmin) * ra;\r\n                }\r\n                else\r\n                {\r\n                    return double.NaN;\r\n                }\r\n\r\n            */\r\n        }\r\n    private static double CalculateRns(double rs, double albedo)\r\n    {\r\n        if (!double.IsNaN(rs))\r\n        {\r\n            return (1 - albedo) * rs;\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    private static double CalculateRnl(double rso, double ea, double rs, double tmin, double tmax)\r\n    {\r\n        double stefanBoltzmann = 4.903 * Math.Pow(10, -9); // Stefan-Boltzmann constant in MJ/m^2/day/K^4\r\n        if (!double.IsNaN(rso) && !double.IsNaN(ea) && !double.IsNaN(rs))\r\n        {\r\n            return stefanBoltzmann * ((Math.Pow(tmax + 273.16, 4) + Math.Pow(tmin + 273.16, 4)) / 2) *\r\n                   (0.34 - 0.14 * Math.Sqrt(ea)) * ((1.35 * rs / rso) - 0.35);\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    private static double CalculateRn(double rns, double rnl)\r\n    {\r\n        if (!double.IsNaN(rns) && !double.IsNaN(rnl))\r\n        {\r\n            return rns - rnl;\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    private static double CalculateU2(double anemometerHeight)\r\n    {\r\n        double u2_default = 1.0; // Default value for u2 if anemometer height is not 2 meters\r\n\r\n        if (!double.IsNaN(anemometerHeight) && anemometerHeight == 2)\r\n        {\r\n            // Return 2 if the anemometer height is 2 meters\r\n            return 2.0;\r\n        }\r\n        else\r\n        {\r\n            // Return the default value for other anemometer heights\r\n            return u2_default;\r\n        }\r\n    }\r\n\r\n\r\n    private static double CalculateETO(double latitude, double altitude, DateTime date, double tMin, double tMax, double delta, double rn, double gamma, double u2, double esMinusEa)\r\n    {\r\n        if (!double.IsNaN(latitude) && !double.IsNaN(altitude) && date > DateTime.MinValue &&\r\n            !double.IsNaN(tMin) && !double.IsNaN(tMax))\r\n        {\r\n            double tMean = (tMin + tMax) / 2;\r\n            double numerator = (0.408 * delta * (rn - 0)) + gamma * (900 / (tMean + 273)) * Math.Max(u2, 0.5) * esMinusEa;\r\n            double denominator = (delta + gamma * (1 + 0.34 * Math.Max(u2, 0.5)));\r\n            return numerator / denominator;\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n    public static double CalculateHargreavesETO(double faoETO, double tMean, double tMin, double tMax, double ra)\r\n    {\r\n        if (!double.IsNaN(faoETO))\r\n        {\r\n            return 0.0023 * (tMean + 17.8) * Math.Sqrt(tMax - tMin) * ra * 0.408;\r\n        }\r\n        else\r\n        {\r\n            return double.NaN;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n//-----------------------------------------------------------------------------------------------------------------------SQL----------------------------------------------\r\n\r\npublic async Task AVGReadFromSQLTime (string Query, string TagName)\r\n{\r\n\r\n        // Specify the path to the SQLite database file\r\n\t\t\t\t\t\t\t\t\tstring filePath = Stream.Application.GetAppPath()+@\"\\Historical\\WEATHER ET.log\";\r\n                // Create a connection to the SQLite database\r\n\t\t\t\t\t\t//\tif (File.Exists(filePath))\r\n\t\t\t\t\t\t//\t{\r\n                using (SQLiteConnection connection = new SQLiteConnection($\"Data Source={filePath};Version=3;\"))\r\n                {\r\n                    connection.Open();\r\n\r\n                    // Specify your SQL query\r\n\t\t\t\t\t\t\t\t\t\t\tstring query = Query;\r\n                 \r\n\r\n                    // Create a command object to execute the query\r\n                    using (SQLiteCommand command = new SQLiteCommand(query, connection))\r\n                    {\r\n\t\t\t\t\t\t\t\t\r\n                        // Execute the query and read data from the database\r\n                        using (SQLiteDataReader reader = command.ExecuteReader())\r\n                        {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Create a list to store the data from the query\r\n                            List<string[]> data = new List<string[]>();\r\n\r\n                            while (reader.Read())\r\n                            {\r\n                               //data.Add(new string[] { reader[0].ToString(), reader[1].ToString(),reader[2].ToString(),reader[3].ToString() });\r\n                               // Console.WriteLine(reader[0] +\",\"+ reader[1] + \",\" + reader[2]);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\tSetValueStr(\".SQLTEST\",reader[0] +\",\"+ reader[1]);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\Historical\\test.txt\",TagName+\"---> \"+reader[0].ToString());\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSetValueStr(TagName,reader[0].ToString());\r\n                            }\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n                            \r\n                        } \r\n                    }\r\n                }\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t//\t\t}\r\n\r\n        }\r\n\r\n//---------------------------------------------------------------------------------weather Station read------------------------------------\r\n\r\npublic List<string> WeatherStation ()\r\n{\r\n\r\n string json = File.ReadAllText(Stream.Application.GetAppPath()+@\"\\H360\\weatherstations.json\");\r\n//\tif (File.Exists(json))\r\n\t//{\r\n        List<Weather> weathers = JsonConvert.DeserializeObject<List<Weather>>(json);\r\n\r\n            List<string> weatherNames = new List<string>();\r\n        ;\r\n\r\n            foreach (Weather weather in weathers)\r\n            {\r\n                if(weather != null )\r\n                {\r\n                    weatherNames.Add(weather.WSName);\r\n                    \r\n                }\r\n            }\r\n\r\n\t\t\t\t\t\treturn weatherNames;\r\n\r\n\t//}\r\n\t//else \r\n\t//{\r\n\t\treturn null;\r\n\t//}\r\n       //  Console.WriteLine(\"Controller Names: \" + string.Join(\", \", controllerNames));\r\n            //Console.WriteLine(\"Number of Controller Names: \" + controllerCount);\r\n}\r\n//---------------------------------------------------------------------------------retentive------------------------------------\r\npublic async Task Retentive ()\r\n{\r\n\tstring tags=null;\r\n\tstring retPath=Stream.Application.GetAppPath()+@\"\\Retn\\WeatherTags.json\";\r\n\tList<Tag> list2 = new List<Tag>();\r\n\tlist2 = Stream.Application.GetTags();\r\n\tforeach(Tag t in list2)\r\n\t{\r\n\t if((t.Name.Contains(\"WS0\") && t.Name.Contains(\"Site\"))|| t.Name.Contains(\"ETO\") )\r\n\t\t\t{\r\n\t\t\t\tif (tags ==null)\r\n\t\t\t\t{\r\n\t\t\t\t tags = t.Name+\",\";\r\n\t\t\t\t}\r\n\t\t\t\telse \r\n\t\t\t\t{\r\n\t\t\t\t\t tags += t.Name+\",\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t}\r\n\tStream.FileSystem.SaveTagsToFileJson(retPath,tags);\r\n}\r\n\r\n\r\n//------------------------------------------------------------------------------------classses------------------------------------------------------------------------------------------------------------\r\n\r\npublic class Weather\r\n    {\r\n       \r\n        public string WSName { get; set; }\r\n        public string WSLabel { get; set; }\r\n        public object WSIPAddress { get; set; }\r\n\t\t\t\tpublic string SiteLabel { get; set; }\r\n        public string SiteName { get; set; }\r\n    }\r\n\r\n\r\n//------------------------------------\r\n\r\npublic static class WeatherDataConstants\r\n{\r\n    public static readonly DateTime Date = new DateTime(2021, 11, 15);\r\n\t\tprivate static double _tmin = 17.5;\r\n    public static double Tmin \r\n\t\t\t{\r\n            get { return _tmin; }\r\n            set { _tmin = value; }\r\n      }\r\n\t\tprivate static double _tmax = 28.7;\r\n\t\tpublic static double Tmax \r\n\t\t\t{\r\n            get { return _tmax; }\r\n            set { _tmax = value; }\r\n      }\r\n    public const double SunlightHours = 8.0;\r\n    public const double Altitude = 700.0;\r\n    public const double Latitude = 17.88;\r\n     private static double _radiation = 5;\r\n        public static double Radiation\r\n        {\r\n            get { return _radiation; }\r\n            set { _radiation = value; }\r\n        }\r\n    public const double Tdew = 15.5; \r\n}\r\n\r\n\r\nSetValueNum(\"Script.EtoEnable\",0);\r\n","IsCylic":true,"IsEvent":false,"Cyclic_timer":2000,"IsValidated":false,"IsScriptEnabled":true,"IsRunOnceAtStartup":false,"EnableTag":"Script.EtoEnable","DllFolderPath":"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\Scripts\\Dlls\\","strReferencePaths_csv":"","IncludeReferencesUnderScripts_Ref_Folder":true,"RunScriptInStandbyMode":false,"Data_3":null,"Data_4":null,"Data_5":null,"Data_6":null,"ver":"4.17.27.3","last_save":"2024-07-16 15:07:11"}