{"Type":null,"Title":"Json","Script_Code":"using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing Newtonsoft.Json.Linq;\r\nusing System.Text;\t\t\r\nusing System.IO;\r\nusing System.Linq;\t\t\r\nusing System.Threading.Tasks;\r\nusing System.Threading;\r\n\r\n\r\nstring filePathc=Stream.Application.GetAppPath()+@\"\\H360\\controllers.json\";\r\nstring retPath=Stream.Application.GetAppPath()+@\"\\Retn\\WeatherTags.json\";\r\nstring ReportPath=Stream.Application.GetAppPath()+@\"\\Reports\\ReportText\\\";\r\nstring ICC2TotalFlowRetPath=Stream.Application.GetAppPath()+@\"\\Retn\\ICC2TotalFlow.json\";\r\nstring ACC1TotalFlowRetPath=Stream.Application.GetAppPath()+@\"\\Retn\\ACC1TotalFlow.json\";\r\nstring WeatherName,Weatherlabel;\r\nint currentMinute = DateTime.Now.Minute;\r\n\r\nif (GetValueNum(\"Botton.Refresh\")==1)\r\n{\r\n\tawait Task.Delay (100);\r\n\tSetValueNum(\"Botton.Refresh\",0);\r\n}\r\n\r\nif (GetValueNum(\"Script.ReadingTags\")==0)\r\n{\r\n\tif (File.Exists(retPath))\r\n\t{\r\n\tStream.FileSystem.ReadTagsFromFileJson(retPath);\r\n\tStream.FileSystem.ReadTagsFromFileJson(ICC2TotalFlowRetPath);\t\r\n\tStream.FileSystem.ReadTagsFromFileJson(ACC1TotalFlowRetPath);\t\t\r\n\t}\r\n\tSetValueNum(\"Script.ReadingTags\",1);\r\n}\r\n\r\n\r\n\r\n//-------------------------------------------------------------------------------------------------------Read Retentive ICC2 Flow Total-------------------------------------------------------------------------------------\r\n        \r\nif (GetValueNum(\"Script.ReadingTags\")==1)\r\n\t\t\t{\r\n\t\t \t// Check if the current minute is one of the specified ones\r\n        if (currentMinute == 0 || currentMinute == 10 || currentMinute == 20 || \r\n            currentMinute == 30 || currentMinute == 40|| currentMinute == 50)\r\n        {\r\n           Retentive();   //ICC2 & Rest alarm anlysis \r\n\t\t\t\t\t Retentive_ACC1();\r\n        }\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n//---------------------------------------------------------------------------------------------------------- Site ---------------------------------------------------------------------------------\r\n        \r\n\t\t\t\tpublic int counter=0;\r\n\t\t\t\t//Read JSON file\r\n\t\t\t\tstring filePath=Stream.Application.GetAppPath()+@\"\\H360\\sites.json\";\r\n\t\t\t\tif (File.Exists(filePath))\r\n         {\r\n           // You can handle this situation, throw an exception, or return an empty list.\r\n             \r\n        \r\n           string json = File.ReadAllText(filePath);\r\n\r\n          // Parse JSON\r\n          JArray data = JArray.Parse(json);\r\n\r\n          // 1. List of unique SiteNames\r\n          HashSet<string> uniqueSites = new HashSet<string>();\r\n\t\t\t  \tHashSet<string> uniqueSiteslabel = new HashSet<string>();\r\n\t\t\t  \tSetValueNum(\"Script.SiteDashBoardNum\",(double)data.Count);\r\n\t\t\t\r\n          foreach (JObject item in data)\r\n          {\r\n            uniqueSites.Add(item[\"SiteName\"].ToString());\r\n\t\t\t\t\t\tuniqueSiteslabel.Add(item[\"SiteLabel\"].ToString());\r\n          }\r\n          //Console.WriteLine(\"List of unique SiteNames:\");\r\n\t\t\t  \tif(uniqueSites.Count !=0 )\r\n\t\t\t  \t{\t\r\n            foreach (string site in uniqueSites)\r\n          {\r\n            SetValueStr(\"Site.Name_\"+counter.ToString(),site);\r\n\t\t\t\t\t\t\tcounter++;\r\n          }\r\n\t\t\t\t\tcounter=0;\r\n\t\t\t\t\tforeach (string sitelabel in uniqueSiteslabel)\r\n          {\r\n            SetValueStr(\"Site.Label_\"+counter.ToString(),sitelabel);\r\n\t\t\t\t\t\tcounter++;\r\n          }\t\r\n        }\r\n\t\t\t }\r\n\r\n\r\n//------------------------------------------------------------------------------------\r\nint counterw=0;\r\nstring filePathw=Stream.Application.GetAppPath()+@\"\\H360\\weatherstations.json\";\r\n\r\nif (File.Exists(filePathw))\r\n {\r\n    string jsonw = File.ReadAllText(filePathw);\r\n\r\n        // Parse JSON\r\n        JArray dataw = JArray.Parse(jsonw);\r\n\r\n        // 1. List of unique SiteNames\r\n        HashSet<string> uniqueWeatherName =new HashSet<string>();\r\n\t\t\t\tHashSet<string> uniqueWeatherlabel = new HashSet<string>();\r\n\t\t\t\tSetValueNum(\"DashBoard.WeatherNUM\",dataw.Count);\r\n        foreach (JObject item in dataw)\r\n        {\r\n            uniqueWeatherName.Add(item[\"WSName\"].ToString());\r\n\t\t\t\t\t\tuniqueWeatherlabel.Add(item[\"WSLabel\"].ToString());\r\n\t\t\t\t\t\r\n        }\r\n        //Console.WriteLine(\"List of unique SiteNames:\");\r\n\t\t\t\tif(uniqueWeatherName.Count !=0 )\r\n\t\t\t\t{\t\r\n          foreach (string WSName in uniqueWeatherName)\r\n          {\r\n            SetValueStr(\"Weather.Name_\"+counterw.ToString(),WSName);\r\n\t\t\t\t\t\tif (GetValueNum(WSName+\".WeatherStation_Status\")==1)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\tdouble previousETo= GetValueNum(WSName+\".Weather_PreviosDayETO\")/0.0393701 ;\r\n\t\t\t\t\t\t//previousETo=(previousETo/0.3149608)*100;\r\n\t\t\t\t\t\tint Adjust_amount= (int)GetValueNum(WSName+\".Site_Adjust_amount\");\r\n\t\t\t\t\t\tdouble Eto = (((5*10)+50*100*((previousETo))/(((3.2)*6+14)))/10)+Adjust_amount;\r\n\t\t\t\t\t\tSetValueNum (WSName+\".ETO_Equation\",Eto);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tSetValueNum (WSName+\".ETO_Equation\",0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tWeatherName += WSName+\",\";\r\n\t\t\t\t\t\t\tcounterw++;\r\n          }\r\n\t\t\t\t\tcounterw=0;\r\n\t\t\t\t\tforeach (string WSLabel in uniqueWeatherlabel)\r\n          {\r\n            SetValueStr(\"Weather.Label_\"+counterw.ToString(),WSLabel);\r\n\t\t\t\t\t\tWeatherlabel +=WSLabel+\",\";\r\n\t\t\t\t\t\tcounterw++;\r\n          }\t\r\n        }\r\n\t \r\n\t File.WriteAllText(ReportPath+\"WName.txt\",WeatherName);\r\n\t File.WriteAllText(ReportPath+\"Wlable.txt\",Weatherlabel);\r\n\t //Stream.FileSystem.SaveTagsToFileJson(ReportPath+\"WName.txt\",WeatherName);\r\n\t// Stream.FileSystem.SaveTagsToFileJson(ReportPath+\"Wlable.txt\",Weatherlabel);\r\n}\r\n//---------------------------------------------------------------------------------------------\r\nint currentHour = DateTime.Now.Hour;\r\nif (GetValueNum(\"DashBoard.WeatherNUM\")>0)\r\n{\r\n\t int lastHour = DateTime.Now.Hour;\r\n   //int currentHour = DateTime.Now.Hour;\r\n   if (currentHour != GetValueNum(\"Script.Hour\"))\r\n    {\r\n       SetValueNum(\"Script.EtoEnable\",1);\r\n\t\t\t SetValueNum(\"Script.DashBoardTotalFlow\",1);\r\n\t\t\t SetValueNum(\"Script.SystemDashBoardTotalFlow\",1);\r\n       SetValueNum(\"Script.Hour\",currentHour);\r\n\t\t\t\r\n    }\r\n\r\n}\r\nelse\r\n{\r\n\tif (currentHour != GetValueNum(\"Script.Hour\"))\r\n    {\t\r\n\t\t\t \r\n       SetValueNum(\"Script.Hour\",currentHour);\r\n\t\t \r\n    }\r\n}\r\n\r\n//----------------------------------------------------------------------------------------------- Assigning Seasonal Adjustment ----------------------------------------------------------\r\n\r\n// weathersattion.prevETo coped to all Seasonal adjusment\r\n//the num 0.3149608 to be 100%\r\n\r\nint CurrentHour = DateTime.Now.Hour;\r\nint CurrentMin = DateTime.Now.Minute;\r\nint Givenh=(int)GetValueNum(\"DashBoard.Site_Weather_Hour\");\r\nint Givenm=(int)GetValueNum(\"DashBoard.Site_Weather_Min\");\r\n\r\n\r\n\r\nif (File.Exists(filePathw)&&File.Exists(filePathc))\r\n{\r\n\tstring weatherJson =File.ReadAllText(filePathw);\r\n\tstring controllerJson =File.ReadAllText(filePathc);\r\n \r\n\tvar weatherDataList = JsonConvert.DeserializeObject<List<WeatherData>>(weatherJson);\r\n  var controllerDataList = JsonConvert.DeserializeObject<List<ControllerData>>(controllerJson);\r\n\r\n            // Dictionary to store SiteName and corresponding ControllerName\r\n          //  Dictionary<string, string> siteControllerMap = new Dictionary<string, string>();\r\n\r\n            // Find matching SiteName and ControllerName\r\n  foreach (var controllerData in controllerDataList)\r\n       {\r\n\t\t\t\tif (GetValueNum (controllerData.ControllerName+\".Controller_Status\")==1) \r\n\t\t\t\t{ \r\n         foreach (var weatherData in weatherDataList)\r\n             {\r\n\t\t\t\t\t\t\t int Givenh=(int)GetValueNum(weatherData.WSName+\".Site_Weather_Hour\");\r\n\t\t\t\t\t\t\t int Givenm=(int)GetValueNum(weatherData.WSName+\".Site_Weather_Min\");\r\n\t\t\t\t\t\t\t int period =(int) GetValueNum(weatherData.WSName + \".Site_Weather_Period\"); \r\n\t\t\t\t\t\t\t if (GetValueNum(\"Botton.TimeFormat\")==1)\r\n                {\r\n                  //period = period.ToUpper(); // Normalize to uppercase for comparison\r\n                 if (period == 1)\r\n                  {\r\n                   if (Givenh == 12) // 12 AM is 00 in 24-hour format\r\n                     Givenh = 0;\r\n                  }\r\n                else if (period == 2)\r\n                  {\r\n                   if (Givenh != 12) // Add 12 hours for PM, except for 12 PM\r\n                      Givenh += 12;\r\n                   }\r\n                }\r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t DateTime currentTime = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, CurrentHour, CurrentMin, 0);\r\n\t\t\t\t\t\t\t DateTime givenTime = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, Givenh, Givenm, 0);\r\n               // Calculate time difference\r\n               TimeSpan difference = currentTime - givenTime;\r\n                 TimeSpan positiveDifference = difference.Duration(); // Gets the absolute value\r\n//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\H360\\test2.txt\",positiveDifference.ToString());\r\n              if (positiveDifference <= TimeSpan.FromMinutes(5))\r\n                 {\r\n\t\t\t\t\t\t\t                                                                        //controllerData.SiteName == weatherData.SiteName)\r\n                if ( (GetValueNum(weatherData.WSName+\".WeatherStation_Status\")==1) && (weatherData.SiteName.Split(',').Contains(controllerData.SiteName)))\r\n                    {\r\n                        //siteControllerMap[controllerData.SiteName] = controllerData.ControllerName;\r\n                        //Console.WriteLine(controllerData.ControllerName+\"====\"+ weatherData.WSName);   \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t//double previousETo= GetValueNum(weatherData.WSName+\".Weather_PreviosDayETO\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t//previousETo=(previousETo/0.3149608)*100;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t//int Adjust_amount= (int)GetValueNum(weatherData.WSName+\".Site_Adjust_amount\");\r\n\t\t\t\t\t\t\t\t\t\t\t   // double Eto = ((Adjust_amount*10)+50*100*((previousETo))/(((3.2)*6+14)))/10;\r\n\t\t\t\t\t\t\t\t\t\t\t    //File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\H360\\test2.txt\",Eto.ToString());\r\n\t\t\t\t\t\t\t\t\t\t\t    double Eto= GetValueNum(weatherData.WSName+\".ETO_Equation\");\r\n\t\t\t\t\t\t\t\t\t\t\t//\tFile.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\H360\\test2.txt\",controllerData.ControllerType);\r\n\t\t\t\t\t\t\t\t\t\t\t    if (controllerData.ControllerType==\"ACC2\")\r\n\t\t\t\t\t\t\t\t\t\t\t    {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tSetValueNum(controllerData.ControllerName+\".SetSeasonalAdjustValues_GblSeasAdj_Command\",Eto);\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tawait Task.Delay (200);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tSetValueNum(controllerData.ControllerName+\".SetSeasonalAdjustValues_Trigger\",1);\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\telse if (controllerData.ControllerType==\"ICC2\")\r\n\t\t\t\t\t\t\t\t\t\t\t    {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tSetValueNum(controllerData.ControllerName+\".SetGlobalSeasonalAdjust_GblSeasAdj_Command\",Eto);\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tawait Task.Delay (200);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tSetValueNum(controllerData.ControllerName+\".SetGlobalSeasonalAdjust_Trigger\",1);\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t} \r\n\t\t\t\t\t\t\t\t\t\t    \telse if (controllerData.ControllerType==\"ACC1\")\r\n\t\t\t\t\t\t\t\t\t\t\t    {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tSetValueNum(controllerData.ControllerName+\".SetGlobalSeasonalAdjust_GblSeasAdj_Command\",Eto);\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tawait Task.Delay (200);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tSetValueNum(controllerData.ControllerName+\".SetGlobalSeasonalAdjust_Trigger\",1);\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n                        break;\r\n                    }\r\n                }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t  }\r\n       }\r\n\r\n}\r\n\r\n\r\n\r\n//------------------------------------------------------------------------------------------WaterSourceflow------------------------------------------------------------------------\r\n\r\nif (File.Exists(filePath))\r\n{\r\n\tstring jsonString =File.ReadAllText(filePath);\r\n\tJArray jsonArray = JArray.Parse(jsonString);\r\n\r\n        foreach (JObject obj in jsonArray.Children<JObject>())\r\n        {\r\n            string waterSourceControllerName = (string)obj[\"WaterSourceControllerName\"];\r\n            int flowSensor = (int)obj[\"FlowSensor\"];\r\n\r\n            if (waterSourceControllerName != \"\")\r\n            {\r\n               SetValueNum(waterSourceControllerName+\".InCommingFlow\",GetValueNum(waterSourceControllerName+\".ReportCurrentFlow_FSen\"+flowSensor.ToString()+\"FlowRate_Status\"));\r\n\t\t\t\t\t\t\t \r\n            }\r\n\r\n           // Console.WriteLine(\"WaterSourceControllerName:\" + waterSourceControllerName);\r\n           // Console.WriteLine(\"FlowSensor: \" + flowSensor);\r\n        }\r\n}\r\n\r\n\r\n\r\n//===============================================================================================================Classes============================================================================\r\n\r\n public class WeatherData\r\n    {\r\n        public int X { get; set; }\r\n        public int Y { get; set; }\r\n        public Dictionary<string, string> DynamicProps { get; set; }\r\n        public string WSName { get; set; }\r\n        public string WSLabel { get; set; }\r\n        public string WSIPAddress { get; set; }\r\n        public string SiteLabel { get; set; }\r\n        public string SiteName { get; set; }\r\n    }\r\n\r\n    public class ControllerData\r\n    {\r\n        public int X { get; set; }\r\n        public int Y { get; set; }\r\n        public Dictionary<string, string> DynamicProps { get; set; }\r\n        public string ControllerName { get; set; }\r\n        public string ControllerLabel { get; set; }\r\n        public string ControllerType { get; set; }\r\n        public string ControllerIPAddress { get; set; }\r\n        public string SiteName { get; set; }\r\n    }\r\n\r\n\r\n\r\n//**********************************************************************************************Unit*******************************************************************************************************\r\nif (GetValueNum(\"Botton.Unit\")==0)\r\n{\r\n\tSetValueNum(\"Botton.UnitScaleGPM\",1);\t\r\n\tSetValueNum(\"Botton.UnitScaleG\",1);\r\n\tSetValueNum(\"Botton.UnitScaleInch\",1);\r\n\tSetValueNum(\"Botton.UnitScaleMph\",1);\r\n\tSetValueNum(\"Botton.UnitScaleC\",1.8);\r\n\tSetValueNum(\"Botton.UnitScaleC2\",32);\r\n\tSetValueStr(\"Botton.UnitStringGPM/LPS\",\"GPM\");\r\n\tSetValueStr(\"Botton.UnitStringG/m3\",\"Gallons\");\r\n\tSetValueStr(\"Botton.UnitStringInch\",\"inch\");\r\n\tSetValueStr(\"Botton.UnitStringMph/KMh\",\"mph\");\r\n\tSetValueStr(\"Botton.UnitStringC/F\",\"F\");\r\n\tSetValueNum(\"DashBoard.WaterSourceFlow_Max\",2500);\r\n\tSetValueStr(\"Botton.ICC2SensorSetting\",\"Gallon\");\r\n}\r\nelse\r\n{\r\n\tSetValueNum(\"Botton.UnitScaleGPM\",3.7854117842063197);\t\r\n\tSetValueNum(\"Botton.UnitScaleG\",0.00378541);\r\n\tSetValueNum(\"Botton.UnitScaleInch\",25.4);\r\n\tSetValueNum(\"Botton.UnitScaleMph\",1.60934);\r\n\tSetValueNum(\"Botton.UnitScaleC\",1);\r\n\tSetValueNum(\"Botton.UnitScaleC2\",0);\r\n\tSetValueStr(\"Botton.UnitStringGPM/LPS\",\"LPM\");\r\n\tSetValueStr(\"Botton.UnitStringG/m3\",\"m3\");\r\n\tSetValueStr(\"Botton.UnitStringInch\",\"mm\");\r\n\tSetValueStr(\"Botton.UnitStringMph/KMh\",\"Km/h\");\r\n\tSetValueStr(\"Botton.UnitStringC/F\",\"C\");\r\n\tSetValueNum(\"DashBoard.WaterSourceFlow_Max\",35000);\r\n\tSetValueStr(\"Botton.ICC2SensorSetting\",\"liter\");\r\n}\t\r\n\r\n\r\n\r\n//---------------------------------------------------------------------------------retentive------------------------------------\r\n//ICC2 & Rest alarm anlysis \r\npublic async Task Retentive ()\r\n{\r\n\tstring tags=null;\r\n\tstring retPath=Stream.Application.GetAppPath()+@\"\\Retn\\ICC2TotalFlow.json\";\r\n\tList<Tag> list2 = new List<Tag>();\r\n\tlist2 = Stream.Application.GetTags();\r\n\tforeach(Tag t in list2)\r\n\t{\r\n\t if(t.Name.Contains(\"ReportFlowTotals_FlowTotal_Status\")||t.Name.Contains(\"ReportFlowRates_Text_Status\") )\r\n\t\t\t{\r\n\t\t\t\tif (tags ==null)\r\n\t\t\t\t{\r\n\t\t\t\t tags = t.Name+\",\";\r\n\t\t\t\t}\r\n\t\t\t\telse \r\n\t\t\t\t{\r\n\t\t\t\t\t tags += t.Name+\",\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t}\r\n\ttags+=\"DashBoard.SystemResetAlarm_Str,\"+\"DashBoard.SiteResetAlarm_Str\";\r\n\tStream.FileSystem.SaveTagsToFileJson(retPath,tags);\r\n}\r\n\r\n//ACC1\r\npublic async Task Retentive_ACC1 ()\r\n{\r\n\t\r\n\tstring tags3=null;\r\n\tstring retPath3=Stream.Application.GetAppPath()+@\"\\Retn\\ACC1TotalFlow.json\";\r\n\tList<Tag> list3 = new List<Tag>();\r\n\tlist3 = Stream.Application.GetTags();\r\n\tforeach(Tag t in list3)\r\n\t{\r\n\t\t\r\n\t\t \t\t\r\n\t\t\t\tif (tags3 ==null)\r\n\t\t if (Stream.Tag.GetTagParam(t.Name,\"Group\")==\"ACC1\") {continue;}\r\n\t  if(t.Name.Contains(\"ReportFlowTotals_ContTot_Status\")||t.Name.Contains(\"ReportFlowTotals_Text_Status\") )\r\n\t\t{\r\n\t\t\tstring prefix = t.Name.Split('.')[0];\r\n\t\t\t\r\n\t\t\tif (Stream.Tag.GetTagParam(prefix+\".ReportControllerGlobals_SsPrgThold_Status\",\"DataSource\")==\"ACC1\") \r\n\t\t\t{\r\n\t\t\t\tif (tags3 ==null)\r\n\t\t\t\t{\r\n\t\t\t\t tags3 = t.Name+\",\";\r\n\t\t\t\t}\r\n\t\t\t\telse \r\n\t\t\t\t{\r\n\t\t\t\t\t tags3 += t.Name+\",\";\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t }\r\n\t }\r\n\t}\r\n\t\r\n\tStream.FileSystem.SaveTagsToFileJson(retPath3,tags3);\r\n\t\r\n\t\r\n}\r\n\r\n\r\n\r\n\r\n//add tag to run the site Script","IsCylic":true,"IsEvent":false,"Cyclic_timer":1000,"IsValidated":false,"IsScriptEnabled":true,"IsRunOnceAtStartup":false,"EnableTag":"","DllFolderPath":"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\Scripts\\Dlls\\","strReferencePaths_csv":"","IncludeReferencesUnderScripts_Ref_Folder":true,"RunScriptInStandbyMode":false,"Data_3":null,"Data_4":null,"Data_5":null,"Data_6":null,"ver":"4.18.9.5","last_save":"2025-04-29 12:04:41"}