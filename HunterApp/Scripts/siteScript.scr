{"Type":null,"Title":"siteScript","Script_Code":"using System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Data.SQLite;\r\nusing System.IO;\r\nusing Newtonsoft.Json;\r\nusing System.Threading;\r\n//############################################################################################################# Defines ##########################################################################################\r\n int delaySec,sec , min, hour,Flag;\r\n double IrrigationSum ,AlarmedControllersSum ,OnlineControllers ,TotalPVM,TotalStation,TopMaxAlarm,TotalFZAlarms,TotalActiveFZAlarms,TotalDschFlowTotal,MaxFlowSensor ,WaterSourceFlow,TotalCurrentDraw,MASS_Command,TotalStationMax ,TotalPVMMax ;\r\n double[] TopAlarmedConttrollers =new double [500];\r\n string[] TopAlarmedConttrollersName =new string [500];\r\n var Date =  DateTime.Now;\r\n var Yesterday = Date.AddDays(-1);\r\n var Las7days = Date.AddDays(-7);\r\n string ToDay = Date.ToString(\"yyyy-MM-dd\");\r\n string Month = Date.ToString(\"yyyy-MM-01\");\r\n string Year = Date.ToString(\"yyyy\");\r\n int month = Date.Month;\r\n int year = Date.Year;\r\n int day = Date.Day;\r\n int yesterdayDay = Yesterday.Day;\r\n int Las7daysDay = Las7days.Day;\r\n double DashBoadrdDay,DashBoadrdMonth,DashBoadrdWeek,DashBoadrdYear =0;\r\n string StartDate;\r\n string EndDate;\r\n //StartDate = \"'\"+Date.AddDays(-30).ToString(\"yyyy-MM-dd\")+\"'\";\r\n //EndDate = \"'\"+Date.AddDays(+1).ToString(\"yyyy-MM-dd\")+\"'\";\r\n  EndDate = \"'\"+Date.ToString(\"yyyy-MM-dd\")+\"'\";\r\n public int [] AlarmAnalysisCount=new int [3];\r\n public int [] totalAlarmAnalysisCount=new int [3];\r\n string SiteName;\r\n int selectsitebynum=(int)GetValueNum(\"DashBoard.SelectSiteByNum\");\r\n List<string> controllertype = new List<string>();\r\n List<string> controllerLabel = new List<string>();\r\n SetValueStr(\"Script.SiteDashBoardName\",GetValueStr(\"Site.Name_\"+selectsitebynum.ToString()));\r\n SetValueStr(\"DashBoard.SiteLable\",GetValueStr(\"Site.Label_\"+selectsitebynum.ToString()));\r\n SetValueStr(\"DashBoard.SiteControllersList\",GetValueStr(\"Script.SiteDashBoardName\")+\"_List\");\r\n //this for the first time the open DashBoard and srill doent select any button\r\n if(GetValueNum(\"Botton.HeaderSelection\")==0)\r\n{\r\n  SetValueStr(\"Dashboard.CurrentPageName\",\"System\");\r\n\tSetValueNum(\"Botton.HeaderSelection\",1);\r\n\tSetValueNum(\"Botton.Header_SiteSelection\",2);\r\n\tSetValueNum(\"Botton.HeederCoulor\",4);\r\n}\r\n\r\n// this script should run after the json script\r\nif (GetValueStr(\"Script.SiteDashBoardName\")==\"\")\r\n{\r\n\t SiteName = GetValueStr(\"Site.Name_0\"); \r\n\t\r\n}\r\nelse\r\n{\r\n  SiteName = GetValueStr(\"Script.SiteDashBoardName\"); // when Bush the Button shall give this tag the name of the site\r\n}\r\n\r\n//###############################################################################################################################################################################################################\r\n//------------------------------------------------------------------------------------Hunter360 Script DashBoard ----------------------------------------------------------------------------\r\n\t//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n List<string>ControllersNamesList = Site(SiteName);\r\n\r\nSetValueNum(\"DashBoard.SiteControllertNUM\",ControllersNamesList.Count);\r\n\r\n\r\n//--------------------------------------------------------------------------------------------WeatherStation---------------------------------------------------------------------\r\nstring WeatherStationName=WeatherStation(SiteName);\r\nif (WeatherStationName!=null)\r\n\t{\r\n\t\tdouble move;\r\n\t\tmove=(GetValueNum(WeatherStationName+\".Weather_AirTemp\")* GetValueNum(\"Botton.UnitScaleC\"))+GetValueNum(\"Botton.UnitScaleC2\");\r\n\t\tSetValueNum(\"DashBoard.SiteWeather_AirTemp\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Weather_WindDirection\");\r\n\t\tSetValueNum(\"DashBoard.SiteWeather_WindDirection\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Weather_SolarRadiation\");\r\n\t\tSetValueNum(\"DashBoard.SiteWeather_SolarRadiation\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Weather_Humidity\");\r\n\t\tSetValueNum(\"DashBoard.Weather_Humidity\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Weather_WindSpeed\")*GetValueNum(\"Botton.UnitScaleMph\");\r\n\t\tSetValueNum(\"DashBoard.SiteWeather_WindSpeed\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Weather_RainFall\")*0.01*GetValueNum(\"Botton.UnitScaleInch\");\r\n\t\tSetValueNum(\"DashBoard.SiteWeather_RainFall\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Weather_AccumETO\")*GetValueNum(\"Botton.UnitScaleInch\");\r\n\t\tSetValueNum(\"DashBoard.SiteWeather_AccumETO\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Weather_PreviosDayETO\")*GetValueNum(\"Botton.UnitScaleInch\");\r\n\t\tSetValueNum(\"DashBoard.SiteWeather_PreviosDayETO\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Weather_AtmosphericPressure\");\r\n\t\tSetValueNum(\"DashBoard.SiteWeather_AtmosphericPressure\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Site_Weather_Hour\");\r\n\t\tSetValueNum(\"DashBoard.Site_Weather_Hour\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Site_Weather_Min\");\r\n\t\tSetValueNum(\"DashBoard.Site_Weather_Min\",move);\r\n\t\tmove=GetValueNum(WeatherStationName+\".Site_Adjust_amount\");\r\n\t\tSetValueNum(\"DashBoard.Site_Adjust_amount\",move);\r\n\t\tmove = GetValueNum(WeatherStationName + \".ETO_Equation\");\r\n    SetValueNum(\"DashBoard.ETO_Equation\", move);\r\n\t\tmove = GetValueNum(WeatherStationName + \".Site_Weather_Period\");\r\n    SetValueNum(\"DashBoard.Site_Weather_Period\", move);\r\n\t\t\r\n\t\t//set part\r\n\t\t\r\n\t\t\t\t\t\t\t \r\n\t\t\r\n\t\t\r\n\t\tCancellationTokenSource cancellationTokenSource = new CancellationTokenSource();\r\nCancellationToken token = cancellationTokenSource.Token;\r\n\r\n\r\n\r\nif (GetValueNum(\"Script.RunOneTimeThread\")==0)\r\n{\r\n\tWeatherSetting(WeatherStationName);\r\n\r\n\t\r\n}\r\n\r\n\t\t\r\n\t\t\r\n\t\t/*\r\n\t\tif (GetValueNum(\"DashBoard.SetSite_Weather_Hour\")>0)\r\n\t\t\t{\r\n\t\t\t\tmove=GetValueNum(\"DashBoard.SetSite_Weather_Hour\");\r\n\t\t\t\tSetValueNum(WeatherStationName+\".Site_Weather_Hour\",move);\r\n\t\t\t\tSetValueNum(\"DashBoard.SetSite_Weather_Hour\",0);\r\n\t\t\t}\r\n\t\tif (GetValueNum(\"DashBoard.SetSite_Weather_Min\")>0)\r\n\t\t\t{\r\n\t\t\t\tmove=GetValueNum(\"DashBoard.SetSite_Weather_Min\");\r\n\t\t\t\tSetValueNum(WeatherStationName+\".Site_Weather_Min\",move);\r\n\t\t\t\tSetValueNum(\"DashBoard.SetSite_Weather_Min\",0);\r\n\t\t\t}\r\n\t\tif (GetValueNum(\"DashBoard.SetSite_Adjust_amount\")>0)\r\n\t\t\t{\r\n\t\t\t\tmove=GetValueNum(\"DashBoard.SetSite_Adjust_amount\");\r\n\t\t\t\tSetValueNum(WeatherStationName+\".Site_Adjust_amount\",move);\r\n\t\t\t\tSetValueNum(\"DashBoard.SetSite_Adjust_amount\",0);\r\n\t\t\t}\r\n\t\t\t\t\t\r\n\t\t*/\r\n\t}\r\nelse \r\n {\r\n\t  \r\n\t\tSetValueNum(\"DashBoard.SiteWeather_AirTemp\",0);\r\n\t\tSetValueNum(\"DashBoard.SiteWeather_WindDirection\",0);\r\n\t\tSetValueNum(\"DashBoard.SiteWeather_SolarRadiation\",0);\r\n\t\tSetValueNum(\"DashBoard.Weather_Humidity\",0);\r\n\t\tSetValueNum(\"DashBoard.SiteWeather_WindSpeed\",0);\r\n\t\tSetValueNum(\"DashBoard.SiteWeather_RainFall\",0);\r\n\t\tSetValueNum(\"DashBoard.SiteWeather_AccumETO\",0);\r\n\t\tSetValueNum(\"DashBoard.SiteWeather_PreviosDayETO\",0);\r\n\t\tSetValueNum(\"DashBoard.SiteWeather_AtmosphericPressure\",0);\r\n }\r\ntry\r\n{\r\n\t\r\n\t\r\nif ( GetValueNum(\"DashBoard.SiteControllertNUM\")>0)\r\n{\r\n\r\nfor (int i=0; i < GetValueNum(\"DashBoard.SiteControllertNUM\");i++) // SiteControllertNUM = the size of the list \r\n{\r\n  string index= ControllersNamesList[i];\r\n //string index= \"ControllersNamesList[i]\";\r\n\t\r\n\r\n\t\t//---------------------------------------------------------------------Controller Status irrigation  --------------------------------------------------\r\n\tif (controllertype[i]==\"ACC2\")\r\n\t{\r\n\t \tIrrigationSum = IrrigationSum+GetValueNum(index+\".ReportAlarmsInformation_ControllerIrrigating_Status\");\r\n\t}\r\n\telse if(controllertype[i]==\"ICC2\") \r\n\t{\r\n\t\tIrrigationSum = IrrigationSum+(GetValueNum(index+\".ReportControllerType_Station2Runtime_Status\") + GetValueNum(index+\".ReportControllerType_Station1Runtime_Status\") > 1 ? 1: 0 );\r\n\t}\r\n\telse if(controllertype[i]==\"ACC1\") \r\n\t{\r\n\t\tIrrigationSum = IrrigationSum+GetValueNum(index+\".ReportModeAlarms_ControllerIrrigating_Status\");\r\n\t}\r\n\t\r\n\t\t//---------------------------------------------------------------------Controllers Online Status   ---------------------------------------------------\r\n\t\t if ( GetValueNum(index+\".Controller_Status\")==1)\r\n\t\t\t{\r\n\t\t \tOnlineControllers++;\r\n\t\t\t}\r\n//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive\\Desktop\\Work\\Hunter\\App v2.0\\H360\\test.txt\",i.ToString());\r\n//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive\\Desktop\\Work\\Hunter\\App v2.0\\H360\\Tagname.txt\",index+\".Controller_Status\");\r\n//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive\\Desktop\\Work\\Hunter\\App v2.0\\H360\\Counter.txt\",OnlineControllers.ToString());\r\n\t\t//---------------------------------------------------------------------Controllers Status Alarmed ----------------------------------------------------\r\n\t\r\n\tAlarmedControllersSum = AlarmedControllersSum+GetValueNum(index+\".ControllerAlarms\");\r\n\t\r\n\t\r\n/*\r\n \tdouble Alarms = GetValueNum(index+\".ReportAlarmsInformation_CanBusFaultDetected_Status\")+GetValueNum(index+\".ReportAlarmsInformation_ClikSensorAlarm_Status\")+GetValueNum(index+\".ReportAlarmsInformation_ClikSensorRainDelayAlarm_Status\")+GetValueNum(index+\".ReportAlarmsInformation_DecoderModuleOverloaded_Status\")+GetValueNum(index+\".ReportAlarmsInformation_LowVoltageFaultDetected_Status\")+GetValueNum(index+\".ReportAlarmsInformation_MainSafeFlowZoneAlarm_Status\")+GetValueNum(index+\".ReportAlarmsInformation_MaxTransformerCurrentExceeded_Status\")+GetValueNum(index+\".ReportAlarmsInformation_NwwViolationDetected_Status\")+GetValueNum(index+\".ReportAlarmsInformation_PmvFaultDetected_Status\")+GetValueNum(index+\".ReportAlarmsInformation_PowerOutageDetected_Status\")+GetValueNum(index+\".ReportAlarmsInformation_RtcFaultDetected_Status\")+GetValueNum(index+\".ReportAlarmsInformation_SensorDecoderFault_Status\")+GetValueNum(index+\".ReportAlarmsInformation_StationFaultDetected_Status\")+GetValueNum(index+\".ReportAlarmsInformation_CanBusFaultDetected_Status\")+GetValueNum(index+\".ReportAlarmsInformation_StationFlowAlarm_Status\")+GetValueNum(index+\".ReportAlarmsInformation_WeatherSensorAlarm_Status\")+GetValueNum(index+\".ReportAlarmsInformation_WeatherSensorCommunicationsFault_Status\")+GetValueNum(index+\".ReportAlarmsInformation_WeatherSensorRainDelayAlarm_Status\");\r\n //double Alarms = GetValueNum(\".tests\");\r\n \tif(Alarms >0 )\r\n \t\t{\r\n\t\t\t// to add the controllers so  any alarmed control to be counted like index+\"--> 1,2\r\n\t\t//\tSetValueNum(\"index+\".ControllerAlarms\",1);\r\n\t\t\tAlarmedControllersSum++;\r\n\t\t }\r\n\t else\r\n\t\t {\r\n\t\t//\tSetValueNum(\"index+\".ControllerAlarms\",0);\r\n\t\t }\r\n*/\r\n\t\t//---------------------------------------------------------------------------- DashBoard Operation Status  ----------------------------------------------------------------\r\nif ( GetValueNum(index+\".Controller_Status\")==1)\r\n{\r\nif (controllertype[i]==\"ACC2\")\r\n{\t\r\ndouble PVM = GetValueNum(index+\".ReportActiveStations_Pmv1_Status\")+GetValueNum(index+\".ReportActiveStations_Pmv2_Status\")+GetValueNum(index+\".ReportActiveStations_Pmv3_Status\")+GetValueNum(index+\".ReportActiveStations_Pmv4_Status\")+GetValueNum(index+\".ReportActiveStations_Pmv5_Status\")+GetValueNum(index+\".ReportActiveStations_Pmv6_Status\");\r\nTotalPVM = TotalPVM +PVM;\r\nTotalPVMMax= TotalPVMMax + 6 ;\t\r\n}\r\nelse if(controllertype[i]==\"ICC2\") \r\n{\r\n\tTotalPVM = TotalPVM + GetValueNum(index+\".ReportControllerType_PumpOn_Status\") ;\r\n\tTotalPVMMax= TotalPVMMax + 1 ;\r\n}\r\nelse if(controllertype[i]==\"ACC1\") \r\n{\r\n\tTotalPVM = TotalPVM +GetValueNum(index+\".ReportActiveStations_Pmv1_Status\")+GetValueNum(index+\".ReportActiveStations_Pmv2_Status\");\r\n\tTotalPVMMax= TotalPVMMax + 2 ;\r\n}\t\t\r\n\t\r\n\t\t\r\nif (controllertype[i]==\"ACC2\")\r\n{\r\n\tTotalStationMax = TotalStationMax + GetValueNum(index+\".ReportFieldControllerGlobals_Size_Status\") ;\r\n\t \r\n for(int j=1 ;j<226 ;j++)\r\n {\r\n\tTotalStation = TotalStation+ GetValueNum(index+\".ReportActiveStations_Stn\"+j.ToString()+\"_Status\");\r\n\r\n }\r\n}\r\nelse if(controllertype[i]==\"ICC2\") \r\n{\r\n\tTotalStationMax = TotalStationMax + GetValueNum(index+\".ReportControllerGlobals_Size_Status\") ;\r\n\t\r\n\tTotalStation = TotalStation+ (GetValueNum(index+\".ReportControllerType_Station1Runtime_Status\") > 0 ? 1: 0 )+(GetValueNum(index+\".ReportControllerType_Station2Runtime_Status\") > 0 ? 1: 0 ) ;\r\n}\r\nelse if (controllertype[i]==\"ACC1\")\r\n{\r\n\tTotalStationMax = TotalStationMax + GetValueNum(index+\".ReportControllerGlobals_Size_Status\") ;\r\n for(int j=1 ;j<= GetValueNum(index+\".ReportControllerGlobals_Size_Status\") ;j++)\r\n {\r\n\tTotalStation = TotalStation+ GetValueNum(index+\".ReportActiveStations_Stn\"+j.ToString()+\"_Status\");\r\n\r\n }\r\n}\r\n\r\n}\r\n//---------------------------------------------------------------------------- Top 10 Alarmed controllers  ----------------------------------------------------------------\r\n\r\n\t\tif (GetValueNum(\"Botton.ResetAllControllersCounters\")==1)\r\n{\r\n\tSetValueNum(index+\".AlarmCounter\",0);\r\n\t\r\n}\r\n\t\r\n\t\t TopAlarmedConttrollers [i]=GetValueNum(index+\".AlarmCounter\") ;\r\n\t// TopAlarmedConttrollersName[i]=index;\r\n\t   TopAlarmedConttrollersName[i]=controllerLabel[i];\r\n\t   TopMaxAlarm= TopMaxAlarm+ GetValueNum(index+\".AlarmCounter\");\r\n\t\r\n//----------------------------------------------------------------------------  Discharge FZ Alarmed -----------------------------------\r\ndouble FZAlarms = GetValueNum(index+\".ReportFlowZoneMonitoringData_AlarmActive_Status_FZ1\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_AlarmActive_Status_FZ2\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_AlarmActive_Status_FZ3\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_AlarmActive_Status_FZ4\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_AlarmActive_Status_FZ5\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_AlarmActive_Status_FZ6\");\r\n\r\nTotalFZAlarms=TotalFZAlarms+FZAlarms;\r\n\t\r\n//MaxFlowSensor=MaxFlowSensor +6;\r\n//----------------------------------------------------------------------------Discharge Active FZ Alarmed ------------------------------------------------------------\r\n\r\ndouble ActiveFZAlarms = GetValueNum(index+\".ReportFlowZoneMonitoringData_StaRunning_Status_FZ1\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_StaRunning_Status_FZ2\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_StaRunning_Status_FZ3\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_StaRunning_Status_FZ4\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_StaRunning_Status_FZ5\")+GetValueNum(index+\".ReportFlowZoneMonitoringData_StaRunning_Status_FZ6\");\r\n\r\n\r\nTotalActiveFZAlarms=TotalActiveFZAlarms+ActiveFZAlarms;\r\n\t\r\n\t\r\n//---------------------------------------------------------------------------- Discharge FlowTotal  -----------------------------------------------------------------------\r\n\r\ndouble DschFlowTotal =((GetValueNum(index+\".ReportCurrentFlow_FSen1FlowRate_Status\") >= 429496729.5) ? 0 : GetValueNum(index+\".ReportCurrentFlow_FSen1FlowRate_Status\")) +((GetValueNum(index+\".ReportCurrentFlow_FSen2FlowRate_Status\") >= 429496729.5) ? 0 : GetValueNum(index+\".ReportCurrentFlow_FSen2FlowRate_Status\"))+((GetValueNum(index+\".ReportCurrentFlow_FSen3FlowRate_Status\") >= 429496729.5) ? 0 : GetValueNum(index+\".ReportCurrentFlow_FSen3FlowRate_Status\"))+((GetValueNum(index+\".ReportCurrentFlow_FSen4FlowRate_Status\") >= 429496729.5) ? 0 : GetValueNum(index+\".ReportCurrentFlow_FSen4FlowRate_Status\"))+((GetValueNum(index+\".ReportCurrentFlow_FSen5FlowRate_Status\") >= 429496729.5) ? 0 : GetValueNum(index+\".ReportCurrentFlow_FSen5FlowRate_Status\"))+((GetValueNum(index+\".ReportCurrentFlow_FSen6FlowRate_Status\") >= 429496729.5) ? 0 : GetValueNum(index+\".ReportCurrentFlow_FSen6FlowRate_Status\"));\r\n\r\nif (DschFlowTotal > 0)\r\n\t{\r\n\t\t  DschFlowTotal=DschFlowTotal - GetValueNum(index+\".InCommingFlow\");\r\n\t}\r\nTotalDschFlowTotal=TotalDschFlowTotal+DschFlowTotal;\r\n\t\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------------------------------Alarm Analysis--------------------------------------------------------------------------------------------\r\nstring controllername=\"'\"+index+\"%'\";\r\nif (GetValueNum(\"DashBoard.SiteResetAlarm_Bool\")==1)\r\n\t{\r\n\t\tSetValueStr(\"DashBoard.SiteResetAlarm_Str\",Date.AddDays(-1).ToString(\"yyyy-MM-dd\"));\r\n\t\tSetValueNum(\"DashBoard.SiteResetAlarm_Bool\",0);\r\n\t}\r\nif (GetValueStr(\"DashBoard.SiteResetAlarm_Str\")!=\"0\")\r\n\t{\r\n\t\tstring RestDate = GetValueStr(\"DashBoard.SiteResetAlarm_Str\"); \r\n\t\tStartDate = \"'\"+RestDate+\"'\";\t\r\n\t}\r\nelse\r\n\t{\r\n\t\tStartDate = \"'\"+Date.AddDays(-30).ToString(\"yyyy-MM-dd\")+\"'\";\r\n\t}\t\r\n\t\r\nAlarmAnalysisCount[0] = 0;\r\nAlarmAnalysisCount[1] = 0;\r\n\r\n\t//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\test.txt\",StartDate);\r\n\t\r\nstring query6 = \"SELECT State, COUNT(*) AS Count FROM AlarmDB WHERE Tagname like\" +controllername+ \"AND AlarmTime BETWEEN\"+StartDate +\"AND\" + EndDate+ \" GROUP BY State;\";\r\nawait ReadFromSQL(query6,AlarmAnalysisCount);\r\n\t//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\test.txt\",\"Cont :\" + controllername +\"   Active: \"+AlarmAnalysisCount[0]+Environment.NewLine );\r\ntotalAlarmAnalysisCount[0] =totalAlarmAnalysisCount[0]+AlarmAnalysisCount[0];\r\ntotalAlarmAnalysisCount[1] =totalAlarmAnalysisCount[1]+AlarmAnalysisCount[1];\r\n//-------------------------------------------------------------------------------------------Water Source Flow-------------------------------------------------------------------------------------------\r\n\r\n WaterSourceFlow =WaterSourceFlow+ GetValueNum(index+\".InCommingFlow\");\r\n\r\n//------------------------------------------------------------------------------------------Total Current Draw-------------------------------------------------------------------------------------------\r\n\r\n TotalCurrentDraw =TotalCurrentDraw + (GetValueNum(index+\".ReportControllerCurrentDraws_XfmrCurDraw_Status\"));\r\n//\tawait SumFun (TotalCurrentDraw,index+\".ReportControllerCurrentDraws_XfmrCurDraw_Status\");\r\n\r\n//------------------------------------------------------------------------------------------Mass command-------------------------------------------------------------------------------------------\r\nMASS_Command = GetValueNum(\"DashBoard.SiteOperationActions_Auto\")+GetValueNum(\"DashBoard.SiteOperationActions_Shutdown\")+GetValueNum(\"DashBoard.SiteOperationActions_StopIrrigation\")+GetValueNum(\"DashBoard.SiteDaysOff_Trigger\")+GetValueNum(\"DashBoard.SiteGlobalSeasAdj_Trigger\")+GetValueNum(\"DashBoard.SiteSuspend_Apply\")+GetValueNum(\"DashBoard.SiteSuspend_Cancel\")+GetValueNum(\"DashBoard.SitePause_Apply\")+GetValueNum(\"DashBoard.SitePause_Cancel\")+GetValueNum(\"DashBoard.SiteOperationActions_StopIrrigation_ICC2\")+GetValueNum(\"DashBoard.SiteDaysOff_Trigger_ICC2\")+GetValueNum(\"DashBoard.SiteGlobalSeasAdj_Trigger_ICC2\")+GetValueNum(\"DashBoard.SiteDaysOff_Cancel_ICC2\") + GetValueNum(\"DashBoard.SiteOperationActions_Auto_ACC1\") +GetValueNum(\"DashBoard.SiteOperationActions_StopIrrigation_ACC1\") + GetValueNum(\"DashBoard.SiteDaysOff_Trigger_ACC1\") +GetValueNum(\"DashBoard.SiteGlobalSeasAdj_Trigger_ACC1\") + GetValueNum(\"DashBoard.SiteSuspend_Apply_ACC1\") + GetValueNum(\"DashBoard.SiteSuspend_Cancel_ACC1\") + GetValueNum(\"DashBoard.SitePause_Apply_ACC1\") + GetValueNum(\"DashBoard.SitePause_Cancel_ACC1\") ;\r\n//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive\\Desktop\\Work\\Hunter\\App v2.0\\H360\\test.txt\",MASS_Command.ToString());\r\n}\r\n//*********************************************************************************************** After Loop ********************************************************************************************\r\n\r\n\r\n//------------------------------------------------------------------------------------------Mass Commands-------------------------------------------------------------------------------------------\r\n//     Site Operation Actions--------------------------------------------------------------------------------------> Check With ENG Adel//\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t//make it functin in the future\r\n\r\nif (MASS_Command >0 )\r\n{\r\n\r\nfor(int P=0 ; P< GetValueNum(\"DashBoard.SiteControllertNUM\");P++)\r\n{\r\n string index= ControllersNamesList[P];\r\n if ( GetValueNum(index+\".Controller_Status\")==1)\r\n{\r\n\r\n\tif ((GetValueNum(\"DashBoard.SiteOperationActions_Auto\")==1)&&(controllertype[P]==\"ACC2\"))\r\n\t {\r\n\t\tSetValueNum(index+\".CancelProgrammableOff_Trigger\",1);\r\n\t\t//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive\\Desktop\\Work\\Hunter\\App v2.0\\H360\\test.txt\",\"Shutown\");\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SiteOperationActions_Shutdown\")==1)&&(controllertype[P]==\"ACC2\"))\r\n\t {\r\n\t\tSetValueNum(index+\".SetProgrammableOff_OffDays_Command\",0);\r\n\t\tSetValueNum(index+\".SetProgrammableOff_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SiteOperationActions_StopIrrigation\")==1)&&(controllertype[P]==\"ACC2\"))\r\n\t {\r\n\t\tSetValueNum(index+\".StopIrrigation_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SiteOperationActions_StopIrrigation_ICC2\")==1)&&(controllertype[P]==\"ICC2\"))\r\n \t{\r\n\t\tSetValueNum(index+\".StopIrrigation_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SiteDaysOff_Trigger\")==1)&&(controllertype[P]==\"ACC2\"))\r\n\t {\t\r\n\t\tSetValueNum(index+\".SetProgrammableOff_OffDays_Command\",GetValueNum(\"DashBoard.SiteDaysOff_Num\"));\r\n\t\tawait Task.Delay(50);\r\n\t\tSetValueNum(index+\".SetProgrammableOff_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n  if ((GetValueNum(\"DashBoard.SiteDaysOff_Trigger_ICC2\")==1)&&(controllertype[P]==\"ICC2\"))\r\n\t\t{\r\n\t\tSetValueNum(index+\".SetProgrammableOff_OffDays_Command\",GetValueNum(\"DashBoard.SiteDaysOff_Num_ICC2\"));\r\n\t\tawait Task.Delay(50);\r\n\t\tSetValueNum(index+\".SetProgrammableOff_Trigger\",1);\r\n\t\tFlag=1;\r\n\t\t}\r\n\tif ((GetValueNum(\"DashBoard.SiteGlobalSeasAdj_Trigger\")==1)&&(controllertype[P]==\"ACC2\"))\r\n\t {\r\n\t\tSetValueNum(index+\".SetSeasonalAdjustValues_GblSeasAdj_Command\",GetValueNum(\"DashBoard.SiteGlobalSeasAdj_pres\"));\r\n\t\tawait Task.Delay(50);\r\n\t\tSetValueNum(index+\".SetSeasonalAdjustValues_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n  if ((GetValueNum(\"DashBoard.SiteGlobalSeasAdj_Trigger_ICC2\")==1)&&(controllertype[P]==\"ICC2\"))\r\n\t {\r\n\t\tSetValueNum(index+\".SetGlobalSeasonalAdjust_GblSeasAdj_Command\",GetValueNum(\"DashBoard.SiteGlobalSeasAdj_pres_ICC2\"));\r\n\t\tawait Task.Delay(50);\r\n\t\tSetValueNum(index+\".SetGlobalSeasonalAdjust_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SiteSuspend_Apply\")==1)&&(controllertype[P]==\"ACC2\"))\r\n\t {\r\n\t\tSetValueNum(index+\".SuspendIrrigation_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SiteSuspend_Cancel\")==1)&&(controllertype[P]==\"ACC2\"))\r\n\t {\r\n\t\tSetValueNum(index+\".CancelSuspend_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\t if ((GetValueNum(\"DashBoard.SitePause_Apply\")==1)&&(controllertype[P]==\"ACC2\"))\r\n\t {\r\n\t\tSetValueNum(index+\".SetPauseMode_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SitePause_Cancel\")==1)&&(controllertype[P]==\"ACC2\"))\r\n\t {\r\n\t\tSetValueNum(index+\".CancelPauseMode_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SiteDaysOff_Cancel_ICC2\")==1)&&(controllertype[P]==\"ICC2\"))\r\n\t {\r\n\t\tSetValueNum(index+\".CancelProgrammableOff_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\t//ACC1\r\n\t\r\n\t\r\n\tif ((GetValueNum(\"DashBoard.SiteOperationActions_Auto_ACC1\")==1)&&(controllertype[P]==\"ACC1\"))\r\n\t {\r\n\t\tSetValueNum(index+\".CancelProgrammableOff_Trigger\",1);\r\n\t\t//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive\\Desktop\\Work\\Hunter\\App v2.0\\H360\\test.txt\",\"Shutown\");\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SiteOperationActions_StopIrrigation_ACC1\")==1)&&(controllertype[P]==\"ACC1\"))\r\n\t {\r\n\t\tSetValueNum(index+\".StopIrrigation_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SiteDaysOff_Trigger_ACC1\")==1)&&(controllertype[P]==\"ACC1\"))\r\n\t {\t\r\n\t\tSetValueNum(index+\".ProgrammableOff_OffDays_Command\",GetValueNum(\"DashBoard.SiteDaysOff_Num_ACC1\"));\r\n\t\tawait Task.Delay(50);\r\n\t\tSetValueNum(index+\".ProgrammableOff_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SiteGlobalSeasAdj_Trigger_ACC1\")==1)&&(controllertype[P]==\"ACC1\"))\r\n\t {\r\n\t\tSetValueNum(index+\".SetGlobalSeasonalAdjust_GblSeasAdj_Command\",GetValueNum(\"DashBoard.SiteGlobalSeasAdj_pres_ACC1\"));\r\n\t\tawait Task.Delay(50);\r\n\t\tSetValueNum(index+\".SetGlobalSeasonalAdjust_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\t\r\n\t//File.AppendAllText(@\"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\H360\\test.txt\",\"Before Suspend    =>\"+controllertype[P]);\r\n\tif ((GetValueNum(\"DashBoard.SiteSuspend_Apply_ACC1\")==1)&&(controllertype[P]==\"ACC1\"))\r\n\t {\r\n\t\t\r\n\t\tSetValueNum(index+\".SuspendIrrigation_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SiteSuspend_Cancel_ACC1\")==1)&&(controllertype[P]==\"ACC1\"))\r\n\t {\r\n\t\tSetValueNum(index+\".CancelSuspend_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\t if ((GetValueNum(\"DashBoard.SitePause_Apply_ACC1\")==1)&&(controllertype[P]==\"ACC1\"))\r\n\t {\r\n\t\tSetValueNum(index+\".SetPauseMode_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\tif ((GetValueNum(\"DashBoard.SitePause_Cancel_ACC1\")==1)&&(controllertype[P]==\"ACC1\"))\r\n\t {\r\n\t\tSetValueNum(index+\".CancelPauseMode_Trigger\",1);\r\n\t\tFlag=1;\r\n\t }\r\n\t\r\n\t\r\n}\r\n}\r\n}\r\n\r\n\r\n//---------------------------------------------------------------------------- Dash Flow Total  -----------------------------------------------------------------------\r\n//Runs Every hour Async\r\nif (GetValueNum(\"Script.DashBoardTotalFlow\")==1)\r\n{\r\nDashBoardFlowTotal();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nSetValueNum(\"DashBoard.ControllerStatus_Irrigating\",IrrigationSum);   //Controller Status irrigation\r\nSetValueNum(\"DashBoard.ControllersStatus_Alarmed\",AlarmedControllersSum);  //Controllers Status Alarmed \r\nSetValueNum(\"DashBoard.SiteOnlineControllers\",OnlineControllers); // Controllers Online Status          //Eng Ayman should set the Datasource with the status tag//\r\nSetValueNum(\"DashBoard.SiteTotalStations\",TotalStation); // Controllers Total Stations\r\nSetValueNum(\"DashBoard.SiteTotalStation_Max\",TotalStationMax);\t//Controllers Max Stations Size\r\nSetValueNum(\"DashBoard.SiteTotalPVM\",TotalPVM); // Controllers Total PVM  \r\nSetValueNum(\"DashBoard.SiteTotalPMV_Max\",TotalPVMMax); // Controllers Total Max PVM \t\r\n\r\n//Top 10 Alrmed Contollers\r\nOrderArray(TopAlarmedConttrollersName,TopAlarmedConttrollers);\r\nSetValueNum(\"AlarmAna.SiteMaxAlarms\",TopMaxAlarm);\r\nif(GetValueNum(\"AlarmAna.SiteMaxAlarms\")==0)\r\n{\r\n\tSetValueNum(\"AlarmAna.SiteMaxAlarms\",1);\r\n\tSetValueNum(\"Botton.ResetAllControllersCounters\",0);//when resetbutton is 1\r\n}\r\n\r\n\r\n for (int i=0;i<10;i++)\r\n\t{\r\n\t\tSetValueStr (\"AlarmAna.SiteTagName\"+i.ToString(),TopAlarmedConttrollersName[i]);\r\n\t\tSetValueNum (\"AlarmAna.SiteValue\"+i.ToString(),TopAlarmedConttrollers[i]);\r\n\r\n\t}\r\n//Max Flow Sensor\r\nMaxFlowSensor = 6* GetValueNum(\"DashBoard.SiteControllertNUM\");\r\ndouble Scale = GetValueNum(\"Botton.UnitScaleGPM\");\r\n\t\r\nSetValueNum(\"DashBoard.Site_FlowZone_Alarmed\",TotalFZAlarms);       //Discharge FZ Alarmed\r\nSetValueNum(\"DashBoard.Site_FlowZone_Active\",TotalActiveFZAlarms); //Discharge Active FZ Alarmed\r\nSetValueNum(\"DashBoard.Site_FlowZone_TotalFlow\",TotalDschFlowTotal*Scale);//Discharge FlowTotal\r\nSetValueNum(\"DashBoard.Site_FlowZone_MaxNumOFSensor\",MaxFlowSensor);//Max Flow Sensor\r\nSetValueNum(\"DashBoard.Site_FlowZone_MaxFlow\",MaxFlowSensor*800);//Max FlowTotal---------------------------------------------------------> **  // Ask Aded//**\r\n/*\r\nSetValueNum(\"DashBoard.Site_FlowTotal_Daily\",DashBoadrdDay);//Tolat Daily Flow \r\nSetValueNum(\"DashBoard.Site_FlowTotal_Monthly\",DashBoadrdMonth);//Tolat monthly Flow \r\nSetValueNum(\"DashBoard.Site_FlowTotal_Yearly\",DashBoadrdYear);//Tolat yearly Flow \r\n\t*/\r\nSetValueNum(\"AlarmAna.ActANDClrNum0\",totalAlarmAnalysisCount[0]);//Alarm anaysis the Acrive Alarms\r\nSetValueNum(\"AlarmAna.ActANDClrNum1\",totalAlarmAnalysisCount[1]);//Alarm anaysis the Cleared Alarms\r\nSetValueNum(\"DashBoard.SiteWaterSourceFlow\",WaterSourceFlow*Scale);//Water Source Flow\r\nSetValueNum(\"DashBoard.CurrentDraw_Max\",4*GetValueNum(\"DashBoard.SiteControllertNUM\"));  //---------------------------------------------------------> **  // Ask Aded//**\r\n\t//if (GetValueNum(\"Script.Counter\")>=3)\r\n\t//{\r\n\tdouble TotalCurrentDrawScaled = TotalCurrentDraw/1000;\r\n\t\tSetValueNum(\"DashBoard.SiteCurrentDraw_Total\",TotalCurrentDrawScaled);//CurrentDraw_Total\r\n\t\t//SetValueNum(\"Script.Counter\",1);\r\n\t//}\r\n//---------------------------Mass Commands------------------------------------------\r\nif (Flag==1)\r\n{\r\n\tSetValueNum(\"DashBoard.SiteOperationActions_Auto\",0);\r\n\tSetValueNum(\"DashBoard.SiteOperationActions_Shutdown\",0); \r\n\tSetValueNum(\"DashBoard.SiteOperationActions_StopIrrigation\",0);\r\n\tSetValueNum(\"DashBoard.SiteDaysOff_Trigger\",0);\r\n\tSetValueNum(\"DashBoard.SiteGlobalSeasAdj_Trigger\",0);\r\n\tSetValueNum(\"DashBoard.SiteSuspend_Apply\",0);\r\n\tSetValueNum(\"DashBoard.SiteSuspend_Cancel\",0);\r\n\tSetValueNum(\"DashBoard.SitePause_Apply\",0);\r\n\tSetValueNum(\"DashBoard.SitePause_Cancel\",0);\r\n\tSetValueNum(\"DashBoard.SiteOperationActions_StopIrrigation_ICC2\",0);\r\n\tSetValueNum(\"DashBoard.SiteDaysOff_Trigger_ICC2\",0);\r\n\tSetValueNum(\"DashBoard.SiteGlobalSeasAdj_Trigger_ICC2\",0);\r\n\tSetValueNum(\"DashBoard.SiteDaysOff_Cancel_ICC2\",0);\r\n\t//ACC1\r\n\tSetValueNum(\"DashBoard.SiteOperationActions_Auto_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SiteOperationActions_StopIrrigation_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SiteDaysOff_Trigger_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SiteGlobalSeasAdj_Trigger_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SiteSuspend_Apply_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SiteSuspend_Cancel_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SitePause_Apply_ACC1\",0);\r\n\tSetValueNum(\"DashBoard.SitePause_Cancel_ACC1\",0);\r\n\t\r\n\t\r\n}\r\n\r\n}\r\n}\r\ncatch (Exception ex)\r\n{\r\n\t\tSetValueStr(\"Script.DashBoard_DateEX\",ex.Message);\r\n}\r\n\r\n//===============================================================================================Functions===================================================================================\r\n\r\n//first num of cotrollers in the site i will take the name of contollers in the list\r\n//--------------------------------------------------------------------------------------Site Contollers-------------------------------------------------------------------------\r\n\r\npublic List<string> Site (string specificSite)\r\n{\r\nstring filePath =Stream.Application.GetAppPath()+@\"\\H360\\controllers.json\";\r\nif (!File.Exists(filePath))\r\n    {\r\n        // You can handle this situation, throw an exception, or return an empty list.\r\n        return new List<string>();\r\n    }\r\n\r\n string json = File.ReadAllText(filePath);\r\n\r\n        List<Controller> controllers = JsonConvert.DeserializeObject<List<Controller>>(json);\r\n\t\t\t\t\r\n            List<string> controllerNames = new List<string>();\r\n            int controllerCount = 0;\r\n\r\n            foreach (Controller controller in controllers)\r\n            {\r\n                if(controller != null && controller.SiteName == specificSite)\r\n                {\r\n                    controllerNames.Add(controller.ControllerName);\r\n\t\t\t\t\t\t\t\t\t\tcontrollertype.Add(controller.ControllerType);\r\n\t\t\t\t\t\t\t\t\t\tcontrollerLabel.Add(controller.ControllerLabel);\r\n                    controllerCount++;\r\n                }\r\n            }\r\n\r\n\t\t\t\t\t\treturn controllerNames;\r\n\r\n\r\n       //  Console.WriteLine(\"Controller Names: \" + string.Join(\", \", controllerNames));\r\n            //Console.WriteLine(\"Number of Controller Names: \" + controllerCount);\r\n}\r\n\r\n//-------------------------------------------------------------------------------------Weather Station-------------------------------------------------------------------------------------\r\npublic string WeatherStation (string specificSite)\r\n{\r\n string filePath =Stream.Application.GetAppPath()+@\"\\H360\\weatherstations.json\";\r\n if (!File.Exists(filePath))\r\n     {\r\n        // You can handle this situation, throw an exception, or return an empty list.\r\n         return null  ;\r\n     }\r\n string json2 = File.ReadAllText(filePath);\r\n        List<Weather> weatherlist = JsonConvert.DeserializeObject<List<Weather>>(json2);;\r\n\r\n            string WeatherNames=null ;\r\n\t\t\t\t\t\tforeach (Weather weather in weatherlist)\r\n            {\r\n                //if(weather != null && weather.SiteName == specificSite)\r\n                //{\r\n\t\t\t\t\t\t\t\t\tvar siteNames = weather.SiteName.Split(',').Select(s => s.Trim()); // Split and trim site names\r\n\t\t\t\t\t\t\t\t\tif (weather != null && siteNames.Contains(specificSite))\r\n\t\t\t\t\t\t\t\t\t{\r\n                   WeatherNames=weather.WSName;\r\n\t\t\t\t\t\t\t\t\t}\r\n               // }\r\n\t\t\t\t\t\t\t\t\r\n            \r\n            }\r\n\r\n                \r\n\r\n\t\t\t\t\t\treturn WeatherNames;\r\n\r\n\r\n       //  Console.WriteLine(\"Controller Names: \" + string.Join(\", \", controllerNames));\r\n            //Console.WriteLine(\"Number of Controller Names: \" + controllerCount);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------------------------Alarm Analysis---------------------------------------------------------------------------------------------\r\npublic async Task ReadFromSQL (string Query,int[] Value)\r\n{\r\n\r\n        // Specify the path to the SQLite database file\r\n\t\t\t\t\t\t\t\t\tstring filePath = Stream.Application.GetAppPath()+@\"\\Historical\\Alarms.log\";\r\n\t\t\t\t\t\tif (!File.Exists(filePath))\r\n               {\r\n                    // You can handle this situation, throw an exception, or return an empty list.\r\n                     return ;\r\n                }\r\n                // Create a connection to the SQLite database\r\n                using (SQLiteConnection connection = new SQLiteConnection($\"Data Source={filePath};Version=3;\"))\r\n                {\r\n                    connection.Open();\r\n\r\n                    // Specify your SQL query\r\n\t\t\t\t\t\t\t\t\t\t\tstring query = Query;\r\n                 \r\n\r\n                    // Create a command object to execute the query\r\n                    using (SQLiteCommand command = new SQLiteCommand(query, connection))\r\n                    {\r\n\t\t\t\t\t\t\t\t\r\n                        // Execute the query and read data from the database\r\n                        using (SQLiteDataReader reader = command.ExecuteReader())\r\n                        {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Create a list to store the data from the query\r\n                            List<string[]> data = new List<string[]>();\r\n\r\n                            while (reader.Read())\r\n                            {\r\n                               data.Add(new string[] { reader[0].ToString(), reader[1].ToString() });\r\n                               // Console.WriteLine(reader[0] +\",\"+ reader[1] + \",\" + reader[2]);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\tSetValueStr(\".SQLTEST\",reader[0] +\",\"+ reader[1]);\r\n                            }\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Iterate over the list and print each line to the console\r\n                            for (int i = 0; i < data.Count; i++)\r\n                            {\r\n                              //  Console.WriteLine(data[i][0] + \",\" + data[i][1]);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tValue[i] += int.Parse(data[i][1]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n        }\r\n\r\n//---------------------------------------------------------------------------------------------order the array---------------------------------------------------------------------------------\r\n void OrderArray (string[] stringArray, double[] intArray)\r\n            { \r\n\r\n            double[] orderedIntArray = new double[intArray.Length];\r\n            string[] orderedStringArray = new string[stringArray.Length];\r\n\r\n            for (int i = 0; i < intArray.Length; i++)\r\n            {\r\n                int maxIndex = i;\r\n                for (int j = i + 1; j < intArray.Length; j++)\r\n                {\r\n                    if (intArray[j] > intArray[maxIndex])\r\n                    {\r\n                        maxIndex = j;\r\n                    }\r\n                }\r\n\r\n                if (maxIndex != i)\r\n                {\r\n                    double temp = intArray[i];\r\n                    string tempString = stringArray[i];\r\n\r\n                    intArray[i] = intArray[maxIndex];\r\n                    stringArray[i] = stringArray[maxIndex];\r\n\r\n                    intArray[maxIndex] = temp;\r\n                    stringArray[maxIndex] = tempString;\r\n                }\r\n            }\r\n\r\n            orderedStringArray = stringArray;\r\n            orderedIntArray = intArray;\r\n            }\r\n\r\n\r\n\r\npublic async Task SumFun(double TargetVal,string tag)\r\n{\r\n\tTargetVal=TargetVal+GetValueNum(tag);\r\n} \r\n//---------------------------------------------------------------------------------------------DashBoard Flow Total --------------------------------------------------------------------------------\r\npublic async Task DashBoardFlowTotal ()\r\n{\r\n\r\nSetValueNum(\"DashBoard.Site_FlowTotal_DailyMax\",100000);\r\nSetValueNum(\"DashBoard.Site_FlowTotal_MonthlyMax\",1000000);\r\nSetValueNum(\"DashBoard.Site_FlowTotal_WeeklyMax\",1000000);\r\nSetValueNum(\"DashBoard.Site_FlowTotal_YearlyMax\",10000000);\r\ntry\r\n{\r\n\r\nfor (int i=0; i < GetValueNum(\"DashBoard.SiteControllertNUM\");i++) // SiteControllertNUM = the size of the list \r\n{\r\n  string index= ControllersNamesList[i];\r\n\t\r\nList<Tag> list = new List<Tag>();\r\nlist = Stream.Application.GetTags();\r\nforeach(Tag t in list)\r\n{\r\n if(t.Name.Contains(index\t)) \r\n\t{\r\n   if(t.Name.Contains(\"ContTot_Status_Day\"+yesterdayDay.ToString())  || t.Name.Contains(\"ReportFlowTotals_FlowTotal_StatusDay_\"+yesterdayDay.ToString()) )\r\n\t\t\t{\r\n\t\t\t\tif (t.Name.Contains(\"Text\")){continue;}\r\n\t\t\t\tif (t.Name.Contains(\"Timestamp\")){continue;}\r\n\t\t\t\t//if (t.Name.Substring(15, 3) ==\"day\" )\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\tDashBoadrdDay+= GetValueNum(t.Name);\r\n\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\t//else if (t.Name.Substring(15, 3) ==\"mon\" )\r\n\t  else if (t.Name.Contains(\"ContTot_Status_Month\"+month.ToString()) || t.Name.Contains(\"ReportFlowTotals_FlowTotal_StatusMonth_\"+month.ToString()) )\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tif (t.Name.Contains(\"Text\")){continue;}\r\n\t\t\t\tif (t.Name.Contains(\"Timestamp\")){continue;}\r\n\t\t\t\t//if (t.Name.Substring(15, 3) ==\"day\" )\r\n\t\t\t\t\r\n\t\t\t\t\tDashBoadrdMonth+= GetValueNum(t.Name);\r\n\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\t//\telse if (t.Name.Substring(15, 3) ==\"yea\" )\r\n\t\t/*\r\n\t\telse if (t.Name.Contains(\"Status_Year\"+year.ToString()))\r\n\t\t\t{\r\n\t\t\t\tif (t.Name.Contains(\"Text\")){continue;}\r\n\t\t\t\tif (t.Name.Contains(\"Timestamp\")){continue;}\r\n\t\t\t\t//if (t.Name.Substring(15, 3) ==\"day\" )\r\n\t\t\t\t\r\n\t\t\t\t\tDashBoadrdYear+= GetValueNum(t.Name);\r\n\t\t\t\t\t\r\n\t\t\t}\r\n\t\t*/\t\t\r\n\t\telse if (t.Name.Contains(\"Text_Status_Year\") || t.Name.Contains(\"ReportFlowRates_Text_StatusYear\")  )\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tif (t.Name.Contains(\"ReportFlowRates_Text_StatusYear\"))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (GetValueStr(t.Name)==year.ToString())\r\n\t\t\t\t {\r\n\t\t\t\t\tstring tagVal= t.Name.Replace(\"Text\",\"FlowTotal\").Replace(\"ReportFlowRates\",\"ReportFlowTotals\");\r\n\t\t\t\t\tDashBoadrdYear+= GetValueNum(tagVal);\r\n\t\t\t\t }\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t  //if (t.Name.Contains(\"Text\")){continue;}\r\n\t\t\t\t  //if (t.Name.Contains(\"Timestamp\")){continue;}\r\n\t\t\t\t  //if (t.Name.Substring(15, 3) ==\"day\" )\r\n\t\t\t\t if (GetValueStr(t.Name)==year.ToString())\r\n\t\t\t  \t{\r\n\t\t\t\t\tstring tagVal= t.Name.Replace(\"Text\",\"ContTot\");\r\n\t\t\t\t\tDashBoadrdYear+= GetValueNum(tagVal);\r\n\t\t\t\t  }\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\tif(t.Name.Contains(\"ContTot_Status_Day\")||t.Name.Contains(\"ReportFlowTotals_FlowTotal_StatusDay\")  )\r\n\t  {\r\n\t\t\tstring dayString;\r\n\t\t\tint dayNumber;\r\n\t\t  int dayindex = t.Name.IndexOf(\"Day\");\r\n        if (dayindex != -1)\r\n        {\r\n\t\t\t\t\tif (t.Name.Contains(\"ReportFlowTotals_FlowTotal_StatusDay\"))\t\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Extract the substring after \"Day\" and convert it to an integer\r\n\t\t\t\t\t\tdayString = t.Name.Substring(dayindex + 4);// +4 to skip \"Day\"\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n            // Extract the substring after \"Day\" and convert it to an integer\r\n             dayString = t.Name.Substring(dayindex + 3); // +3 to skip \"Day\"\r\n\t\t\t  \t}\r\n             dayNumber = int.Parse(dayString);\r\n\t\t\t\t\tif (( dayNumber > Las7daysDay )&&(dayNumber <=day ))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDashBoadrdWeek += GetValueNum(t.Name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\r\n\t  }\r\n\t\t\r\n }\r\n\t\t\t\r\n}\r\n}\r\nSetValueNum(\"DashBoard.Site_FlowTotal_Daily\",DashBoadrdDay);//Tolat Daily Flow \r\nSetValueNum(\"DashBoard.Site_FlowTotal_Monthly\",DashBoadrdMonth);//Tolat monthly Flow \r\nSetValueNum(\"DashBoard.Site_FlowTotal_Yearly\",DashBoadrdYear);//Tolat yearly Flow \r\nSetValueNum(\"DashBoard.Site_FlowTotal_Weekly\",DashBoadrdWeek);//Tolat week Flow \t\r\n\tSetValueNum(\"Script.DashBoardTotalFlow\",0);\t\r\n}\r\ncatch (Exception ex)\r\n{\r\n\t\tSetValueStr(\"Script.DashBoard_DateEX\",ex.Message);\r\n}\r\n\t\r\n\t\r\n}\r\n\r\n\r\n//---------------------------------------------------------------------------------------------Weather Setting --------------------------------------------------------------------------------\r\npublic async Task WeatherSetting (string WeatherStationName)\r\n{\r\n\ttry\r\n    {\r\n\t\t\tSetValueNum(\"Script.RunOneTimeThread\",1);// set the thread ine time\r\n\t\t\t\r\n\t\t\tif (GetValueNum(\"Botton.CONTROLLER_NUM_Site\")==1)\r\n\t\t\t\t {\r\n\t\t\t\t\t\t\t  double Buffer ;\t\r\n\t\r\n\t\t\t\t\t\t\t  Buffer = GetValueNum(WeatherStationName + \".Site_Weather_Hour\");\r\n\t\t\t\t\t\t\t  SetValueNum(\"DashBoard.SetSite_Weather_Hour\",Buffer);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tBuffer = GetValueNum(WeatherStationName + \".Site_Weather_Min\");\r\n\t\t\t\t\t\t\t  SetValueNum(\"DashBoard.SetSite_Weather_Min\",Buffer);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tBuffer = GetValueNum(WeatherStationName + \".Site_Adjust_amount\");\r\n\t\t\t\t\t\t\t  SetValueNum(\"DashBoard.SetSite_Adjust_amount\",Buffer);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tBuffer = GetValueNum(WeatherStationName + \".Site_Weather_Period\");\r\n\t\t\t\t\t\t\t  SetValueNum(\"DashBoard.SetSite_Weather_Period\",Buffer);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tSetValueNum(\"Botton.CONTROLLER_NUM_Site\",0);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n                if (GetValueNum(\"DashBoard.SetSite_Weather_Hour\") != GetValueNum(WeatherStationName +\".SetSite_Weather_Hour_Change\"))\r\n                {\r\n                    double move = GetValueNum(\"DashBoard.SetSite_Weather_Hour\");\r\n                    SetValueNum(WeatherStationName + \".Site_Weather_Hour\", move);\r\n                    SetValueNum(WeatherStationName +\".SetSite_Weather_Hour_Change\", move);\r\n                }\r\n                if (GetValueNum(\"DashBoard.SetSite_Weather_Min\") != GetValueNum(WeatherStationName +\".SetSite_Weather_Min_Change\"))\r\n                {\r\n                    double move = GetValueNum(\"DashBoard.SetSite_Weather_Min\");\r\n                    SetValueNum(WeatherStationName + \".Site_Weather_Min\", move);\r\n                    SetValueNum(WeatherStationName +\".SetSite_Weather_Min_Change\", move);\r\n                }\r\n                if (GetValueNum(\"DashBoard.SetSite_Adjust_amount\") != GetValueNum(WeatherStationName +\".SetSite_Adjust_amount_Change\"))\r\n                {\r\n                    double move = GetValueNum(\"DashBoard.SetSite_Adjust_amount\");\r\n                    SetValueNum(WeatherStationName + \".Site_Adjust_amount\", move);\r\n                    SetValueNum(WeatherStationName +\".SetSite_Adjust_amount_Change\", move);\r\n                }\r\n\t\t\t\t\t\t\t   if (GetValueNum(\"DashBoard.SetSite_Weather_Period\") != GetValueNum(WeatherStationName +\".SetSite_Weather_Period_Change\"))\r\n                {\r\n                    double move = GetValueNum(\"DashBoard.SetSite_Weather_Period\");\r\n                    SetValueNum(WeatherStationName + \".Site_Weather_Period\", move);\r\n                    SetValueNum(WeatherStationName +\".SetSite_Weather_Period_Change\",move);\r\n                }\r\n\t\t\t\t\t\t\t          \r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n                // Delay to prevent tight loop, adjust the interval as needed\r\n                await Task.Delay(100); // Delay for 1 second, supporting cancellation\r\n\t\t\t\t\t\t\tSetValueNum(\"Script.RunOneTimeThread\",0);// set the thread ine time\r\n            }\r\n            catch (TaskCanceledException)\r\n            {\r\n\t\t\t\t\t\t\tSetValueNum(\"Script.RunOneTimeThread\",0);\r\n                // Handle the task being canceled\r\n               \r\n            }\r\n}\r\n\r\n\r\n\r\n//===============================================================================================Classes===================================================================================\r\n\r\n\r\npublic class Controller\r\n    {\r\n        public int X { get; set; }\r\n        public int Y { get; set; }\r\n        public Dictionary<string, string> DynamicProps { get; set; }\r\n        public string ControllerName { get; set; }\r\n        public string ControllerLabel { get; set; }\r\n        public string ControllerType { get; set; }\r\n        public object ControllerIPAddress { get; set; }\r\n        public string SiteName { get; set; }\r\n    }\r\n\r\npublic class Weather\r\n    {\r\n       \r\n        public string WSName { get; set; }\r\n        public string WSLabel { get; set; }\r\n        public object WSIPAddress { get; set; }\r\n\t\t\t\tpublic string SiteLabel { get; set; }\r\n        public string SiteName { get; set; }\r\n    }\r\n\r\n\r\n/*\r\npublic class CustomComparer : IComparer<int>\r\n    {\r\n        public int Compare(int x, int y)\r\n        {\r\n            // Compare in descending order\r\n            return y.CompareTo(x);\r\n        }\r\n    }\r\n*/\r\n\r\n//SetValueNum(\"Script.Counter\",GetValueNum(\"Script.Counter\")+1);\r\nSetValueNum(\"Script.SystemStattingUp\",1);","IsCylic":true,"IsEvent":false,"Cyclic_timer":1500,"IsValidated":false,"IsScriptEnabled":true,"IsRunOnceAtStartup":false,"EnableTag":"","DllFolderPath":"C:\\Users\\ahmed\\OneDrive - streamcontrols.com\\Desktop\\Work\\Hunter\\HunterApp\\Scripts\\Dlls\\","strReferencePaths_csv":"","IncludeReferencesUnderScripts_Ref_Folder":true,"RunScriptInStandbyMode":false,"Data_3":null,"Data_4":null,"Data_5":null,"Data_6":null,"ver":"4.18.9.7","last_save":"2025-04-30 01:04:41"}